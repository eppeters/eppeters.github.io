<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dinogalactic</title><link href="https://www.dinogalactic.com/" rel="alternate"></link><link href="https://www.dinogalactic.com/feeds/all.atom.xml" rel="self"></link><id>https://www.dinogalactic.com/</id><updated>2022-06-29T19:56:00-04:00</updated><entry><title>Fix Docker Errors When Building a CDK Construct Library with projen</title><link href="https://www.dinogalactic.com/fix-docker-errors-when-building-a-cdk-construct-library-with-projen.html" rel="alternate"></link><published>2022-06-29T14:56:00-04:00</published><updated>2022-06-29T19:56:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2022-06-29:/fix-docker-errors-when-building-a-cdk-construct-library-with-projen.html</id><summary type="html">&lt;p&gt;Recently I got the following error from a GitHub action run when using the &lt;a href="https://projen.io/awscdk-construct.html"&gt;&lt;code&gt;projen&lt;/code&gt; AWS CDK Construct Library project generator&lt;/a&gt; while contributing to the open-source &lt;a href="https://github.com/VerticalRelevance/control-broker/"&gt;Control Broker&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The CDK code that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I got the following error from a GitHub action run when using the &lt;a href="https://projen.io/awscdk-construct.html"&gt;&lt;code&gt;projen&lt;/code&gt; AWS CDK Construct Library project generator&lt;/a&gt; while contributing to the open-source &lt;a href="https://github.com/VerticalRelevance/control-broker/"&gt;Control Broker&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The CDK code that kicked off the denied Docker daemon call was the following:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;constructor&lt;/span&gt;(scope: &lt;span style="color: #007788; font-weight: bold"&gt;Construct&lt;/span&gt;, id: &lt;span style="color: #007788; font-weight: bold"&gt;string&lt;/span&gt;) {
    &lt;span style="color: #006699; font-weight: bold"&gt;super&lt;/span&gt;(scope, id);
    &lt;span style="color: #006699; font-weight: bold"&gt;this&lt;/span&gt;.handler &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; PythonFunction(&lt;span style="color: #006699; font-weight: bold"&gt;this&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;`&lt;/span&gt;&lt;span style="color: #AA0000"&gt;${&lt;/span&gt;id&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;CloudFormationInputHandler`&lt;/span&gt;, {
      entry: &lt;span style="color: #007788; font-weight: bold"&gt;join&lt;/span&gt;(__dirname, &lt;span style="color: #CC3300"&gt;&amp;#39;lambda-function-code/cloudformation-input-handler&amp;#39;&lt;/span&gt;),
      runtime: &lt;span style="color: #007788; font-weight: bold"&gt;Runtime.PYTHON_3_9&lt;/span&gt;,
      index&lt;span style="color: #555555"&gt;:&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;lambda_function.py&amp;#39;&lt;/span&gt;,
      handler&lt;span style="color: #555555"&gt;:&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;lambda_handler&amp;#39;&lt;/span&gt;,
      timeout: &lt;span style="color: #007788; font-weight: bold"&gt;Duration.seconds&lt;/span&gt;(&lt;span style="color: #FF6600"&gt;60&lt;/span&gt;),
    });
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this &lt;code&gt;PythonFunction&lt;/code&gt; construct builds all the dependencies and things for a Python-based Lambda function into the Lambda code zip without requiring the user to do much of anything to make this happen. It is very intuitive. It does, however use Docker, which hadn't been a problem for me in other contexts.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But I still got the above error, so I spent a long while trying to figure this out. I first discovered that one major problem was that my &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt; steps, in my GitHub workflow files, which are generated by &lt;code&gt;projen&lt;/code&gt;, were running inside a container. This means the Docker error I was getting was coming from inside the container that was running my GitHub job. The first clue. In my case, the GitHub job container was &lt;a href="https://hub.docker.com/r/jsii/superchain/tags"&gt;&lt;code&gt;jsii/superchain&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #0099FF; font-style: italic"&gt;# ~~ Generated by projen. To modify, edit .projenrc.js and run &amp;quot;npx projen&amp;quot;.&lt;/span&gt;

&lt;span style="color: #330099; font-weight: bold"&gt;name&lt;/span&gt;: release
&lt;span style="color: #330099; font-weight: bold"&gt;on&lt;/span&gt;:
  &lt;span style="color: #330099; font-weight: bold"&gt;push&lt;/span&gt;:
    &lt;span style="color: #330099; font-weight: bold"&gt;branches&lt;/span&gt;:
      - main
  &lt;span style="color: #330099; font-weight: bold"&gt;workflow_dispatch&lt;/span&gt;: {}
&lt;span style="color: #330099; font-weight: bold"&gt;jobs&lt;/span&gt;:
  &lt;span style="color: #330099; font-weight: bold"&gt;release&lt;/span&gt;:
    &lt;span style="color: #330099; font-weight: bold"&gt;runs-on&lt;/span&gt;: ubuntu-latest
    &lt;span style="color: #330099; font-weight: bold"&gt;permissions&lt;/span&gt;:
      &lt;span style="color: #330099; font-weight: bold"&gt;contents&lt;/span&gt;: write
    &lt;span style="color: #330099; font-weight: bold"&gt;outputs&lt;/span&gt;:
      &lt;span style="color: #330099; font-weight: bold"&gt;latest_commit&lt;/span&gt;: ${{ steps.git_remote.outputs.latest_commit }}
    &lt;span style="color: #330099; font-weight: bold"&gt;env&lt;/span&gt;:
      &lt;span style="color: #330099; font-weight: bold"&gt;CI&lt;/span&gt;: &lt;span style="color: #CC3300"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
    &lt;span style="color: #330099; font-weight: bold"&gt;steps&lt;/span&gt;:
      &lt;span style="color: #0099FF; font-style: italic"&gt;# I&amp;#39;ve remove steps just to shorten this snippet&lt;/span&gt;
      - &lt;span style="color: #330099; font-weight: bold"&gt;name&lt;/span&gt;: release
        &lt;span style="color: #330099; font-weight: bold"&gt;run&lt;/span&gt;: npx projen release
    &lt;span style="color: #330099; font-weight: bold"&gt;container&lt;/span&gt;:
      &lt;span style="color: #330099; font-weight: bold"&gt;image&lt;/span&gt;: jsii/superchain:1-buster-slim-node14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;npx projen release&lt;/code&gt; does a lot of things, but one of the things it does is run Jest tests. This was the part that was raising the permissions error regarding the Docker daemon socket. I started troubleshooting. At first I thought it was impossible to access the docker API from within a GitHub action, but that was quickly disproven when I remembered that I had done it before in a GitHub action, albeit outside a container (i.e. on the GitHub job's host, meaning in a job that did not have the &lt;code&gt;container&lt;/code&gt; option set).&lt;/p&gt;
&lt;p&gt;I then tried another angle. I realized that the container might not have access to the Docker socket because it hadn't been mapped into the container's filesystem. I decided to change the &lt;code&gt;container&lt;/code&gt; configuration to the following:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #330099; font-weight: bold"&gt;container&lt;/span&gt;:
    &lt;span style="color: #330099; font-weight: bold"&gt;image&lt;/span&gt;: jsii/superchain:1-buster-slim-node14
    &lt;span style="color: #330099; font-weight: bold"&gt;volumes&lt;/span&gt;:
        - /var/run/docker.sock:/var/run/docker.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Surely this would work! Now the socket file actually exists within my job container.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Same error.&lt;/p&gt;
&lt;p&gt;I then stepped back for a moment and considered the error message. As is so often the case, the error message contained all the information I needed from the start, but I didn't realize that until digging around, wracking my brain, and taking a break. It's kind of like good movies -- usually the first scene contains most of the information of the movie, but you don't know how to interpret the presentation just yet. But that's enough about the philosophy of error messages.&lt;/p&gt;
&lt;p&gt;A real breakthrough came when I inspected the Dockerfile for the &lt;code&gt;jsii/superchain&lt;/code&gt; container.&lt;/p&gt;
&lt;p&gt;Critically, I found the following line within the &lt;a href="https://hub.docker.com/layers/superchain/jsii/superchain/1-buster-slim-node14/images/sha256-42f80a4fa82100da20770dbaabcae30526e30a0e263f5fa9151b2df3f701540d?context=explore"&gt;Dockerfile&lt;/a&gt;, and I immediately knew it to be the culprit.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;USER&lt;/span&gt;&lt;span style="color: #CC3300"&gt; superchain:superchain&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A different user besides &lt;code&gt;root&lt;/code&gt; wouldn't have the permissions to access the Docker daemon, so this container image is incompatible with building Docker images on GitHub actions.&lt;/p&gt;
&lt;p&gt;But how could this be possible? Doesn't the CDK package all kinds of assets inside of Docker containers, including (like my use case) the code for Lambda functions? Indeed, it does.&lt;/p&gt;
&lt;p&gt;For a moment I thought I would have to rewrite my Lambda functions in Typescript so they could be built with &lt;code&gt;esbuild&lt;/code&gt; outside of a container, but then I got sad because that would mean that I couldn't use things like Lambda layers in my Construct, since those could also need (or at least benefit from using) Docker to build them.&lt;/p&gt;
&lt;p&gt;I also found &lt;a href="https://projen.io/api/API.html#projen-awscdk-lambdafunction"&gt;this projen project page&lt;/a&gt; that seemed to indicate that the preferred way to author Lambda functions using projen projects is to write them in Typescript. Once again, I felt that the extreme dedication to Typescript within the CDK community was at odds with its stated goal to support many runtimes. If the only way interoperability works is if you write &lt;em&gt;everything&lt;/em&gt; in Typescript, then only the users of Constructs would be able to write in any other language. But then, why would they write in some other language if, ultimately, they would only be able to share their code with users in still other languages if they had written their code in Typescript to begin with. Why not just make everyone write CDK code in Typescript, especially since &lt;a href=""&gt;you need node&lt;/a&gt; for any JSII-based project? Most importanty for my immediate need, avoiding the Docker building altogether would allow me to use my Python Lambda Function code in my &lt;/p&gt;
&lt;p&gt;I feel bad, but &lt;a href="https://blog.dmichael.be/2021/07/13/Using-Projen-for-CDK-Constructs/"&gt;this person&lt;/a&gt; kept going down the path I was on and concluded that they couldn't use Docker in GitHub actions with their projen project either, coincidentally because they used the &lt;code&gt;PythonLambdaFunction&lt;/code&gt; Construct as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An interesting problem I ran into when using the PythonFunction with GitHub Actions is the construct uses Docker under the hood to install dependencies. This caused issues because Docker was unable to be called within the Action. The solution is to use the L2 Construct SingletonFunction and the local bundle option. This is well described in this AWS blog post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But I digress. I finally saw the light and came up with a different approach that had many benefits.&lt;/p&gt;
&lt;p&gt;Here is the test code that instantiated the &lt;code&gt;PythonLambda&lt;/code&gt; construct, though indirectly through the &lt;code&gt;new CloudFormationInputHandler()&lt;/code&gt; call:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;test(&lt;span style="color: #CC3300"&gt;&amp;#39;ControlBroker can be created and attached to a stack&amp;#39;&lt;/span&gt;, () &lt;span style="color: #555555"&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; stack &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; Stack();
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; api &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; Api(stack, &lt;span style="color: #CC3300"&gt;&amp;#39;ControlbrokerApi&amp;#39;&lt;/span&gt;, {});

  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; cfnInputHandler &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; CloudFormationInputHandler(stack, &lt;span style="color: #CC3300"&gt;&amp;#39;CfnInputHandler&amp;#39;&lt;/span&gt;);
  &lt;span style="color: #0099FF; font-style: italic"&gt;// ^^ The above instantiates the PythonLambda construct and kicks off the&lt;/span&gt;
  &lt;span style="color: #0099FF; font-style: italic"&gt;// ^^ Docker daemon calls during bundling (which happens BEFORE synth!)&lt;/span&gt;

  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; cfnInputHandlerApiBinding &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; HttpApiBinding(&lt;span style="color: #CC3300"&gt;&amp;#39;CloudFormation&amp;#39;&lt;/span&gt;, api, cfnInputHandler);
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; evalEngine &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; OpaEvalEngine(stack, &lt;span style="color: #CC3300"&gt;&amp;#39;EvalEngine&amp;#39;&lt;/span&gt;);
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; evalEngineBinding &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; HttpApiBinding(&lt;span style="color: #CC3300"&gt;&amp;#39;EvalEngine&amp;#39;&lt;/span&gt;, api, evalEngine);
  api.setEvalEngine(evalEngine, evalEngineBinding);
  api.addInputHandler(cfnInputHandler, cfnInputHandlerApiBinding);
  &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; ControlBroker(stack, &lt;span style="color: #CC3300"&gt;&amp;#39;TestControlBroker&amp;#39;&lt;/span&gt;, {
    api,
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Why do I have to &lt;strong&gt;instantiate&lt;/strong&gt; my constructs that need Docker for bundling within my unit tests? Why not just mock those (or at least the bundling part) out and thereby avoid the Docker building. It would definitely cut down on test execution time, after all, and arguably actual Lambda function bundling belongs to the consumers of the Constructs rather than the Construct library itself. Perhaps a custom integration testing phase could do this bundling as part of a test deployment or something, but there was no need to do this during the packaging and release process of my Construct library. It would also reduce the number of dependencies needed to run my tests and build my library (because it would remove Docker).&lt;/p&gt;
&lt;p&gt;So I sought a way to mock out the bundling part of my Lambda functions in my unit tests.&lt;/p&gt;
&lt;p&gt;I came up with the following, which mocks the &lt;code&gt;PythonLambda&lt;/code&gt; class, skipping any bundling:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; { PythonFunction } from &lt;span style="color: #CC3300"&gt;&amp;#39;@aws-cdk/aws-lambda-python-alpha&amp;#39;&lt;/span&gt;;

jest.mock(&lt;span style="color: #CC3300"&gt;&amp;#39;@aws-cdk/aws-lambda-python-alpha&amp;#39;&lt;/span&gt;);

&lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; mockedPythonFunction &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #555555"&gt;&amp;lt;&lt;/span&gt;jest.Mock&lt;span style="color: #555555"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #006699; font-weight: bold"&gt;typeof&lt;/span&gt; PythonFunction&lt;span style="color: #555555"&gt;&amp;gt;&amp;gt;&lt;/span&gt;(PythonFunction &lt;span style="color: #006699; font-weight: bold"&gt;as&lt;/span&gt; unknown);
mockedPythonFunction.mockImplementation(() &lt;span style="color: #555555"&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; original &lt;span style="color: #555555"&gt;=&lt;/span&gt; jest.requireActual(&lt;span style="color: #CC3300"&gt;&amp;#39;@aws-cdk/aws-lambda-python-alpha&amp;#39;&lt;/span&gt;);
  &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; {
    ...original.PythonFunction,
    functionArn&lt;span style="color: #555555"&gt;:&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;arn:aws:lambda:us-east-1:123456789012:function:mockfunction&amp;#39;&lt;/span&gt;,
    addPermission&lt;span style="color: #555555"&gt;:&lt;/span&gt; () &lt;span style="color: #555555"&gt;=&amp;gt;&lt;/span&gt; {},
  };
});

test(&lt;span style="color: #CC3300"&gt;&amp;#39;ControlBroker can be created and attached to a stack&amp;#39;&lt;/span&gt;, () &lt;span style="color: #555555"&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; stack &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; Stack();
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; api &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; Api(stack, &lt;span style="color: #CC3300"&gt;&amp;#39;ControlbrokerApi&amp;#39;&lt;/span&gt;, {});
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; cfnInputHandler &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; CloudFormationInputHandler(stack, &lt;span style="color: #CC3300"&gt;&amp;#39;CfnInputHandler&amp;#39;&lt;/span&gt;);
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; cfnInputHandlerApiBinding &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; HttpApiBinding(&lt;span style="color: #CC3300"&gt;&amp;#39;CloudFormation&amp;#39;&lt;/span&gt;, api, cfnInputHandler);
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; evalEngine &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; OpaEvalEngine(stack, &lt;span style="color: #CC3300"&gt;&amp;#39;EvalEngine&amp;#39;&lt;/span&gt;);
  &lt;span style="color: #006699; font-weight: bold"&gt;const&lt;/span&gt; evalEngineBinding &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; HttpApiBinding(&lt;span style="color: #CC3300"&gt;&amp;#39;EvalEngine&amp;#39;&lt;/span&gt;, api, evalEngine);
  expect(mockedPythonFunction).toHaveBeenCalled();
  api.setEvalEngine(evalEngine, evalEngineBinding);
  api.addInputHandler(cfnInputHandler, cfnInputHandlerApiBinding);
  &lt;span style="color: #006699; font-weight: bold"&gt;new&lt;/span&gt; ControlBroker(stack, &lt;span style="color: #CC3300"&gt;&amp;#39;TestControlBroker&amp;#39;&lt;/span&gt;, {
    api,
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The particular portions of interest are those &lt;code&gt;jest&lt;/code&gt; mock-related calls and &lt;code&gt;mockedPythonFunction.mockImplementation()&lt;/code&gt;. That &lt;code&gt;mockImplementation()&lt;/code&gt; call mocks out the property &lt;code&gt;functionArn&lt;/code&gt; and the method &lt;code&gt;addPermission()&lt;/code&gt;, which I found the surrounding code needed in order to still function. For instance, without a &lt;code&gt;functionArn&lt;/code&gt; value, which of course the real non-mocked code provides, I would get the following error:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;FAIL  test/control-broker.test.ts
 ● ControlBroker can be created and attached to a stack

   Either `integrationSubtype` or `integrationUri` must be specified.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, with the minimal necessary mock implementation, I get the following:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Test Suites: 2 passed, 2 total
Tests:       2 passed, 2 total
Snapshots:   0 total
Time:        4.26 s, estimated 5 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yay! Previously test runs took significantly longer - at least 19 seconds if the container already existed and was cached, and far longer (minutes) if not.&lt;/p&gt;
&lt;p&gt;The most important thing is that no Docker containers are created during unit test runs any longer, and I think this approach can be used by others in the future to both speed up and make their AWS CDK Construct Library unit test runs compatible with GitHub actions.&lt;/p&gt;</content><category term="AWS"></category><category term="aws"></category><category term="software development"></category><category term="cdk"></category><category term="projen"></category><category term="jsii"></category><category term="docker"></category><category term="open source"></category></entry><entry><title>How to Learn Any AWS Service in a Day</title><link href="https://www.dinogalactic.com/how-to-learn-any-aws-service-in-a-day.html" rel="alternate"></link><published>2022-06-16T14:56:00-04:00</published><updated>2022-06-16T19:56:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2022-06-16:/how-to-learn-any-aws-service-in-a-day.html</id><summary type="html">&lt;p&gt;How to Learn Any AWS Service in a Day&lt;/p&gt;</summary><content type="html">&lt;p&gt;It doesn't really matter exactly how many AWS services exist - the sheer number of them is overwhelming, and (it feels like) they add more everyday. No one person can know how to use all of them.&lt;/p&gt;
&lt;p&gt;The trick to being successful long-term in the cloud, getting new gigs, and overcoming challenges is not learning every service. In fact, the title of this article is a lie. You can't learn a service in a day, or at least not in the way you'd learn it if you implemented something in it or worked with it for a year. But very often you'll need an understanding better than "I know what AWS says this service does" but nowhere near as deep as "I know where the demons are in this service."&lt;/p&gt;
&lt;p&gt;You need a structured learning process for learning new services to this level quickly. My approach start making connections in your head between the &lt;em&gt;objects&lt;/em&gt; in a service and the &lt;em&gt;actions&lt;/em&gt; you can take with them. In short, I am simply recommending that you build a mental graph of the parts of a service and their relationships. This article will show you how to do that and where to get the information to do so. The title is just for clickbait :)&lt;/p&gt;
&lt;h2&gt;What no one tells you about AWS&lt;/h2&gt;
&lt;p&gt;AWS isn't a bunch of products that make it easier/faster to get things done. AWS is really just a bunch of HTTP APIs. These define exactly what you can and can't do in AWS. When the next Andy Jassy says "We launched service X!" he means "We launched a new HTTP API!"&lt;/p&gt;
&lt;h2&gt;What no one tells you about the docs&lt;/h2&gt;
&lt;p&gt;No one tells you that organizations, massive ones, that use AWS are somewhere on a crawl, walk, run continuum, and the fact is that their level of maturity changes from service to service and department to department. Maybe some levels of business are completely, natively built on AWS, but maybe some data analytics teams still use on-premise data warehousing backed by batch ETL and basic ad-hoc querying with no awareness of Amazon Redshift or any of AWS's other analytics offerings. But think of how AWS convinces that one lagging line-of-business to come off that on-premise workload. The two sections of the business are so different, and the two sets of people involved so different that AWS can't rely on its overall reputation to sell services. They need a quick way to convince an org's most businessy technical staff to greenlight using each service individually. AWS doesn't try to sell products to customers based on boring things such as "You can do the same thing you're doing now, but &lt;em&gt;maybe&lt;/em&gt; for cheaper!", since going to the cloud &lt;em&gt;might&lt;/em&gt; be cheaper, but it might not. AWS instead targets organizations' drives to &lt;strong&gt;grow&lt;/strong&gt; by promoting exciting long-range prospects for each service such as "Predictive modeling of data sourced from streams, data lakes, and more."&lt;/p&gt;
&lt;p&gt;Take this basic sales drive and combine it with the fact that the people writing AWS's documentation are very familiar with Redshift and all the cool things it can do, and the documentation ends up looking very top-down as a result. What this means is that the documentation barely tells you what the service &lt;em&gt;can really do&lt;/em&gt;. In other words, yeah Sagemaker can infer deeply meaningful conclusions from terrabyte datasets, but what the heck are the pieces involved in that?&lt;/p&gt;
&lt;p&gt;On the first page of a service's docs, usually called "Getting Started," the focus is on getting customers to do something that shows results really, really quickly rather than teaching the service. (Side note: the "What is &lt;em&gt;Some Service&lt;/em&gt;?" or "How &lt;em&gt;some service&lt;/em&gt; works" first-pagers are usually way better and closer to what I describe here, so read those if your service has one.) AWS wants you to see the service as a nice, packaged solution rather than a bunch of building blocks that can be hooked together in different ways (and maybe not the specific way you want!). But as any experienced AWS developer can tell you, the real work of implementation requires thinking about services almost entirely in the latter way. Interesting problems aren't covered in the Getting Started guides. They also operate at an abstracted level, sort of in the way that getting a guided tour of a building is probably fine if you're visiting on vacation, but if you're there to inspect the building for safety and soundness of design, you probably want to poke around on your own first without the layer of varnish and bias that comes with a guided tour.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I think the &lt;a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/how-it-works.html"&gt;AWS IoT Greengrass v2 "How AWS IoT Greengrass works" guide&lt;/a&gt; is a pretty good example of how some of the first docs AWS shows to you &lt;em&gt;can&lt;/em&gt; be good. I like this one particularly because of its &lt;a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/how-it-works.html#concept-overview"&gt;"Key concepts for AWS IoT Greengrass"&lt;/a&gt; section that breaks down the big pieces of the Greengrass service and avoids all the abstraction that Getting Started guides necessarily introduce first.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The rest of the AWS docs sections are usually a mixture of disjointed guides of varying depth on a smattering of topics within the service. They are packed with useful information, but if you're trying to learn really quickly, they can get you mired in the depth of one topic without giving you a survey of what the service as a whole does. Sometimes they're organized as one section per feature of the service. They're often heavily console focused, which can be a fine if time-consuming and slightly misleading way of learning a service. The biggest problem with AWS's service docs is not that they won't teach you things - they will - it's that they vary so much in structure between services that your strategy for digesting one service's docs doesn't really transfer to the next. Remember - we're trying to come up with a strategy that we can use across all the services since there are a couple hundred services to learn, so we can't waste our first moments with a service poking around in possibly fruitless areas. We need the pure, unadulterated good stuff.&lt;/p&gt;
&lt;h2&gt;Breaking the docs down&lt;/h2&gt;
&lt;p&gt;The HTTP API reference documentation is the absolute best source for learning about a service, however. I cannot stress this enough: &lt;strong&gt;every tool that uses this service uses this API&lt;/strong&gt;. The only exceptions might be some behind-the-scenes APIs that the public (i.e. everyone but AWS employees) doesn't know about, but even AWS services use these API endpoints to interact with services that they depend on. Boto3, AWS CDK, any of the language SDKs, even CloudFormation and CloudFormation, use these APIs either directly or indirectly. They define absolutely and for each service the service's things and the stuff you can do to those things.&lt;/p&gt;
&lt;p&gt;The "Getting Started" documentation sections are almost story-like - they are step-by-step guides with a beginning, middle, and an end, and they're not even choose-your-own-adventure - they lead us to one end state.&lt;/p&gt;
&lt;p&gt;But once we learn how to quickly see the parts of a service and their possible connections, we can start to address interesting problems such as "What broad mitigations should my organization put in place for threats relating to Amazon Redshift?," a question that could never be answered from the top-down documentation unless a specific docs page covered it (which is possible!). Sure, months or years of experience building and operating Redshift clusters could help you answer this question quickly, but not everyone answering tough questions about an AWS service for their organization has the luxury (curse?) of having used that service for a long time already.&lt;/p&gt;
&lt;h2&gt;The process&lt;/h2&gt;
&lt;p&gt;Build a mental graph with the service's objects as nodes and its actions as connections between those nodes. Finally, fill in any gaps in your understanding or search for the answers to specific questions using the prose documentation (maybe even Getting Started!).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Focus on the API layer first. Start learning from the most fundamental parts of the service, meaning take a bottom-up approach, not a top down one. Every service has an API Reference section &lt;a href="https://docs.aws.amazon.com/servicecatalog/latest/dg/API_Reference.html"&gt;like this one for Service Catalog&lt;/a&gt;. If you can't find it, just google "aws [Service Name] api reference."&lt;/li&gt;
&lt;li&gt;Create nodes in your mental graph as you read through the "Actions" section. Nearly every service has &lt;code&gt;Create&amp;lt;SomeObjectName&amp;gt;&lt;/code&gt; actions. Read these first to get an idea of what "things" the service involves and what kinds of attributes each of these things has. The request and response bodies will list these.&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html"&gt;CloudFormation Resource and Property Types docs&lt;/a&gt; serve a different purpose than the service's API docs, but usually they provide a quicker overview of the types of objects in a service, since part of the CloudFormation team's job is to translate each service's objects into CloudFormation resource types, so a lot of the work of identifying things in a service is already done for you. The downsides, and the reasons I don't recommend this immediately, are that CloudFormation doesn't support every service and sometimes the strange mapping between services' APIs and CloudFormation can be more confusing than helpful. But check out this very helpful list of the &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-cluster.html"&gt;CloudFormation resource types for RedShift&lt;/a&gt;. These list the types of objects in RedShift, and you don't even have to dig through the API docs!: &lt;img alt="Amazon RedShift resource types listing from the CloudFormation documentation" src="images/cloudformation-redshift-resource-types.png" /&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;After you have a solid idea of what things you can do stuff with in the service, fill in the connections between the service's nodes with the relationships between them as described by the actions' documentation. For instance, if the request body for &lt;code&gt;CreateDomain&lt;/code&gt; has a parameter called &lt;code&gt;SubnetIds&lt;/code&gt; and it's &lt;code&gt;Required: Yes&lt;/code&gt;, a &lt;code&gt;Domain&lt;/code&gt; somehow &lt;em&gt;has&lt;/em&gt; an EC2 &lt;code&gt;Subnet&lt;/code&gt;. This is an inter-service connection, but the principle still holds.&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Stop and read the paragraphs at the beginning of each action's docs. These are some of the most information-packed and direct docs sections in all of AWS.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Begin asking "How would I do x?" Try to make a fairly rich scenario. You want it to describe an action you could actually take first thing if you started using the service.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;An example using Redshift&lt;/h2&gt;
&lt;p&gt;You can learn things just by reading the action list from the documentation. Take the &lt;a href="https://docs.aws.amazon.com/redshift/latest/APIReference/API_Operations.html"&gt;list of actions for Redshift&lt;/a&gt;, for instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AcceptReservedNodeExchange&lt;/li&gt;
&lt;li&gt;AddPartner&lt;/li&gt;
&lt;li&gt;AssociateDataShareConsumer&lt;/li&gt;
&lt;li&gt;AuthorizeClusterSecurityGroupIngress&lt;/li&gt;
&lt;li&gt;AuthorizeDataShare&lt;/li&gt;
&lt;li&gt;AuthorizeEndpointAccess&lt;/li&gt;
&lt;li&gt;AuthorizeSnapshotAccess&lt;/li&gt;
&lt;li&gt;BatchDeleteClusterSnapshots&lt;/li&gt;
&lt;li&gt;BatchModifyClusterSnapshots&lt;/li&gt;
&lt;li&gt;CancelResize&lt;/li&gt;
&lt;li&gt;CopyClusterSnapshot&lt;/li&gt;
&lt;li&gt;CreateAuthenticationProfile&lt;/li&gt;
&lt;li&gt;CreateCluster&lt;/li&gt;
&lt;li&gt;CreateClusterParameterGroup&lt;/li&gt;
&lt;li&gt;CreateClusterSecurityGroup&lt;/li&gt;
&lt;li&gt;CreateClusterSnapshot&lt;/li&gt;
&lt;li&gt;CreateClusterSubnetGroup&lt;/li&gt;
&lt;li&gt;CreateEndpointAccess&lt;/li&gt;
&lt;li&gt;CreateEventSubscription&lt;/li&gt;
&lt;li&gt;CreateHsmClientCertificate&lt;/li&gt;
&lt;li&gt;CreateHsmConfiguration&lt;/li&gt;
&lt;li&gt;CreateScheduledAction&lt;/li&gt;
&lt;li&gt;CreateSnapshotCopyGrant&lt;/li&gt;
&lt;li&gt;CreateSnapshotSchedule&lt;/li&gt;
&lt;li&gt;CreateTags&lt;/li&gt;
&lt;li&gt;CreateUsageLimit&lt;/li&gt;
&lt;li&gt;DeauthorizeDataShare&lt;/li&gt;
&lt;li&gt;DeleteAuthenticationProfile&lt;/li&gt;
&lt;li&gt;DeleteCluster&lt;/li&gt;
&lt;li&gt;DeleteClusterParameterGroup&lt;/li&gt;
&lt;li&gt;DeleteClusterSecurityGroup&lt;/li&gt;
&lt;li&gt;DeleteClusterSnapshot&lt;/li&gt;
&lt;li&gt;DeleteClusterSubnetGroup&lt;/li&gt;
&lt;li&gt;DeleteEndpointAccess&lt;/li&gt;
&lt;li&gt;DeleteEventSubscription&lt;/li&gt;
&lt;li&gt;DeleteHsmClientCertificate&lt;/li&gt;
&lt;li&gt;DeleteHsmConfiguration&lt;/li&gt;
&lt;li&gt;DeletePartner&lt;/li&gt;
&lt;li&gt;DeleteScheduledAction&lt;/li&gt;
&lt;li&gt;DeleteSnapshotCopyGrant&lt;/li&gt;
&lt;li&gt;DeleteSnapshotSchedule&lt;/li&gt;
&lt;li&gt;DeleteTags&lt;/li&gt;
&lt;li&gt;DeleteUsageLimit&lt;/li&gt;
&lt;li&gt;DescribeAccountAttributes&lt;/li&gt;
&lt;li&gt;DescribeAuthenticationProfiles&lt;/li&gt;
&lt;li&gt;DescribeClusterDbRevisions&lt;/li&gt;
&lt;li&gt;DescribeClusterParameterGroups&lt;/li&gt;
&lt;li&gt;DescribeClusterParameters&lt;/li&gt;
&lt;li&gt;DescribeClusters&lt;/li&gt;
&lt;li&gt;DescribeClusterSecurityGroups&lt;/li&gt;
&lt;li&gt;DescribeClusterSnapshots&lt;/li&gt;
&lt;li&gt;DescribeClusterSubnetGroups&lt;/li&gt;
&lt;li&gt;DescribeClusterTracks&lt;/li&gt;
&lt;li&gt;DescribeClusterVersions&lt;/li&gt;
&lt;li&gt;DescribeDataShares&lt;/li&gt;
&lt;li&gt;DescribeDataSharesForConsumer&lt;/li&gt;
&lt;li&gt;DescribeDataSharesForProducer&lt;/li&gt;
&lt;li&gt;DescribeDefaultClusterParameters&lt;/li&gt;
&lt;li&gt;DescribeEndpointAccess&lt;/li&gt;
&lt;li&gt;DescribeEndpointAuthorization&lt;/li&gt;
&lt;li&gt;DescribeEventCategories&lt;/li&gt;
&lt;li&gt;DescribeEvents&lt;/li&gt;
&lt;li&gt;DescribeEventSubscriptions&lt;/li&gt;
&lt;li&gt;DescribeHsmClientCertificates&lt;/li&gt;
&lt;li&gt;DescribeHsmConfigurations&lt;/li&gt;
&lt;li&gt;DescribeLoggingStatus&lt;/li&gt;
&lt;li&gt;DescribeNodeConfigurationOptions&lt;/li&gt;
&lt;li&gt;DescribeOrderableClusterOptions&lt;/li&gt;
&lt;li&gt;DescribePartners&lt;/li&gt;
&lt;li&gt;DescribeReservedNodeExchangeStatus&lt;/li&gt;
&lt;li&gt;DescribeReservedNodeOfferings&lt;/li&gt;
&lt;li&gt;DescribeReservedNodes&lt;/li&gt;
&lt;li&gt;DescribeResize&lt;/li&gt;
&lt;li&gt;DescribeScheduledActions&lt;/li&gt;
&lt;li&gt;DescribeSnapshotCopyGrants&lt;/li&gt;
&lt;li&gt;DescribeSnapshotSchedules&lt;/li&gt;
&lt;li&gt;DescribeStorage&lt;/li&gt;
&lt;li&gt;DescribeTableRestoreStatus&lt;/li&gt;
&lt;li&gt;DescribeTags&lt;/li&gt;
&lt;li&gt;DescribeUsageLimits&lt;/li&gt;
&lt;li&gt;DisableLogging&lt;/li&gt;
&lt;li&gt;DisableSnapshotCopy&lt;/li&gt;
&lt;li&gt;DisassociateDataShareConsumer&lt;/li&gt;
&lt;li&gt;EnableLogging&lt;/li&gt;
&lt;li&gt;EnableSnapshotCopy&lt;/li&gt;
&lt;li&gt;GetClusterCredentials&lt;/li&gt;
&lt;li&gt;GetReservedNodeExchangeConfigurationOptions&lt;/li&gt;
&lt;li&gt;GetReservedNodeExchangeOfferings&lt;/li&gt;
&lt;li&gt;ModifyAquaConfiguration&lt;/li&gt;
&lt;li&gt;ModifyAuthenticationProfile&lt;/li&gt;
&lt;li&gt;ModifyCluster&lt;/li&gt;
&lt;li&gt;ModifyClusterDbRevision&lt;/li&gt;
&lt;li&gt;ModifyClusterIamRoles&lt;/li&gt;
&lt;li&gt;ModifyClusterMaintenance&lt;/li&gt;
&lt;li&gt;ModifyClusterParameterGroup&lt;/li&gt;
&lt;li&gt;ModifyClusterSnapshot&lt;/li&gt;
&lt;li&gt;ModifyClusterSnapshotSchedule&lt;/li&gt;
&lt;li&gt;ModifyClusterSubnetGroup&lt;/li&gt;
&lt;li&gt;ModifyEndpointAccess&lt;/li&gt;
&lt;li&gt;ModifyEventSubscription&lt;/li&gt;
&lt;li&gt;ModifyScheduledAction&lt;/li&gt;
&lt;li&gt;ModifySnapshotCopyRetentionPeriod&lt;/li&gt;
&lt;li&gt;ModifySnapshotSchedule&lt;/li&gt;
&lt;li&gt;ModifyUsageLimit&lt;/li&gt;
&lt;li&gt;PauseCluster&lt;/li&gt;
&lt;li&gt;PurchaseReservedNodeOffering&lt;/li&gt;
&lt;li&gt;RebootCluster&lt;/li&gt;
&lt;li&gt;RejectDataShare&lt;/li&gt;
&lt;li&gt;ResetClusterParameterGroup&lt;/li&gt;
&lt;li&gt;ResizeCluster&lt;/li&gt;
&lt;li&gt;RestoreFromClusterSnapshot&lt;/li&gt;
&lt;li&gt;RestoreTableFromClusterSnapshot&lt;/li&gt;
&lt;li&gt;ResumeCluster&lt;/li&gt;
&lt;li&gt;RevokeClusterSecurityGroupIngress&lt;/li&gt;
&lt;li&gt;RevokeEndpointAccess&lt;/li&gt;
&lt;li&gt;RevokeSnapshotAccess&lt;/li&gt;
&lt;li&gt;RotateEncryptionKey&lt;/li&gt;
&lt;li&gt;UpdatePartnerStatus&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From this list, I can quickly see that, even though the documentation says Redshift is made of Clusters and Nodes, you don't directly manage Nodes in Redshift. Applying a bit of what I know from experience in looking at AWS API documentation, I immediately realize there are no "CreateNode," "UpdateNode," or "DeleteNode" actions. I can surmise that Clusters will manage Nodes for me. Looking at the documentation for the CreateCluster endpoint and the DescribeNodeConfiguration endpoint, I see that this is indeed true and I will merely put parameters on the Cluster, and then it will manage the Nodes for me to ensure the state matches the parameters I've stated. I also see that there is no manual way to provision storage capacity via the API, though I can check on usage with "DescribeStorage." I also note that clusters can apparently be paused, rebooting, snapshotted, resized, shared through something about partnership, configured with logging, and more. I see from the CreateCluster documentation that Redshift clusters are placed in some VPC of my choosing, that I could make the very bad mistake of making my cluster publicly accessible with (apparently) one option, and more!&lt;/p&gt;
&lt;p&gt;Next, I begin poking around in the documentation for the "Create&lt;ObjectName&gt;" actions for each major object. Often these map almost exactly to the CloudFormation Objects (which is part of what makes starting with CloudFormation docs a good idea). Try to start with the most important Object first. You may not know this yet, but you can make a good guess and just keep going if you get it wrong. For Redshift, I think the most important object would probably be the Cluster, then maybe Parameter Groups, then probably Event Subscriptions and Scheduled Actions, and finally the Security Groups, Security Group Ingresses, and Endpoints, since I think I know what those do, but I'll still read them. So, I would first read the docs for "CreateCluster," then "CreateEventSubscription," and so on.&lt;/p&gt;
&lt;p&gt;Be sure to note important identifiers re-used throughout the API operations for each object type. For instance, in Redshift, the one that immediately jumps out at me is the &lt;a href="https://docs.aws.amazon.com/redshift/latest/APIReference/API_CreateCluster.html#API_CreateCluster_RequestParameters"&gt;Cluster Identifier&lt;/a&gt;: "A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console." This is right at the top of the CreateCluster documentation, and it will probably end up being the name that we will need most often when we are referring to specific Redshift resources -- the documentation even points this out when it talks about later operations. &lt;/p&gt;
&lt;p&gt;Knowing which identifiers exist, are required by API calls that reference existing resources, and which are easily accessible for different Objects is crucial. One of my favorite examples is EC2 Instances. EC2 is often a person's first exposure to AWS, since it's the "launch a computer in the cloud" service. They use the AWS EC2 Console Wizard and get prompted for an Instance Name. But in reality, at the API level, the Name is just a tag that is applied via the EC2 API action CreateTags, so it's not a terribly useful identifier for vanilla EC2 usage.&lt;/p&gt;
&lt;p&gt;Once you have a graph sketched out, try asking questions that fill in the gaps. For instance, "How does storage capacity work with Redshift? From EC2, I am used to compute capacity being managed by instance type and storage capacity being done in EBS or (less frequently) instance volumes." The answer is not immediately obvious via the API, so it causes me to search for the answer, which doesn't seem to be explicitly stated in the Redshift documentation. Ultimately, I find by searching "Redshift storage types" that &lt;a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-node-type-info"&gt;node types in clusters determine the storage capacity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before actually using the service, we can ask scenario-based questions, such as "How can I query my database?" There are no obvious client or connection operations available (the &lt;code&gt;Endpoint&lt;/code&gt; operations relate to VPC endpoints per the API docs). By searching "How do I query a Redshift database?" I get the following, straightforward page &lt;a href="https://docs.aws.amazon.com/redshift/latest/mgmt/query-databases.html"&gt;"Querying a database"&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;We can't learn everything from the API actions, but we can get a scaffold from which to ask better questions and start filling in the gaps with experience and prose documentation. I think this method is useful for getting up to medium speed with a service in just a couple of hours. It gives a loosely structured impression of what a service does that can then be filled in by experimentation and other reading. Beyond this initial introduction, I find that (recent) blog posts about people's first experiences trying to launch a service can be really helpful since they make daunting services more accessible and often include a little comiseration, which can be invigorating.&lt;/p&gt;</content><category term="AWS"></category><category term="aws"></category><category term="learning"></category><category term="software development"></category></entry><entry><title>Using NVM (Node Version Manager) with Xonsh shell</title><link href="https://www.dinogalactic.com/using-nvm-node-version-manager-with-xonsh-shell.html" rel="alternate"></link><published>2022-06-02T06:00:00-04:00</published><updated>2022-06-02T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2022-06-02:/using-nvm-node-version-manager-with-xonsh-shell.html</id><summary type="html">&lt;p&gt;To use &lt;a href=""&gt;nvm (Node Version Manager)&lt;/a&gt; with &lt;a href="https://xon.sh/"&gt;Xonsh shell&lt;/a&gt;, place the following in your &lt;code&gt;.xonshrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #0099FF; font-style: italic"&gt;# This ensures a stable symlink is always present for the currently&lt;/span&gt;
&lt;span style="color: #0099FF; font-style: italic"&gt;# activated Node version&lt;/span&gt;
&lt;span style="color: #003333"&gt;$NVM_SYMLINK_CURRENT&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; 
&lt;span style="color: #003333"&gt;$NVM_DIR&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;f&amp;quot;&lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;HOME&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;/.nvm&amp;quot;&lt;/span&gt;
source&lt;span style="color: #555555"&gt;-&lt;/span&gt;bash &lt;span style="color: #CC3300"&gt;f&amp;quot;&lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;NVM_DIR&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;/nvm.sh&amp;quot;&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# This loads nvm&lt;/span&gt;
&lt;span style="color: #0099FF; font-style: italic"&gt;# This ensures …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;To use &lt;a href=""&gt;nvm (Node Version Manager)&lt;/a&gt; with &lt;a href="https://xon.sh/"&gt;Xonsh shell&lt;/a&gt;, place the following in your &lt;code&gt;.xonshrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #0099FF; font-style: italic"&gt;# This ensures a stable symlink is always present for the currently&lt;/span&gt;
&lt;span style="color: #0099FF; font-style: italic"&gt;# activated Node version&lt;/span&gt;
&lt;span style="color: #003333"&gt;$NVM_SYMLINK_CURRENT&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; 
&lt;span style="color: #003333"&gt;$NVM_DIR&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;f&amp;quot;&lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;HOME&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;/.nvm&amp;quot;&lt;/span&gt;
source&lt;span style="color: #555555"&gt;-&lt;/span&gt;bash &lt;span style="color: #CC3300"&gt;f&amp;quot;&lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;NVM_DIR&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;/nvm.sh&amp;quot;&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# This loads nvm&lt;/span&gt;
&lt;span style="color: #0099FF; font-style: italic"&gt;# This ensures the current node is always used&lt;/span&gt;
&lt;span style="color: #003333"&gt;$PATH&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;insert(&lt;span style="color: #FF6600"&gt;0&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;f&amp;quot;&lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;NVM_DIR&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;/current/bin&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="xonshiousness"></category><category term="xonsh"></category><category term="python"></category><category term="software development"></category><category term="shell"></category></entry><entry><title>Using Common Fate's Granted CLI tool for AWS profiles with Xonsh shell</title><link href="https://www.dinogalactic.com/using-common-fates-granted-cli-tool-for-aws-profiles-with-xonsh-shell.html" rel="alternate"></link><published>2022-05-16T06:00:00-04:00</published><updated>2022-05-16T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2022-05-16:/using-common-fates-granted-cli-tool-for-aws-profiles-with-xonsh-shell.html</id><summary type="html">&lt;p&gt;Using &lt;a href="https://github.com/common-fate/granted"&gt;Common Fate's excellent Granted CLI tool for AWS profiles&lt;/a&gt; with &lt;a href="https://xon.sh/"&gt;Xonsh shell&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #0099FF; font-style: italic"&gt;#!/usr/bin/env xonsh&lt;/span&gt;

&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;_assume&lt;/span&gt;(args):
    AWS_VARIABLE_NAMES &lt;span style="color: #555555"&gt;=&lt;/span&gt; [
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_ACCESS_KEY_ID&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_SECRET_ACCESS_KEY&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_SESSION_TOKEN&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_PROFILE&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_REGION&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_SESSION_EXPIRATION&amp;quot;&lt;/span&gt;
    ]

    &lt;span style="color: #003333"&gt;$GRANTED_ALIAS_CONFIGURED&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;

    &lt;span style="color: #003333"&gt;$GRANTED_OUTPUT&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;(&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;assumego&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;@&lt;/span&gt;(args))

    granted …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Using &lt;a href="https://github.com/common-fate/granted"&gt;Common Fate's excellent Granted CLI tool for AWS profiles&lt;/a&gt; with &lt;a href="https://xon.sh/"&gt;Xonsh shell&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #0099FF; font-style: italic"&gt;#!/usr/bin/env xonsh&lt;/span&gt;

&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;_assume&lt;/span&gt;(args):
    AWS_VARIABLE_NAMES &lt;span style="color: #555555"&gt;=&lt;/span&gt; [
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_ACCESS_KEY_ID&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_SECRET_ACCESS_KEY&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_SESSION_TOKEN&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_PROFILE&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_REGION&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_SESSION_EXPIRATION&amp;quot;&lt;/span&gt;
    ]

    &lt;span style="color: #003333"&gt;$GRANTED_ALIAS_CONFIGURED&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;

    &lt;span style="color: #003333"&gt;$GRANTED_OUTPUT&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;(&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;assumego&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;@&lt;/span&gt;(args))

    granted_flag, &lt;span style="color: #555555"&gt;*&lt;/span&gt;aws_variable_values &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #003333"&gt;$GRANTED_OUTPUT&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;strip(&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;)&lt;span style="color: #555555"&gt;.&lt;/span&gt;split(&lt;span style="color: #CC3300"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)

    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; granted_flag &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;GrantedOutput&amp;quot;&lt;/span&gt;:
        &lt;span style="color: #0099FF; font-style: italic"&gt;# Remove the first line of output&lt;/span&gt;
        granted_output &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;join(&lt;span style="color: #003333"&gt;$GRANTED_OUTPUT&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;split(&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;)[&lt;span style="color: #FF6600"&gt;1&lt;/span&gt;:])
        &lt;span style="color: #336666"&gt;print&lt;/span&gt;(granted_output)
        exit()

    &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; aws_variable_name, aws_variable_value &lt;span style="color: #000000; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #336666"&gt;zip&lt;/span&gt;(AWS_VARIABLE_NAMES, aws_variable_values):
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; granted_flag &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;GrantedDesume&amp;quot;&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;or&lt;/span&gt; aws_variable_value &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;None&amp;quot;&lt;/span&gt;:
            &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;{&lt;span style="color: #555555"&gt;...&lt;/span&gt;}&lt;span style="color: #555555"&gt;.&lt;/span&gt;pop(aws_variable_name, &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;)
            &lt;span style="color: #006699; font-weight: bold"&gt;continue&lt;/span&gt;
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; granted_flag &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;GrantedAssume&amp;quot;&lt;/span&gt;:
            &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;{&lt;span style="color: #555555"&gt;...&lt;/span&gt;}[aws_variable_name] &lt;span style="color: #555555"&gt;=&lt;/span&gt; aws_variable_value

    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; granted_flag &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;GrantedOutput&amp;quot;&lt;/span&gt;:
        &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; aws_variable_name, aws_variable_value &lt;span style="color: #000000; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #336666"&gt;zip&lt;/span&gt;(AWS_VARIABLE_NAMES, aws_variable_values):
            &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; aws_variable_value &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;None&amp;quot;&lt;/span&gt;:
                &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;{&lt;span style="color: #555555"&gt;...&lt;/span&gt;}&lt;span style="color: #555555"&gt;.&lt;/span&gt;pop(aws_variable_name, &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;)
                &lt;span style="color: #006699; font-weight: bold"&gt;continue&lt;/span&gt;
            &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;{&lt;span style="color: #555555"&gt;...&lt;/span&gt;}[aws_variable_name] &lt;span style="color: #555555"&gt;=&lt;/span&gt; aws_variable_value

    &lt;span style="color: #006699; font-weight: bold"&gt;del&lt;/span&gt; &lt;span style="color: #003333"&gt;$GRANTED_ALIAS_CONFIGURED&lt;/span&gt;

aliases[&lt;span style="color: #CC3300"&gt;&amp;#39;assume&amp;#39;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; _assume
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Place in your &lt;code&gt;xontrib&lt;/code&gt; directory. And, in &lt;code&gt;.xonshrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xontrib load assume
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="xonshiousness"></category><category term="xonsh"></category><category term="python"></category><category term="aws"></category></entry><entry><title>You should use boto3 paginators</title><link href="https://www.dinogalactic.com/you-should-use-boto3-paginators.html" rel="alternate"></link><published>2021-03-04T06:00:00-05:00</published><updated>2021-03-04T06:00:00-05:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2021-03-04:/you-should-use-boto3-paginators.html</id><summary type="html">&lt;p&gt;I wanted to point out that you may want to refactor your boto code, depending
on how much time you have, to use a paginator rather than handling the
nextToken from the AWS API yourself. This will return an API response on each
iteration over the paginator.&lt;/p&gt;
&lt;p&gt;Here's an example …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I wanted to point out that you may want to refactor your boto code, depending
on how much time you have, to use a paginator rather than handling the
nextToken from the AWS API yourself. This will return an API response on each
iteration over the paginator.&lt;/p&gt;
&lt;p&gt;Here's an example run against my personal AWS account, which only has one page of CFN stacks unfortunately:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [&lt;span style="color: #FF6600"&gt;19&lt;/span&gt;]: &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;boto3&lt;/span&gt;                                                                                                                                                                         
In [&lt;span style="color: #FF6600"&gt;20&lt;/span&gt;]: boto3&lt;span style="color: #555555"&gt;.&lt;/span&gt;client(&lt;span style="color: #CC3300"&gt;&amp;#39;cloudformation&amp;#39;&lt;/span&gt;)                                                                                                                                                       
Out[&lt;span style="color: #FF6600"&gt;20&lt;/span&gt;]: &lt;span style="color: #555555"&gt;&amp;lt;&lt;/span&gt;botocore&lt;span style="color: #555555"&gt;.&lt;/span&gt;client&lt;span style="color: #555555"&gt;.&lt;/span&gt;CloudFormation at &lt;span style="color: #FF6600"&gt;0x7f9abc2fbaf0&lt;/span&gt;&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt;
In [&lt;span style="color: #FF6600"&gt;21&lt;/span&gt;]: cfn_client &lt;span style="color: #555555"&gt;=&lt;/span&gt; boto3&lt;span style="color: #555555"&gt;.&lt;/span&gt;client(&lt;span style="color: #CC3300"&gt;&amp;#39;cloudformation&amp;#39;&lt;/span&gt;)                                                                                                                                          
In [&lt;span style="color: #FF6600"&gt;23&lt;/span&gt;]: cfn_client&lt;span style="color: #555555"&gt;.&lt;/span&gt;can_paginate(&lt;span style="color: #CC3300"&gt;&amp;#39;describe_stacks&amp;#39;&lt;/span&gt;) &lt;span style="color: #0099FF; font-style: italic"&gt;# Figure out if you can paginate your desired cfn_client command before using this technique                                                                                                                                            &lt;/span&gt;
Out[&lt;span style="color: #FF6600"&gt;23&lt;/span&gt;]: &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;
In [&lt;span style="color: #FF6600"&gt;24&lt;/span&gt;]: paginator &lt;span style="color: #555555"&gt;=&lt;/span&gt; cfn_client&lt;span style="color: #555555"&gt;.&lt;/span&gt;get_paginator(&lt;span style="color: #CC3300"&gt;&amp;#39;describe_stacks&amp;#39;&lt;/span&gt;)                                                                                                                              
In [&lt;span style="color: #FF6600"&gt;29&lt;/span&gt;]: &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; resp &lt;span style="color: #000000; font-weight: bold"&gt;in&lt;/span&gt; paginator&lt;span style="color: #555555"&gt;.&lt;/span&gt;paginate(): &lt;span style="color: #0099FF; font-style: italic"&gt;# You can also pass in any keyword args that cfn_client.describe_stacks() would take here, like paginator.paginate(StackName=&amp;#39;blahblahblah&amp;#39;) &lt;/span&gt;
    &lt;span style="color: #555555"&gt;...&lt;/span&gt;:     &lt;span style="color: #336666"&gt;print&lt;/span&gt;([stack[&lt;span style="color: #CC3300"&gt;&amp;#39;StackName&amp;#39;&lt;/span&gt;] &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; stack &lt;span style="color: #000000; font-weight: bold"&gt;in&lt;/span&gt; resp[&lt;span style="color: #CC3300"&gt;&amp;#39;Stacks&amp;#39;&lt;/span&gt;]]) 
    &lt;span style="color: #555555"&gt;...&lt;/span&gt;: 
[&lt;span style="color: #CC3300"&gt;&amp;#39;chickenpi-app-epp&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;gg-service-role&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;chickenpi-pl-epp&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;cfn-leaprog-trail&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;aws-cloud9-Python-Development-Environment-f5f7b7b71b124224a4472c8768327a97&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;aws-sam-cli-managed-default&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are the boto3 &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/paginators.html"&gt;pagination docs&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="aws"></category></entry><entry><title>[Pic] Early potatoes 2020</title><link href="https://www.dinogalactic.com/pic-early-potatoes-2020.html" rel="alternate"></link><published>2020-07-18T06:00:00-04:00</published><updated>2020-07-18T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2020-07-18:/pic-early-potatoes-2020.html</id><content type="html">&lt;p&gt;&lt;img alt="Early potatoes in my hand" src="https://www.dinogalactic.com/images/early_potatoes.jpg" /&gt;&lt;/p&gt;</content><category term="misc"></category><category term="gardening"></category></entry><entry><title>Powering a Ham Radio with a Laptop Battery</title><link href="https://www.dinogalactic.com/powering-a-ham-radio-with-a-laptop-battery.html" rel="alternate"></link><published>2020-05-05T22:14:00-04:00</published><updated>2020-05-05T22:14:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2020-05-05:/powering-a-ham-radio-with-a-laptop-battery.html</id><summary type="html">&lt;p&gt;I recently had &lt;a href="https://www.dinogalactic.com/debugging-an-inteference-problem-on-my-ubitx-v6.html"&gt;some bad luck with a cheap 12V power supply&lt;/a&gt; with my &lt;a href="https://www.hfsignals.com/index.php/ubitx-v6/"&gt;uBitx v6&lt;/a&gt;. In short, the supply was extremely noisy across all the RF bands I wanted to use. I had said in that other post that I would buy a better power supply suitable for RF …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently had &lt;a href="https://www.dinogalactic.com/debugging-an-inteference-problem-on-my-ubitx-v6.html"&gt;some bad luck with a cheap 12V power supply&lt;/a&gt; with my &lt;a href="https://www.hfsignals.com/index.php/ubitx-v6/"&gt;uBitx v6&lt;/a&gt;. In short, the supply was extremely noisy across all the RF bands I wanted to use. I had said in that other post that I would buy a better power supply suitable for RF, but I don't believe you should do that when you can hack something together using parts you already have, especially when just starting out.&lt;/p&gt;
&lt;p&gt;I poached the working Lithium Ion battery from the very Dell Lattitude E5540 laptop that I'm writing this on, and everything is working perfectly.&lt;/p&gt;
&lt;p&gt;Here is how I did that.&lt;/p&gt;
&lt;h2&gt;Find a decent approximation of the Laptop's pinout&lt;/h2&gt;
&lt;p&gt;On &lt;a href="https://www.laptop-junction.com/toast/content/inside-dell-d610-battery-connector-pinout-and-signal-timing"&gt;this page&lt;/a&gt; I found the basic info I needed to hook up to my Laptop battery.&lt;/p&gt;
&lt;p&gt;Crucially, I found this info that would work if my battery pinout wasn't too different from the one in the picture. Mine had 9 pins, just like the one on that site, so chances were decent the pinout was the same or similar.&lt;/p&gt;
&lt;p&gt;The 3 most important facts were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the left and rightmost two pairs of pins need to be shorted as two pairs (one short on each side, so the four pins effectively become two wires)&lt;/li&gt;
&lt;li&gt;one of the pairs is ground (-), and the other pair is (+)&lt;/li&gt;
&lt;li&gt;one of the pins in the middle needs to be shorted to ground &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Wire the battery up to a breadboard and onto the radio&lt;/h2&gt;
&lt;p&gt;I just had to figure out which pin on my battery had to be shorted to ground to turn the battery on, since I got no voltage by simple shorting the pairs of pins on the (+) and (-) sides. Finally, I realized from the above site's pin list that my pin 6 might be something called &lt;code&gt;SYSPRES&lt;/code&gt;, probably meaning &lt;code&gt;SYSTEM PRESENT&lt;/code&gt;, or in human terms "This battery is not being shorted accidentally in someone's purse by their earrings - it's plugged into a laptop." Once I connected pin 6 to ground, I got a little over 12V out between (+) and (-). For safety, I added a toggle switch between pin 6 and ground.&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt="Annotated drawing of the battery wireup job I did." src="https://www.dinogalactic.com/images/annotated_dell_laptop_battery.jpg" /&gt;
  &lt;figcaption&gt;The radio turned on with zero noise - no loud helicopter blade sounds.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Turn it on&lt;/h2&gt;
&lt;figure&gt;
&lt;img alt="My first HF station, a uBitx v6, powered by the battery power source I hacked together." src="https://www.dinogalactic.com/images/first_hf_station.jpg" /&gt;
  &lt;figcaption&gt;Here it is, turned on. Yes, right now my uBitx is in a cardboard box. Stay tuned for a future project where it might live in a nice wooden box.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Profit&lt;/h2&gt;
&lt;p&gt;I will keep going with this setup as long as I can. It's working, is noiseless, is free for me, and since I don't take my laptop anywhere really, is not inconvenient yet.&lt;/p&gt;</content><category term="misc"></category><category term="ubitx"></category><category term="amateur radio"></category><category term="ham radio"></category></entry><entry><title>Updated garden layout for 2020</title><link href="https://www.dinogalactic.com/updated-garden-layout-for-2020.html" rel="alternate"></link><published>2020-04-01T06:00:00-04:00</published><updated>2020-04-01T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2020-04-01:/updated-garden-layout-for-2020.html</id><content type="html">&lt;p&gt;&lt;img alt="Updated 2020 garden layout" src="https://www.dinogalactic.com/images/garden_layout_updated.png" /&gt;&lt;/p&gt;</content><category term="misc"></category><category term="gardening"></category></entry><entry><title>Debugging an Inteference Problem on My uBitx v6</title><link href="https://www.dinogalactic.com/debugging-an-inteference-problem-on-my-ubitx-v6.html" rel="alternate"></link><published>2020-03-22T06:00:00-04:00</published><updated>2020-03-22T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2020-03-22:/debugging-an-inteference-problem-on-my-ubitx-v6.html</id><summary type="html">&lt;p&gt;I got my uBitx v6 recently from
&lt;a href="https://www.hfsignals.com/index.php/ubitx-v6/"&gt;hfsignals&lt;/a&gt; and hooked it up to
a 20m/40m trapped dipole from &lt;a href="http://qrpkits.com/dualbanddipole.html"&gt;Pacific
Antenna&lt;/a&gt;, mounted about 30 ft off the
ground as an inverted vee.&lt;/p&gt;
&lt;p&gt;So far I've made no contacts and been able to hear only one half of an SSB
conversation …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got my uBitx v6 recently from
&lt;a href="https://www.hfsignals.com/index.php/ubitx-v6/"&gt;hfsignals&lt;/a&gt; and hooked it up to
a 20m/40m trapped dipole from &lt;a href="http://qrpkits.com/dualbanddipole.html"&gt;Pacific
Antenna&lt;/a&gt;, mounted about 30 ft off the
ground as an inverted vee.&lt;/p&gt;
&lt;p&gt;So far I've made no contacts and been able to hear only one half of an SSB
conversation that sounded like it was coming from somewhere near me in
Virginia. I've been able to hear some digital modes and very small bursts (a
couple of letters) of CW on occasion.&lt;/p&gt;
&lt;p&gt;Unfortunately everywhere I tune on my radio sounds like intense static garbage
- a problem I'm assuming for now is QRM that can be removed. In other words, I
don't think it's coming from inside the radio. (I have a couple of reasons for
this - mainly that when I unplug the antenna or put a large resistive load on
the antenna connector, the static is gone.)&lt;/p&gt;
&lt;h2&gt;Symptoms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Manifests as a crackly static&lt;/li&gt;
&lt;li&gt;Occurs across all bands&lt;/li&gt;
&lt;li&gt;Has so far only allowed geographically close reception (possibly indicating
  desensitization of signals that aren't extremely strong, or maybe my antenna
  is accidentally an NVIS antenna?)&lt;/li&gt;
&lt;li&gt;Gets much, much more aggressive (louder) as I go down in frequency&lt;/li&gt;
&lt;li&gt;Does not improve when all devices in the house are off except the radio's
  switching 12V power supply - I haven't yet tried on batteries alone&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Possible causes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RFI from the 12V switching power supply I got on
  &lt;a href="https://www.amazon.com/gp/product/B01461MOGQ/"&gt;Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RFI from a neighbor's electronic device(s)&lt;/li&gt;
&lt;li&gt;Power line interference&lt;/li&gt;
&lt;li&gt;Some form of coupling or common mode current (I'm way out of my depth here in
  terms of understanding, but my station is ungrounded and I am not using a
  balun on my inverted vee)&lt;/li&gt;
&lt;li&gt;Some problem caused by an incorrectly installed BNC connector on my coax
  cable. I feel pretty OK with my stripping and crimping job, but these were a
  couple of the first BNC connectors I ever crimped onto the end of a coax
  cable, so maybe I caused some problem?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Video of interference&lt;/h2&gt;
&lt;p&gt;Below is a video with audio of the interference. I switch across the bands to
show that the interference is extremely wide banded.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=dR2Hp0X5kww"&gt;https://www.youtube.com/watch?v=dR2Hp0X5kww&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Interesting detail&lt;/h2&gt;
&lt;p&gt;If I connect an alligator clip from a 160 foot piece of RG8X cable I have lying
in a coil nearby, the static gets much more intense. Not sure if this could be
a clue to what the problem is, but if so, I have no idea how.&lt;/p&gt;
&lt;h2&gt;How I Fixed It&lt;/h2&gt;
&lt;p&gt;I didn't yet, but I did figure out what was causing the problem. I realized
that the last step to rule out my own house's devices from the list of possible
causes was to run the ubitx on battery power with all my home power turned off.
I didn't have a 12V battery or battery pack, so I wired one up using 8 alkaline AA batteries I had lying around, and voila - no
static whatsoever. Interestingly after play with the radio for a while, I did
notice that the cheap LED grow lights I use for my tomatoes and peppers create
strong interference, but they're close to the radio and easy to turn off
temporarily.&lt;/p&gt;
&lt;p&gt;After eliminating the RFI, I immediately heard the Russian station &lt;a href="https://www.qrz.com/db/R2OA"&gt;R2OA&lt;/a&gt; coming through on 14.203 MHz SSB during the &lt;a href="http://www.rdxc.org/asp/pages/rulesg.asp"&gt;Russian DX contest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, some AAs from the store are going to last less than an hour. My long-term solution to the switching power supply issue is to buy one made for radio use, like &lt;a href="https://www.mfjenterprises.com/Product.php?productid=MFJ-4225MV"&gt;this one by MFJ&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="ubitx"></category><category term="amateur radio"></category><category term="ham radio"></category></entry><entry><title>Side project idea: WSPRry Pi Transmission Analysis with Espotek Labrador</title><link href="https://www.dinogalactic.com/side-project-idea-wsprry-pi-transmission-analysis-with-espotek-labrador.html" rel="alternate"></link><published>2020-03-08T16:50:00-04:00</published><updated>2020-03-08T16:50:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2020-03-08:/side-project-idea-wsprry-pi-transmission-analysis-with-espotek-labrador.html</id><summary type="html">&lt;p&gt;Lately I've gotten into ham radio and passed my FCC licensing exams, so I can transmit now, but I don't have a radio. I do have an (unmounted - it's in a drawer) antenna, so I could transmit if I had a device to do so.&lt;/p&gt;
&lt;p&gt;I am considering building a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lately I've gotten into ham radio and passed my FCC licensing exams, so I can transmit now, but I don't have a radio. I do have an (unmounted - it's in a drawer) antenna, so I could transmit if I had a device to do so.&lt;/p&gt;
&lt;p&gt;I am considering building a &lt;a href="https://en.wikipedia.org/wiki/WSPR_(amateur_radio_software)"&gt;WSPR&lt;/a&gt; beacon since I have most of the materials. This would include installing &lt;a href="https://github.com/JamesP6000/WsprryPi"&gt;WSPRry Pi&lt;/a&gt; on one of my Rasperry Pis and &lt;a href="http://www.gqrp.com/harmonic_filters.pdf"&gt;building a low-pass filter&lt;/a&gt; to keep from transmitting on illegal frequencies.&lt;/p&gt;
&lt;p&gt;But before I have the components for a low-pass filter, I can get used to my new &lt;a href="https://github.com/EspoTek/Labrador"&gt;Espotek Labrador&lt;/a&gt; by analysing the outputs from the WSPRry Pi on the Pi's GPIO pins without transmitting. How neat!&lt;/p&gt;
&lt;p&gt;Of particular interest to me are these questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why does the WsprryPi generate illegal harmonics?&lt;/li&gt;
&lt;li&gt;Can you observe the harmonics and the fundamental frequency at the same time using an EspoTek Labrador? Can you do that with just any oscilloscope?&lt;/li&gt;
&lt;li&gt;My hypothesis is that you can't do this with the Labrador or a standard oscilloscope because the signals will be added together and displayed as a square wave, since a square wave is the result of adding odd harmonics with the fundamental frequency, and an oscilloscope displays signals in the time domain, not the frequency domain.&lt;/li&gt;
&lt;li&gt;If my hypothesis is correct, how would adding a low pass filter, which attenuates signals above a particular frequency, allow a square wave to be transmitted? Wouldn't it attenuate the higher frequency harmonics needed to produce the square wave in the first place? In other words, if a square wave is the combination of odd harmonics, and we eliminate higher frequency harmonics, won't we be removing the components that make this signal a square wave?&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="projects"></category><category term="raspi"></category><category term="amateur radio"></category></entry><entry><title>Broccoli, Cabbage, Onions, Basil, and Chamomile</title><link href="https://www.dinogalactic.com/broccoli-cabbage-onions-basil-and-chamomile.html" rel="alternate"></link><published>2020-03-02T06:00:00-05:00</published><updated>2020-03-02T06:00:00-05:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2020-03-02:/broccoli-cabbage-onions-basil-and-chamomile.html</id><summary type="html">&lt;h2&gt;Garden Plan&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How much of each we want to plant in the garden&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8 Broccoli&lt;/li&gt;
&lt;li&gt;11 Chinese Cabbage&lt;/li&gt;
&lt;li&gt;40 Yellow Onions&lt;/li&gt;
&lt;li&gt;12 Red Onions&lt;/li&gt;
&lt;li&gt;96 Green Onions (table onions)&lt;/li&gt;
&lt;li&gt;24 chamomile&lt;/li&gt;
&lt;li&gt;28 Basil&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Starting Counts&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How many we're actually starting&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;80 yellow onions and 80 white onions, for a total …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Garden Plan&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How much of each we want to plant in the garden&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8 Broccoli&lt;/li&gt;
&lt;li&gt;11 Chinese Cabbage&lt;/li&gt;
&lt;li&gt;40 Yellow Onions&lt;/li&gt;
&lt;li&gt;12 Red Onions&lt;/li&gt;
&lt;li&gt;96 Green Onions (table onions)&lt;/li&gt;
&lt;li&gt;24 chamomile&lt;/li&gt;
&lt;li&gt;28 Basil&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Starting Counts&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How many we're actually starting&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;80 yellow onions and 80 white onions, for a total of 160 onions&lt;/li&gt;
&lt;li&gt;About 40 yellow onions expected to bulb out&lt;/li&gt;
&lt;li&gt;About 40 white onions expected to bulb out&lt;/li&gt;
&lt;li&gt;About 80 onions expected as green onions&lt;/li&gt;
&lt;li&gt;Purchased from Tractor Supply as bulbs, not seeds&lt;/li&gt;
&lt;li&gt;28 Chinese Cabbage&lt;/li&gt;
&lt;li&gt;21 Broccoli&lt;/li&gt;
&lt;li&gt;21 Chamomile&lt;/li&gt;
&lt;li&gt;35 Basil&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Starting conditions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In front of a window&lt;/li&gt;
&lt;li&gt;Big rack, not all gets light at once&lt;/li&gt;
&lt;li&gt;Chamomile &amp;amp; Basil on a heat mat, but not cabbage and broccoli&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make a cold frame tunnel, probably using &lt;a href="https://www.growveg.com/guides/how-to-set-up-a-low-tunnel-for-cool-season-crops/"&gt;these instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set Chinese Cabbage out after last frost&lt;/li&gt;
&lt;li&gt;Fall broccoli and cabbage seedlings should be started about 2 months before
  first frost&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mistakes/Lessons Learned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I didn't know enough about onions. I bought both short and long day onions,
  but found that my zone requires something called intermediate onions, and if
  it's possible to plant the other types here, I don't know how. So I'd like to
  learn about that before next year.&lt;/li&gt;
&lt;li&gt;Chinese Cabbage and broccoli say: "Start seeds for transplants 4-6 weeks
  prior to desired transplanting date... Set the plants in the garden about 4
  weeks before last frost date in the spring..."&lt;/li&gt;
&lt;li&gt;Next year, start seedlings around Feb 1-Feb 15&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="gardening"></category></entry><entry><title>Seed Starting 2020</title><link href="https://www.dinogalactic.com/seed-starting-2020.html" rel="alternate"></link><published>2020-02-16T06:00:00-05:00</published><updated>2020-02-16T06:00:00-05:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2020-02-16:/seed-starting-2020.html</id><summary type="html">&lt;p&gt;&lt;img alt="2020 garden layout" src="https://www.dinogalactic.com/images/garden_layout.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Seed source&lt;/h2&gt;
&lt;p&gt;All seeds from Baker Creek Heirloom Seeds.&lt;/p&gt;
&lt;h2&gt;Mix/conditions&lt;/h2&gt;
&lt;p&gt;Started with 2/5 peat, 2/5 home made compost, 1/5 perlite mix in 3" peat pots in front of a south facing window.&lt;/p&gt;
&lt;h2&gt;2-16-20&lt;/h2&gt;
&lt;p&gt;&lt;img alt="2-16-20 Guinevere planting seeds" src="https://www.dinogalactic.com/images/guinevere-planting-seeds.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;Tomatoes&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Target&lt;/strong&gt;: 36 tomato plants (34 large, 2 small)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Number of pots started …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="2020 garden layout" src="https://www.dinogalactic.com/images/garden_layout.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Seed source&lt;/h2&gt;
&lt;p&gt;All seeds from Baker Creek Heirloom Seeds.&lt;/p&gt;
&lt;h2&gt;Mix/conditions&lt;/h2&gt;
&lt;p&gt;Started with 2/5 peat, 2/5 home made compost, 1/5 perlite mix in 3" peat pots in front of a south facing window.&lt;/p&gt;
&lt;h2&gt;2-16-20&lt;/h2&gt;
&lt;p&gt;&lt;img alt="2-16-20 Guinevere planting seeds" src="https://www.dinogalactic.com/images/guinevere-planting-seeds.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;Tomatoes&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Target&lt;/strong&gt;: 36 tomato plants (34 large, 2 small)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Number of pots started with seeds&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;12 Paul Robeson&lt;/li&gt;
&lt;li&gt;8 Dad's Sunset&lt;/li&gt;
&lt;li&gt;10 Mortgage Lifter&lt;/li&gt;
&lt;li&gt;12 Beefsteak&lt;/li&gt;
&lt;li&gt;4 Principe Borgese&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Put on a heat mat.&lt;/p&gt;
&lt;h3&gt;Peppers&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Target&lt;/strong&gt;: 4 hot pepper plants, 7 green/red pepper plants.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Number of pots started with seeds&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8 Fish Peppers (medium/hot)&lt;/li&gt;
&lt;li&gt;8 Korean Dark Green Peppers (hot)&lt;/li&gt;
&lt;li&gt;8 Jigsaw Peppers (medium/hot)&lt;/li&gt;
&lt;li&gt;12 King of the North (red/green mild peppers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Put on a heat mat.&lt;/p&gt;
&lt;h3&gt;Overview Photo&lt;/h3&gt;
&lt;p&gt;This is everything we planted today in one nice aerial overview photo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2-16-20 areial seedling overview photo" src="https://www.dinogalactic.com/images/2-16-20-aerial-seedling-overview.jpg" /&gt;&lt;/p&gt;</content><category term="misc"></category><category term="gardening"></category></entry><entry><title>What Have I Actually Done at My Current Job?</title><link href="https://www.dinogalactic.com/what-have-i-actually-done-at-my-current-job.html" rel="alternate"></link><published>2019-11-26T06:00:00-05:00</published><updated>2019-11-26T06:00:00-05:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2019-11-26:/what-have-i-actually-done-at-my-current-job.html</id><summary type="html">&lt;p&gt;If I sat down to work on my resume any day but today, I would probably forget
that I was the one who managed much of our development team's Omniture
integrations at Truth Initiative Innovations.&lt;/p&gt;
&lt;p&gt;Why not create a long-lived, long-updated post that lists out these lesser
remembered things, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If I sat down to work on my resume any day but today, I would probably forget
that I was the one who managed much of our development team's Omniture
integrations at Truth Initiative Innovations.&lt;/p&gt;
&lt;p&gt;Why not create a long-lived, long-updated post that lists out these lesser
remembered things, and maybe even some of the morer remembered things?&lt;/p&gt;
&lt;p&gt;When it's time to sit down in front of the resume etching machine, I will be ready.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On 10-14-2020, my dev lead/acting supervisor said:&lt;blockquote&gt;
&lt;p&gt;Thank you for handling the deploy stuff and the details for [client]
You very consistently handle this sort of “getting the end of a project
wrangled and live” well, and it’s been a huge load off knowing you have it&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;I managed the Omniture Integrations at Truth Initiative Innovations. This
  includes classifying variables, being the person who knows the stuff about
  how Omniture works on the team (e.g. I was one of the two people who could
  remind people what evars and sprops were), and I'd take point on
  troubleshooting wiley Omniture bugs (like - why wasn't some registration data
  getting associated with a "person" in Jive, yet other stuff apparently was?).&lt;/li&gt;
&lt;li&gt;At one point, I created a webhook-based system to receive and report page view
    events to external partners who were paying for that data.&lt;/li&gt;
&lt;li&gt;For a long while, our servers were locking up because of blocking connections
  to our centralized (cloud) logging provider, and when the server came back
  online (usually after a hard reboot through the console at the datacenter),
  we would have lost all logs during that period. I fixed this by investigating
  our rsyslog config and improving it to not drop these messages when the
  logging provider was unavailable, and also to not block incoming syslog
  messages during this period, thus avoiding server lockups altogether. We went
  from "Oh my god we had better restart rsyslog soon or the server will crash"
  to "Oh look, we got an alert that rsyslog is experiencing connection
  problems. It will eventually come back online and send our logs to the
  logging provider." Because of this blocking and a less than great &lt;code&gt;rsyslog&lt;/code&gt;
  configuration, our local syslog server would block applications' socket
  connections on the &lt;code&gt;/dev/log&lt;/code&gt; socket, and since many important processes
  (such as &lt;code&gt;sshd&lt;/code&gt;!) submitted syslog messages at this location, many processes
  on the server locked up.&lt;/li&gt;
&lt;li&gt;Created an import mechanism for semi-technical business personnel to compose
  SMS text message conversations. This involves composing a series of messages,
  recognized regexes, responses, and API integrations as an artifact that can
  be uploaded to multiple environments and tested before going to production.
  This was an improvement from the method of filling out HTML forms for each
  message and saving them in an instance/environment's DB state with no easy
  way to replicate this in other environments. In short, I created an artifact
  format for non-developers to use as a better interface for creating text
  message conversations.&lt;/li&gt;
&lt;li&gt;Used a couple of Kibana cloud solutions daily to debug production issues and
  alert on them. Also often led the charge to seriously log as much as
  humanly/computerly possible in our apps to allow future observability. I
  wanted people to be able to find the exact code line and related data (db
  rows, etc.) needed to debug an issue, just by looking at the error log.&lt;/li&gt;
&lt;li&gt;Built development, staging, and production, as well as CI, infrastructure on
  AWS EC2/RDS with Ansible and Jenkins as well as Heroku and Heroku CI. Also
  built development infra on Docker (with and without Docker Compose) and
  Vagrant with Ansible.&lt;/li&gt;
&lt;li&gt;Architected a move from managed multi-server, multi-app VPS hosting to AWS,
  adding load balancing into the mix for the first time for the application.
  Automated all AWS infrastructure creation/management in Ansible.&lt;/li&gt;
&lt;li&gt;Designed a test interface for message library admins to simulate user
  experiences so they could gain confidence that their text messaging programs
  would work as expected for various users up to 90 days in the future.&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category><category term="career"></category><category term="resume"></category><category term="evergreen"></category></entry><entry><title>Introducing My 5-year Old to Computers Using a Raspberry Pi</title><link href="https://www.dinogalactic.com/introducing-my-5-year-old-to-computers-using-a-raspberry-pi.html" rel="alternate"></link><published>2019-11-18T06:00:00-05:00</published><updated>2019-11-18T06:00:00-05:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2019-11-18:/introducing-my-5-year-old-to-computers-using-a-raspberry-pi.html</id><summary type="html">&lt;p&gt;My 5-year-old told me last night,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm five now, so I should have a 'puter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we got started with a Raspberry Pi. She had so many problems getting started
that I hadn't anticipated, and since I was so shocked by these, I wanted to
write down the things I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My 5-year-old told me last night,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm five now, so I should have a 'puter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we got started with a Raspberry Pi. She had so many problems getting started
that I hadn't anticipated, and since I was so shocked by these, I wanted to
write down the things I learned from giving our first "computer lesson."&lt;/p&gt;
&lt;h2&gt;Kids at this age can't control a high-sensitivity mouse.&lt;/h2&gt;
&lt;p&gt;Turn the sensitivity &lt;em&gt;way&lt;/em&gt; down.&lt;/p&gt;
&lt;h2&gt;Maybe giant, bright screens aren't great right before bed.&lt;/h2&gt;
&lt;p&gt;They aren't good for my sleep, so why would they be for hers?&lt;/p&gt;
&lt;h2&gt;Jamming on the keyboard is fun, but pointless.&lt;/h2&gt;
&lt;p&gt;It's probably something they'll want to do (because they sees you do it all the
time!), but it's potentially destructive (it is possible to type some junk that
messes up your intended work together), and at the very least mashing the
keyboard doesn't work toward some better goal. Next time I'll better resist the
urge to let her do that.&lt;/p&gt;
&lt;h2&gt;Practice with your tech setup&lt;/h2&gt;
&lt;p&gt;This really goes for any technical presentation or training, but check your
software and hardware setup and make sure it's as rock solid as you can make it
before you start. Murphy's Law still applies, but maybe you'll avoid some lag
time at the outset. My biggest mistake was not even digging through storage
boxes to dig out my Raspberry Pis before we started. As a result, we first
plugged in the Raspberry Pi B because it was the only one I could find in my
frantic search. But it didn't work. Haven't investigated why. Then the
Raspberry Pi 2 I subsequently dug out was set up as an Arch Pi box with no X
display, and it had a password I couldn't remember. By the time we got the
Raspberry Pi 3 Model B that I finally found, I wasted valuable attention on
stuff that probably only confused her. I should've just gotten the stuff out
and set it up once ahead of time to practice.&lt;/p&gt;
&lt;h2&gt;Set expectations for computer usage rules and time limits &lt;em&gt;early&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;I should've set limits around computer usage from the first moment. In general,
explaining expectations and setting limits for her early and in a direct manner
helps her deal with them, but I didn't do that this time. While things turned
out OK, I realized today that she thought she could use the computer whenever
she wanted, and even without me. We have strict rules around screen time, but
up till now that has only applied to television time, since she hadn't used a
computer before.&lt;/p&gt;
&lt;h2&gt;Practice getting into their naive mindset&lt;/h2&gt;
&lt;p&gt;It is, again, astonishing how little she knows about computers. It shouldn't
be, but I don't spend much time teaching anymore, and I have to work harder to
imagine/remember what it was like not to know, for instance, what a mouse is.
We operate at &lt;em&gt;such&lt;/em&gt; a high level compared to her, and while I've taught in the
past and know this is part of good teaching, I had a lot of trouble changing my
expectations and really meeting where she was rather than where I expected her
to be. For instance, I had set a goal for her to double click an icon on the
desktop (to myself - I didn't tell her I expected her to be able to do this) as
the big action in our ~hour of time together, but I had completely overlooked
the fact that she didn't even know the mouse has two buttons (right and left
clicking), or that the scroll wheel isn't always useful, or that &lt;em&gt;moving the
mouse forward on the desk moves it up on the screen&lt;/em&gt;. When I asked her to move
her cursor to a location on the screen, she began picking up the mouse from the
desk to move it up to the screen. I have a lot to learn.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In the end, we mostly practiced mouse usage after plugging in the cords. I wouldn't trade it for anything.&lt;/p&gt;</content><category term="misc"></category><category term="kids"></category><category term="parenting"></category><category term="linux"></category><category term="raspi"></category></entry><entry><title>Digging into xonsh history backends</title><link href="https://www.dinogalactic.com/digging-into-xonsh-history-backends.html" rel="alternate"></link><published>2019-06-10T06:00:00-04:00</published><updated>2019-06-10T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2019-06-10:/digging-into-xonsh-history-backends.html</id><summary type="html">&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I want to write a per-directory-history xontrib for xonsh, like &lt;a href="https://github.com/jimhester/per-directory-history"&gt;the one I used for zsh&lt;/a&gt;. The piece of information that that I need to do this is missing from xonsh history entries right now: the working directory a historical command was executed in. &lt;a href="https://github.com/jimhester/per-directory-history"&gt;jimhester/per-directory-history&lt;/a&gt; tracks this by …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I want to write a per-directory-history xontrib for xonsh, like &lt;a href="https://github.com/jimhester/per-directory-history"&gt;the one I used for zsh&lt;/a&gt;. The piece of information that that I need to do this is missing from xonsh history entries right now: the working directory a historical command was executed in. &lt;a href="https://github.com/jimhester/per-directory-history"&gt;jimhester/per-directory-history&lt;/a&gt; tracks this by hooking into zsh's history searching and creation commands and putting each command in two history files, a global one and one specifically for the directory the command was executed in. I want to write my xontrib in the most xonshious (my word for if something works with the xonsh philosophy) way, so I don't want to rip this implementation scheme from &lt;code&gt;per-directory-history&lt;/code&gt; and jam it into xonsh where there's a better way. So I have to see where I have to collect, store, and read this metadata.&lt;/p&gt;
&lt;p&gt;Some ideas I have so far are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;add a new history backend that writes entries with the additional metadata of wherever the command was executed&lt;/li&gt;
&lt;li&gt;essentially step (1), but instead of adding a new history backend, augment whatever history backend is in use with this new functionlity (composition by way of monkey-patching)&lt;/li&gt;
&lt;li&gt;listen to some existing hooks/events for xonsh history lookup and additions and add the functionality there&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or some combination of the above, depending on what I find.&lt;/p&gt;
&lt;p&gt;This post documents my exploration of how history is implemented in xonsh.&lt;/p&gt;
&lt;p&gt;I'll pay particular attention to how history backends work with the shell backend abstraction so that I can write a xontrib that is as agnostic as possible about the shell implementation in use (&lt;code&gt;ptk&lt;/code&gt;, &lt;code&gt;ptk2&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt;, &lt;code&gt;jupyter&lt;/code&gt;, etc.).&lt;/p&gt;
&lt;h2&gt;Reading the existing documentation first&lt;/h2&gt;
&lt;p&gt;So I figured that I should read any existing documentation first, since it's possible that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The xonsh docs already include a section that tell me how to do this or something close to it&lt;/li&gt;
&lt;li&gt;I might find learn something that I realize is undocumented, and then I can contribute that back to the project docs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I found three documents dealing with history on &lt;a href="https://xon.sh"&gt;xon.sh&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xon.sh/tutorial_hist.html"&gt;Tutorial: History&lt;/a&gt; - explains the richer model of history that xonsh offers, and introduces &lt;code&gt;history&lt;/code&gt; command usage&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xon.sh/tutorial_history_backend.html"&gt;Tutorial: Writing Your Own History Backend&lt;/a&gt; - walks through authoring a new history backend with a CouchDB-backed history backend and replacing the default history backend with this new one&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xon.sh/api/history/index.html"&gt;History API&lt;/a&gt; - &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While each of these is good at doing what it says, notice that none of them discusses how history backends are instantiated or how history entries are constructed during shell execution. The History API docs come closest, but that's cheating because those docs are autogenerated from docstrings in the Python source for xonsh.&lt;/p&gt;
&lt;h2&gt;How history entries are managed&lt;/h2&gt;
&lt;p&gt;Since there is no smoking gun in the Xonsh docs talking about how history backends are created and where the components of history entries come from, I decided I have to dig into the xonsh code now rather than later.&lt;/p&gt;
&lt;p&gt;Rather than just explain when and how xonsh creates new history entries (which I will do some of), I also want to explain how I came to this understanding, since it's incredibly unlikely you're reading this doc just to learn how to write a clone of &lt;a href="https://github.com/jimhester/per-directory-history"&gt;jimhester/per-directory-history&lt;/a&gt;`.&lt;/p&gt;
&lt;p&gt;xonsh has support for multiple history backends, as we know. It ships with 3 backend implementations: &lt;a href=""&gt;history.json.JsonHistory&lt;/a&gt; and &lt;a href=""&gt;history.sqlite.SqliteHistory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These backends are implementations of the history backend abstraction &lt;a href=""&gt;history.base.History&lt;/a&gt;. &lt;code&gt;history.base.History&lt;/code&gt; doesn't do anything useful on its own - it is just inherited by implementations and defines the things the xonsh shell expects a history backend to be able to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt; (add something to the history)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flush&lt;/code&gt; (force whatever is in memory to persist to the backend's storage, such as disk)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;items&lt;/code&gt; (getting items for the current history session)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all_items&lt;/code&gt; (getting... all the items)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt; (providing shell history info)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run_gc&lt;/code&gt; (garbage collecting).&lt;/li&gt;
&lt;li&gt;It also allows list-like behavior via index access and slicing with &lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__"&gt;&lt;strong&gt;getitem&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fact that history backends implement &lt;code&gt;history.base.History&lt;/code&gt; is our first clue into how xonsh backends work. This fact means the xonsh shell does not interact directly with a history backend, so the shell's code doesn't know what backend it's working with - this is handled by our good friend polymorphism. For understanding how history entries are created, this establishes some constraints on what a history backend can accept as input - if the central part of the xonsh shell's code is interacting with a unique history backend through a generic abstraction, that unique history backend cannot use input that isn't passed into the generic abstraction. In other words, the xonsh shell gives a particular history item data structure to every history backend, no matter how special that history backend is, and if we want the history backend to be able to act on some other piece of data (such as the working directory the history item was executed in!), we have to alter that data structure.&lt;/p&gt;
&lt;h2&gt;The history entry data structure&lt;/h2&gt;
&lt;p&gt;I had trouble finding where these entries were defined and where they were &lt;code&gt;append&lt;/code&gt;ed to the history backend, but I soon realized I could drop an &lt;code&gt;ipdb&lt;/code&gt; break statement into my active history backend's &lt;code&gt;append&lt;/code&gt; method (&lt;code&gt;JsonHistory.append&lt;/code&gt;) and use the debugger's &lt;code&gt;where&lt;/code&gt; command to get a stacktrace, leading me directly to where xonsh appends history to the backend. I started up my debuggified xonsh, ran a command, watched as it paused in &lt;code&gt;ipdb&lt;/code&gt;, and got the traceback:&lt;/p&gt;
&lt;p&gt;(Note that you should make sure &lt;code&gt;$XONSH_DEBUG&lt;/code&gt; is on or, alternatively, install &lt;code&gt;xonsh&lt;/code&gt; as an &lt;a href=""&gt;editable package&lt;/a&gt; to avoid &lt;a href=""&gt;almalgamation&lt;/a&gt; and can see your changes right away without re-running &lt;code&gt;setup.py&lt;/code&gt;.)&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eddie@eddie-ubuntu ~ $ &lt;span style="color: #336666"&gt;echo&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;hey&amp;#39;&lt;/span&gt;                                                                                                                 
hey
&amp;gt; /home/eddie/source/xonsh/xonsh/history/json.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;353&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;append&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;352&lt;/span&gt;         import ipdb; ipdb.set_trace&lt;span style="color: #555555"&gt;()&lt;/span&gt;
--&amp;gt; &lt;span style="color: #FF6600"&gt;353&lt;/span&gt;         self.buffer.append&lt;span style="color: #555555"&gt;(&lt;/span&gt;cmd&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;354&lt;/span&gt;         self._len +&lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# must come before flushing&lt;/span&gt;

ipdb&amp;gt; where
  /home/eddie/.virtualenvs/xonsh/bin/xonsh&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;7&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;&amp;lt;module&amp;gt;&lt;span style="color: #555555"&gt;()&lt;/span&gt;
      &lt;span style="color: #FF6600"&gt;5&lt;/span&gt; &lt;span style="color: #003333"&gt;__file__&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;/home/eddie/source/xonsh/scripts/xonsh&amp;#39;&lt;/span&gt;
      &lt;span style="color: #FF6600"&gt;6&lt;/span&gt; with open&lt;span style="color: #555555"&gt;(&lt;/span&gt;__file__&lt;span style="color: #555555"&gt;)&lt;/span&gt; as f:
----&amp;gt; &lt;span style="color: #FF6600"&gt;7&lt;/span&gt;     exec&lt;span style="color: #555555"&gt;(&lt;/span&gt;compile&lt;span style="color: #555555"&gt;(&lt;/span&gt;f.read&lt;span style="color: #555555"&gt;()&lt;/span&gt;, __file__, &lt;span style="color: #CC3300"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span style="color: #555555"&gt;))&lt;/span&gt;

  /home/eddie/source/xonsh/scripts/xonsh&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;4&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;&amp;lt;module&amp;gt;&lt;span style="color: #555555"&gt;()&lt;/span&gt;
      &lt;span style="color: #FF6600"&gt;2&lt;/span&gt; 
      &lt;span style="color: #FF6600"&gt;3&lt;/span&gt; from xonsh.main import main
----&amp;gt; &lt;span style="color: #FF6600"&gt;4&lt;/span&gt; main&lt;span style="color: #555555"&gt;()&lt;/span&gt;

  /home/eddie/source/xonsh/xonsh/main.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;402&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;main&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;401&lt;/span&gt;         &lt;span style="color: #003333"&gt;args&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; premain&lt;span style="color: #555555"&gt;(&lt;/span&gt;argv&lt;span style="color: #555555"&gt;)&lt;/span&gt;
--&amp;gt; &lt;span style="color: #FF6600"&gt;402&lt;/span&gt;         &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; main_xonsh&lt;span style="color: #555555"&gt;(&lt;/span&gt;args&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;403&lt;/span&gt;     except Exception as err:

  /home/eddie/source/xonsh/xonsh/main.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;431&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;main_xonsh&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;430&lt;/span&gt;             try:
--&amp;gt; &lt;span style="color: #FF6600"&gt;431&lt;/span&gt;                 shell.shell.cmdloop&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;432&lt;/span&gt;             finally:

  /home/eddie/source/xonsh/xonsh/ptk2/shell.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;194&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;cmdloop&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;193&lt;/span&gt;                     &lt;span style="color: #003333"&gt;line&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; self.precmd&lt;span style="color: #555555"&gt;(&lt;/span&gt;line&lt;span style="color: #555555"&gt;)&lt;/span&gt;
--&amp;gt; &lt;span style="color: #FF6600"&gt;194&lt;/span&gt;                     self.default&lt;span style="color: #555555"&gt;(&lt;/span&gt;line&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;195&lt;/span&gt;             except &lt;span style="color: #555555"&gt;(&lt;/span&gt;KeyboardInterrupt, SystemExit&lt;span style="color: #555555"&gt;)&lt;/span&gt;:

  /home/eddie/source/xonsh/xonsh/base_shell.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;375&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;default&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;374&lt;/span&gt;             &lt;span style="color: #003333"&gt;tee_out&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; tee.getvalue&lt;span style="color: #555555"&gt;()&lt;/span&gt;
--&amp;gt; &lt;span style="color: #FF6600"&gt;375&lt;/span&gt;             self._append_history&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #003333"&gt;inp&lt;/span&gt;&lt;span style="color: #555555"&gt;=&lt;/span&gt;src, &lt;span style="color: #003333"&gt;ts&lt;/span&gt;&lt;span style="color: #555555"&gt;=[&lt;/span&gt;ts0, ts1&lt;span style="color: #555555"&gt;]&lt;/span&gt;, &lt;span style="color: #003333"&gt;tee_out&lt;/span&gt;&lt;span style="color: #555555"&gt;=&lt;/span&gt;tee_out&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;376&lt;/span&gt;             self.accumulated_inputs +&lt;span style="color: #555555"&gt;=&lt;/span&gt; src

  /home/eddie/source/xonsh/xonsh/base_shell.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;410&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;_append_history&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;409&lt;/span&gt;         &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist is not None:
--&amp;gt; &lt;span style="color: #FF6600"&gt;410&lt;/span&gt;             hist.append&lt;span style="color: #555555"&gt;(&lt;/span&gt;info&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;411&lt;/span&gt;             hist.last_cmd_rtn &lt;span style="color: #555555"&gt;=&lt;/span&gt; hist.last_cmd_out &lt;span style="color: #555555"&gt;=&lt;/span&gt; None

&amp;gt; /home/eddie/source/xonsh/xonsh/history/json.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;353&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;append&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;352&lt;/span&gt;         import ipdb; ipdb.set_trace&lt;span style="color: #555555"&gt;()&lt;/span&gt;
--&amp;gt; &lt;span style="color: #FF6600"&gt;353&lt;/span&gt;         self.buffer.append&lt;span style="color: #555555"&gt;(&lt;/span&gt;cmd&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;354&lt;/span&gt;         self._len +&lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# must come before flushing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maybe that wouldn't have been so hard to track down manually, but history is appended to in &lt;code&gt;BaseShell.default()&lt;/code&gt; with a method called &lt;code&gt;BaseShell._append_history()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what kind of information is passed to &lt;code&gt;_append_history&lt;/code&gt;?&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;default&lt;/span&gt;(&lt;span style="color: #336666"&gt;self&lt;/span&gt;, line):
    &lt;span style="color: #CC3300; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Implements code execution.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    line &lt;span style="color: #555555"&gt;=&lt;/span&gt; line &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; line&lt;span style="color: #555555"&gt;.&lt;/span&gt;endswith(&lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt;) &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt; line &lt;span style="color: #555555"&gt;+&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt;
    src, code &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;push(line)
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; code &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
        &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt;

    events&lt;span style="color: #555555"&gt;.&lt;/span&gt;on_precommand&lt;span style="color: #555555"&gt;.&lt;/span&gt;fire(cmd&lt;span style="color: #555555"&gt;=&lt;/span&gt;src)

    env &lt;span style="color: #555555"&gt;=&lt;/span&gt; builtins&lt;span style="color: #555555"&gt;.&lt;/span&gt;__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;env
    hist &lt;span style="color: #555555"&gt;=&lt;/span&gt; builtins&lt;span style="color: #555555"&gt;.&lt;/span&gt;__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;history  &lt;span style="color: #0099FF; font-style: italic"&gt;# pylint: disable=no-member&lt;/span&gt;
    ts1 &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;
    enc &lt;span style="color: #555555"&gt;=&lt;/span&gt; env&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;quot;XONSH_ENCODING&amp;quot;&lt;/span&gt;)
    err &lt;span style="color: #555555"&gt;=&lt;/span&gt; env&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;quot;XONSH_ENCODING_ERRORS&amp;quot;&lt;/span&gt;)
    tee &lt;span style="color: #555555"&gt;=&lt;/span&gt; Tee(encoding&lt;span style="color: #555555"&gt;=&lt;/span&gt;enc, errors&lt;span style="color: #555555"&gt;=&lt;/span&gt;err)
    &lt;span style="color: #006699; font-weight: bold"&gt;try&lt;/span&gt;:
        ts0 &lt;span style="color: #555555"&gt;=&lt;/span&gt; time&lt;span style="color: #555555"&gt;.&lt;/span&gt;time()
        run_compiled_code(code, &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;ctx, &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;quot;single&amp;quot;&lt;/span&gt;)
        ts1 &lt;span style="color: #555555"&gt;=&lt;/span&gt; time&lt;span style="color: #555555"&gt;.&lt;/span&gt;time()
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
            hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #FF6600"&gt;0&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# returncode for success&lt;/span&gt;
    &lt;span style="color: #006699; font-weight: bold"&gt;except&lt;/span&gt; XonshError &lt;span style="color: #006699; font-weight: bold"&gt;as&lt;/span&gt; e:
        &lt;span style="color: #336666"&gt;print&lt;/span&gt;(e&lt;span style="color: #555555"&gt;.&lt;/span&gt;args[&lt;span style="color: #FF6600"&gt;0&lt;/span&gt;], file&lt;span style="color: #555555"&gt;=&lt;/span&gt;sys&lt;span style="color: #555555"&gt;.&lt;/span&gt;stderr)
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
            hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# return code for failure&lt;/span&gt;
    &lt;span style="color: #006699; font-weight: bold"&gt;except&lt;/span&gt; &lt;span style="color: #CC0000; font-weight: bold"&gt;Exception&lt;/span&gt;:  &lt;span style="color: #0099FF; font-style: italic"&gt;# pylint: disable=broad-except&lt;/span&gt;
        print_exception()
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
            hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# return code for failure&lt;/span&gt;
    &lt;span style="color: #006699; font-weight: bold"&gt;finally&lt;/span&gt;:
        ts1 &lt;span style="color: #555555"&gt;=&lt;/span&gt; ts1 &lt;span style="color: #000000; font-weight: bold"&gt;or&lt;/span&gt; time&lt;span style="color: #555555"&gt;.&lt;/span&gt;time()
        tee_out &lt;span style="color: #555555"&gt;=&lt;/span&gt; tee&lt;span style="color: #555555"&gt;.&lt;/span&gt;getvalue()
        &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;_append_history(inp&lt;span style="color: #555555"&gt;=&lt;/span&gt;src, ts&lt;span style="color: #555555"&gt;=&lt;/span&gt;[ts0, ts1], tee_out&lt;span style="color: #555555"&gt;=&lt;/span&gt;tee_out)
        &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;accumulated_inputs &lt;span style="color: #555555"&gt;+=&lt;/span&gt; src
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; (
            tee_out
            &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; env&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;quot;XONSH_APPEND_NEWLINE&amp;quot;&lt;/span&gt;)
            &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; tee_out&lt;span style="color: #555555"&gt;.&lt;/span&gt;endswith(os&lt;span style="color: #555555"&gt;.&lt;/span&gt;linesep)
        ):
            &lt;span style="color: #336666"&gt;print&lt;/span&gt;(os&lt;span style="color: #555555"&gt;.&lt;/span&gt;linesep, end&lt;span style="color: #555555"&gt;=&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
        tee&lt;span style="color: #555555"&gt;.&lt;/span&gt;close()
        &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;_fix_cwd()
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; builtins&lt;span style="color: #555555"&gt;.&lt;/span&gt;__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;exit:  &lt;span style="color: #0099FF; font-style: italic"&gt;# pylint: disable=no-member&lt;/span&gt;
        &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;code&gt;finally&lt;/code&gt; block, we see &lt;code&gt;inp&lt;/code&gt; is &lt;code&gt;src&lt;/code&gt;, which, after digging around a big into what happens above this call, appears to be the string that was typed into the command prompt, as opposed to the &lt;code&gt;code&lt;/code&gt;, which is the xonsh code that was compiled and run (successfully or not) from compiling this &lt;code&gt;src&lt;/code&gt;. Interestingly, this means we are typing in source code each time we enter text the xonsh REPL, and xonsh is compiling/running  it. The essential piece of a history entry is a bit of uncompiled source code (like &lt;code&gt;ls -alh&lt;/code&gt; or &lt;code&gt;import sys&lt;/code&gt;)!&lt;/p&gt;
&lt;p&gt;Let's follow an &lt;code&gt;ls&lt;/code&gt; command entry from the prompt through &lt;code&gt;BaseShell.default()&lt;/code&gt; and the code that appends the entry to history.&lt;/p&gt;
&lt;p&gt;The code block picks up just after I've entered the &lt;code&gt;ls&lt;/code&gt; command at the prompt.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #555555"&gt;/&lt;/span&gt;home&lt;span style="color: #555555"&gt;/&lt;/span&gt;eddie&lt;span style="color: #555555"&gt;/&lt;/span&gt;source&lt;span style="color: #555555"&gt;/&lt;/span&gt;xonsh&lt;span style="color: #555555"&gt;/&lt;/span&gt;xonsh&lt;span style="color: #555555"&gt;/&lt;/span&gt;base_shell&lt;span style="color: #555555"&gt;.&lt;/span&gt;py(&lt;span style="color: #FF6600"&gt;348&lt;/span&gt;)default()
    &lt;span style="color: #FF6600"&gt;347&lt;/span&gt;         src, code &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;push(line)
&lt;span style="color: #555555"&gt;--&amp;gt;&lt;/span&gt; &lt;span style="color: #FF6600"&gt;348&lt;/span&gt;         &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; code &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
    &lt;span style="color: #FF6600"&gt;349&lt;/span&gt;             &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt;

ipdb&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; code                                                                                                                                                                                                                                                                                            
&lt;span style="color: #555555"&gt;&amp;lt;&lt;/span&gt;code &lt;span style="color: #336666"&gt;object&lt;/span&gt; &lt;span style="color: #555555"&gt;&amp;lt;&lt;/span&gt;module&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; at &lt;span style="color: #FF6600"&gt;0x7f3682be44b0&lt;/span&gt;, file &lt;span style="color: #CC3300"&gt;&amp;quot;/home/eddie/.virtualenvs/xonsh/lib/python3.7/site-packages/xontrib/fzf-widgets.xsh&amp;quot;&lt;/span&gt;, line &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt;
ipdb&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; src                                                                                                                                                                                                                                                                                             
&lt;span style="color: #CC3300"&gt;&amp;#39;ls&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;code&lt;/code&gt; is apparently wrapped in some non-&lt;code&gt;ls&lt;/code&gt; xontrib code I have installed. I'm unsure exactly why right now.&lt;/p&gt;
&lt;p&gt;But note that &lt;code&gt;src&lt;/code&gt; is the &lt;code&gt;ls&lt;/code&gt; command I typed in, followed by a newline.&lt;/p&gt;
&lt;p&gt;Once we get down to the actual appending, we see that &lt;code&gt;ts0&lt;/code&gt; and &lt;code&gt;ts1&lt;/code&gt; are the start and end timestamps of the code's execution. &lt;code&gt;tee_out&lt;/code&gt; is simply the output of the command.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #555555"&gt;--&amp;gt;&lt;/span&gt; &lt;span style="color: #FF6600"&gt;377&lt;/span&gt;             &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;_append_history(inp&lt;span style="color: #555555"&gt;=&lt;/span&gt;src, ts&lt;span style="color: #555555"&gt;=&lt;/span&gt;[ts0, ts1], tee_out&lt;span style="color: #555555"&gt;=&lt;/span&gt;tee_out)
    &lt;span style="color: #FF6600"&gt;378&lt;/span&gt;             &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;accumulated_inputs &lt;span style="color: #555555"&gt;+=&lt;/span&gt; src
    &lt;span style="color: #FF6600"&gt;379&lt;/span&gt;             &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; (
    &lt;span style="color: #FF6600"&gt;380&lt;/span&gt;                 tee_out
    &lt;span style="color: #FF6600"&gt;381&lt;/span&gt;                 &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; env&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;quot;XONSH_APPEND_NEWLINE&amp;quot;&lt;/span&gt;)
    &lt;span style="color: #FF6600"&gt;382&lt;/span&gt;                 &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; tee_out&lt;span style="color: #555555"&gt;.&lt;/span&gt;endswith(os&lt;span style="color: #555555"&gt;.&lt;/span&gt;linesep)
    &lt;span style="color: #FF6600"&gt;383&lt;/span&gt;             ):
    &lt;span style="color: #FF6600"&gt;384&lt;/span&gt;                 &lt;span style="color: #336666"&gt;print&lt;/span&gt;(os&lt;span style="color: #555555"&gt;.&lt;/span&gt;linesep, end&lt;span style="color: #555555"&gt;=&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
    &lt;span style="color: #FF6600"&gt;385&lt;/span&gt;             tee&lt;span style="color: #555555"&gt;.&lt;/span&gt;close()
    &lt;span style="color: #FF6600"&gt;386&lt;/span&gt;             &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;_fix_cwd()
    &lt;span style="color: #FF6600"&gt;387&lt;/span&gt;         &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; builtins&lt;span style="color: #555555"&gt;.&lt;/span&gt;__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;exit:  &lt;span style="color: #0099FF; font-style: italic"&gt;# pylint: disable=no-member&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;388&lt;/span&gt;             &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;389&lt;/span&gt;

ipdb&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; src                                                                                                                                                                                                                                                                                             
&lt;span style="color: #CC3300"&gt;&amp;#39;ls&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;
ipdb&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; ts0                                                                                                                                                                                                                                                                                             
&lt;span style="color: #FF6600"&gt;1560283660.1879137&lt;/span&gt;
ipdb&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; ts1                                                                                                                                                                                                                                                                                             
&lt;span style="color: #FF6600"&gt;1560283660.3324323&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's step into &lt;code&gt;_append_history()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;_append_history&lt;/span&gt;(&lt;span style="color: #336666"&gt;self&lt;/span&gt;, tee_out&lt;span style="color: #555555"&gt;=&lt;/span&gt;&lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;, &lt;span style="color: #555555"&gt;**&lt;/span&gt;info):
    &lt;span style="color: #CC3300; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Append information about the command to the history.&lt;/span&gt;

&lt;span style="color: #CC3300; font-style: italic"&gt;    This also handles on_postcommand because this is the place where all the&lt;/span&gt;
&lt;span style="color: #CC3300; font-style: italic"&gt;    information is available.&lt;/span&gt;
&lt;span style="color: #CC3300; font-style: italic"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    hist &lt;span style="color: #555555"&gt;=&lt;/span&gt; builtins&lt;span style="color: #555555"&gt;.&lt;/span&gt;__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;history  &lt;span style="color: #0099FF; font-style: italic"&gt;# pylint: disable=no-member&lt;/span&gt;
    info[&lt;span style="color: #CC3300"&gt;&amp;quot;rtn&amp;quot;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;
    tee_out &lt;span style="color: #555555"&gt;=&lt;/span&gt; tee_out &lt;span style="color: #000000; font-weight: bold"&gt;or&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;
    last_out &lt;span style="color: #555555"&gt;=&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_out &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; last_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; tee_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
        &lt;span style="color: #006699; font-weight: bold"&gt;pass&lt;/span&gt;
    &lt;span style="color: #006699; font-weight: bold"&gt;elif&lt;/span&gt; last_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; tee_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
        info[&lt;span style="color: #CC3300"&gt;&amp;quot;out&amp;quot;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; tee_out
    &lt;span style="color: #006699; font-weight: bold"&gt;elif&lt;/span&gt; last_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; tee_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
        info[&lt;span style="color: #CC3300"&gt;&amp;quot;out&amp;quot;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; last_out
    &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt;:
        info[&lt;span style="color: #CC3300"&gt;&amp;quot;out&amp;quot;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; tee_out &lt;span style="color: #555555"&gt;+&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt; &lt;span style="color: #555555"&gt;+&lt;/span&gt; last_out
    events&lt;span style="color: #555555"&gt;.&lt;/span&gt;on_postcommand&lt;span style="color: #555555"&gt;.&lt;/span&gt;fire(
        cmd&lt;span style="color: #555555"&gt;=&lt;/span&gt;info[&lt;span style="color: #CC3300"&gt;&amp;quot;inp&amp;quot;&lt;/span&gt;], rtn&lt;span style="color: #555555"&gt;=&lt;/span&gt;info[&lt;span style="color: #CC3300"&gt;&amp;quot;rtn&amp;quot;&lt;/span&gt;], out&lt;span style="color: #555555"&gt;=&lt;/span&gt;info&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;quot;out&amp;quot;&lt;/span&gt;, &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;), ts&lt;span style="color: #555555"&gt;=&lt;/span&gt;info[&lt;span style="color: #CC3300"&gt;&amp;quot;ts&amp;quot;&lt;/span&gt;]
    )
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
        hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;append(info)
        hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #555555"&gt;=&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_out &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It isn't the most exciting code. It is really just a matter of adding return code information for failed commands and, if available, the output of the command, to the &lt;code&gt;info&lt;/code&gt; (history entry) provided to the backend. As a funny aside most of this method is a heuristic for deciding whether to use tee output or &lt;code&gt;last_cmd_out&lt;/code&gt; from the history backend, which &lt;code&gt;last_cmd_out&lt;/code&gt; seems to be an unused property in at least all the built-in history backends. Would be interesting to know why it ever existed at all!&lt;/p&gt;
&lt;p&gt;The crucial thing we learn here, though, is that &lt;code&gt;info&lt;/code&gt; is effectively what we've been calling the history entry. It is the "packet" (concretely, a &lt;code&gt;dict&lt;/code&gt;) of information that is appended to the history. It defines what our history backend can save, delete, search, manipulate, etc. So any additional information we would need to add for our history backend would have to be added to &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's take a look at the &lt;code&gt;info&lt;/code&gt; object for two different cases. In the first, I'll call &lt;code&gt;ls&lt;/code&gt; in a directory with exactly one &lt;em&gt;empty&lt;/em&gt; regular file: &lt;code&gt;test&lt;/code&gt;, and in the second I'll call &lt;code&gt;grep something test&lt;/code&gt; in the same directory. The &lt;code&gt;ls&lt;/code&gt; call will provide a successful return value and the &lt;code&gt;grep&lt;/code&gt; call will not (since &lt;code&gt;test&lt;/code&gt; will be empty).&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;ls&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{&lt;span style="color: #CC3300"&gt;&amp;#39;inp&amp;#39;&lt;/span&gt;: &lt;span style="color: #CC3300"&gt;&amp;#39;ls&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;ts&amp;#39;&lt;/span&gt;: [&lt;span style="color: #FF6600"&gt;1560285242.9592671&lt;/span&gt;, &lt;span style="color: #FF6600"&gt;1560285243.0506482&lt;/span&gt;], &lt;span style="color: #CC3300"&gt;&amp;#39;rtn&amp;#39;&lt;/span&gt;: &lt;span style="color: #FF6600"&gt;0&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;out&amp;#39;&lt;/span&gt;: &lt;span style="color: #CC3300"&gt;&amp;#39;test&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Calling &lt;code&gt;grep something test&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{&lt;span style="color: #CC3300"&gt;&amp;#39;inp&amp;#39;&lt;/span&gt;: &lt;span style="color: #CC3300"&gt;&amp;#39;grep something test&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;ts&amp;#39;&lt;/span&gt;: [&lt;span style="color: #FF6600"&gt;1560285373.0232306&lt;/span&gt;, &lt;span style="color: #FF6600"&gt;1560285373.125136&lt;/span&gt;], &lt;span style="color: #CC3300"&gt;&amp;#39;rtn&amp;#39;&lt;/span&gt;: &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There you have it - all the information available to a history backend's &lt;code&gt;append()&lt;/code&gt; method as far as I can tell.&lt;/p&gt;
&lt;h2&gt;Thoughts on where I should go&lt;/h2&gt;
&lt;p&gt;So I've been digging around in here to ultimately change what history items are loaded when a user interactively scrolls through the history, uses the &lt;code&gt;history&lt;/code&gt; command, etc., with the aim of showing only the history items that are associated with the current working directory. To do that, I have to get &lt;code&gt;cwd&lt;/code&gt; information into each history item.&lt;/p&gt;
&lt;p&gt;To fast-forward a bit, I've now done that, and it's pretty simple, though it did require a change to the xonsh source code:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #003300; font-weight: bold"&gt;diff --git a/xonsh/base_shell.py b/xonsh/base_shell.py&lt;/span&gt;
&lt;span style="color: #003300; font-weight: bold"&gt;index b7e9aff2..7088427f 100644&lt;/span&gt;
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;--- a/xonsh/base_shell.py&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+++ b/xonsh/base_shell.py&lt;/span&gt;
&lt;span style="color: #003300; font-weight: bold"&gt;@@ -393,6 +393,8 @@ class BaseShell(object):&lt;/span&gt;
         &amp;quot;&amp;quot;&amp;quot;
         hist = builtins.__xonsh__.history  # pylint: disable=no-member
         info[&amp;quot;rtn&amp;quot;] = hist.last_cmd_rtn if hist is not None else None
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        if builtins.__xonsh__.env.get(&amp;quot;XONSH_STORE_CWD&amp;quot;):&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+            info[&amp;#39;cwd&amp;#39;] = os.getcwd()&lt;/span&gt;
         tee_out = tee_out or None
         last_out = hist.last_cmd_out if hist is not None else None
         if last_out is None and tee_out is None:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Luckily, when I had asked whether such a xontrib as &lt;code&gt;per-directory-history&lt;/code&gt; existed yet, xonsh creator &lt;a href="https://github.com/scopatz"&gt;Anthony Scopatz&lt;/a&gt; told me he'd be up for modifying the history mechanism to support this kind of xontrib, so we're good here.&lt;/p&gt;
&lt;p&gt;The next question I had was how I could make history:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aware of this new information&lt;/li&gt;
&lt;li&gt;optionally able to use this information by installing a xontrib&lt;/li&gt;
&lt;li&gt;hopefully prompt-backend agnostic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make history aware of this new info, I had to alter the history backends - each history backend has a different way of handling the attributes of history items. I decided to follow a depth-first way of experimenting, hoping that if I got my history functionality working with &lt;code&gt;JsonHistory&lt;/code&gt;, probably the most commonly used backend, I could either figure out how to get it working with other backends, or (less good) just make my xontrib available to people using the &lt;code&gt;JsonHistory&lt;/code&gt; backend.&lt;/p&gt;
&lt;p&gt;Next, I looked at where history strings are loaded by xonsh, so that I could start limiting the items loaded to those that matched by &lt;code&gt;cwd&lt;/code&gt;. My thought was that each time history was searched by the user, by whatever mechanism, if I found the point where history strings were loaded, I could filter out those that didn't match.&lt;/p&gt;
&lt;p&gt;I thought that creating a history backend with an overridden method would help since custom history backends are easily pluggable with the &lt;code&gt;XONSH_HISTORY_BACKEND&lt;/code&gt; environment varible, thus making any solution that used a custom one pretty easily installable via a xontrib.&lt;/p&gt;
&lt;p&gt;Unfortunately there was no clear and easy way to override the history backend functionality to filter out history entries on arbitrary criteria, so I added yet another thing to the xonsh source:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #003300; font-weight: bold"&gt;diff --git a/xonsh/history/json.py b/xonsh/history/json.py&lt;/span&gt;
&lt;span style="color: #003300; font-weight: bold"&gt;index 50b6326b..7313cfc9 100644&lt;/span&gt;
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;--- a/xonsh/history/json.py&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+++ b/xonsh/history/json.py&lt;/span&gt;
&lt;span style="color: #003300; font-weight: bold"&gt;@@ -328,6 +328,7 @@ class JsonHistory(History):&lt;/span&gt;
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;--- a/xonsh/history/json.py&lt;/span&gt;
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;--- a/xonsh/history/json.py&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+++ b/xonsh/history/json.py&lt;/span&gt;
&lt;span style="color: #003300; font-weight: bold"&gt;@@ -328,6 +328,7 @@ class JsonHistory(History):&lt;/span&gt;
         self.tss = JsonCommandField(&amp;quot;ts&amp;quot;, self)
         self.inps = JsonCommandField(&amp;quot;inp&amp;quot;, self)
         self.outs = JsonCommandField(&amp;quot;out&amp;quot;, self)
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        self.cwds = JsonCommandField(&amp;quot;cwd&amp;quot;, self)&lt;/span&gt;
         self.rtns = JsonCommandField(&amp;quot;rtn&amp;quot;, self)

     def __len__(self):
&lt;span style="color: #003300; font-weight: bold"&gt;@@ -382,10 +383,11 @@ class JsonHistory(History):&lt;/span&gt;
     def items(self, newest_first=False):
         &amp;quot;&amp;quot;&amp;quot;Display history items of current session.&amp;quot;&amp;quot;&amp;quot;
         if newest_first:
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;-            items = zip(reversed(self.inps), reversed(self.tss))&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+            items = zip(&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+                reversed(self.inps), reversed(self.tss), reversed(self.cwds))&lt;/span&gt;
         else:
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;-            items = zip(self.inps, self.tss)&lt;/span&gt;
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;-        for item, tss in items:&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+            items = zip(self.inps, self.tss, self.cwds)&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        for item, tss, _ in items:&lt;/span&gt;
             yield {&amp;quot;inp&amp;quot;: item.rstrip(), &amp;quot;ts&amp;quot;: tss[0]}

     def all_items(self, newest_first=False, **kwargs):
&lt;span style="color: #003300; font-weight: bold"&gt;@@ -413,10 +415,16 @@ class JsonHistory(History):&lt;/span&gt;
             if newest_first:
                 commands = reversed(commands)
             for c in commands:
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;-                yield {&amp;quot;inp&amp;quot;: c[&amp;quot;inp&amp;quot;].rstrip(), &amp;quot;ts&amp;quot;: c[&amp;quot;ts&amp;quot;][0]}&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+                if self._include_history_item(c):&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+                    yield {&amp;quot;inp&amp;quot;: c[&amp;quot;inp&amp;quot;].rstrip(), &amp;quot;ts&amp;quot;: c[&amp;quot;ts&amp;quot;][0]}&lt;/span&gt;
         # all items should also include session items
         yield from self.items()

&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+    def _include_history_item(self, item):&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        &amp;quot;&amp;quot;&amp;quot;Whether to include the history item.&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        Allows filtering history results by subclass.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        return True&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In short, this diff just adds a method that checks whether a history item should be used, and in the default case (the &lt;code&gt;JsonHistory&lt;/code&gt; base class), it simply allows all history items.&lt;/p&gt;
&lt;p&gt;In my xontrib, I created a custom history backend that performed the filtering I wanted:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #00AA88; font-weight: bold"&gt;JsonPerDirectoryHistory&lt;/span&gt;(JsonHistory):
    &lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;__init__&lt;/span&gt;(&lt;span style="color: #336666"&gt;self&lt;/span&gt;, &lt;span style="color: #555555"&gt;*&lt;/span&gt;args, &lt;span style="color: #555555"&gt;**&lt;/span&gt;kwargs):
        &lt;span style="color: #336666"&gt;super&lt;/span&gt;()&lt;span style="color: #555555"&gt;.&lt;/span&gt;&lt;span style="color: #CC00FF"&gt;__init__&lt;/span&gt;(&lt;span style="color: #555555"&gt;*&lt;/span&gt;args, &lt;span style="color: #555555"&gt;**&lt;/span&gt;kwargs)
        &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;

    &lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;_include_history_item&lt;/span&gt;(&lt;span style="color: #336666"&gt;self&lt;/span&gt;, item):
        run_in_terminal(&lt;span style="color: #006699; font-weight: bold"&gt;lambda&lt;/span&gt;: &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;f&amp;#39;Got item &lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;item&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;))
        run_in_terminal(&lt;span style="color: #006699; font-weight: bold"&gt;lambda&lt;/span&gt;: &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;f&amp;#39;Use local history: &lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;))
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; item&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;#39;cwd&amp;#39;&lt;/span&gt;) &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; os&lt;span style="color: #555555"&gt;.&lt;/span&gt;getcwd() &lt;span style="color: #555555"&gt;==&lt;/span&gt; item&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;#39;cwd&amp;#39;&lt;/span&gt;):
            run_in_terminal(&lt;span style="color: #006699; font-weight: bold"&gt;lambda&lt;/span&gt;: &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;&amp;#39;Using item&amp;#39;&lt;/span&gt;))
            &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;
        run_in_terminal(&lt;span style="color: #006699; font-weight: bold"&gt;lambda&lt;/span&gt;: &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;&amp;#39;Not using item&amp;#39;&lt;/span&gt;))
        &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice in this that there are some Prompt Toolkit-specific &lt;code&gt;run_in_terminal&lt;/code&gt; &lt;code&gt;print&lt;/code&gt; calls, which I've added just for very verbose logging while developing. I'd remove these when releasing this xontrib, assuming I keep support for non-Prompt Toolkit shells.&lt;/p&gt;
&lt;p&gt;In the xontrib, I set a &lt;code&gt;prompt_toolkit2&lt;/code&gt; keybinding to switch this functionality on and off, and to tell the user what mode they've switched to:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;os&lt;/span&gt;
&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;sys&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; stdout

&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;prompt_toolkit&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; keys, print_formatted_text
&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;prompt_toolkit.application&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; run_in_terminal

&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;builtins&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; __xonsh__
&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;xonsh.history.json&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; JsonHistory
&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;xonsh.platform&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; ptk_shell_type


&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;toggle_per_directory_history&lt;/span&gt;():
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #336666"&gt;isinstance&lt;/span&gt;(__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;history, JsonPerDirectoryHistory):
        hist &lt;span style="color: #555555"&gt;=&lt;/span&gt; __xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;history
        hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history:
            &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;
        &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt;:
            &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;global&amp;#39;&lt;/span&gt;


&lt;span style="color: #9999FF"&gt;@events&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;on_ptk_create
&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;custom_keybindings&lt;/span&gt;(bindings, &lt;span style="color: #555555"&gt;**&lt;/span&gt;kw):
    &lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;do_nothing&lt;/span&gt;(func):
        &lt;span style="color: #006699; font-weight: bold"&gt;pass&lt;/span&gt;

    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; ptk_shell_type() &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;prompt_toolkit2&amp;#39;&lt;/span&gt;:
        binder &lt;span style="color: #555555"&gt;=&lt;/span&gt; bindings&lt;span style="color: #555555"&gt;.&lt;/span&gt;add
    &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt;:
        binder &lt;span style="color: #555555"&gt;=&lt;/span&gt; bindings&lt;span style="color: #555555"&gt;.&lt;/span&gt;registry&lt;span style="color: #555555"&gt;.&lt;/span&gt;add_binding

    key &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;{&lt;span style="color: #555555"&gt;...&lt;/span&gt;}&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;#39;PER_DIRECTORY_HISTORY_TOGGLE&amp;#39;&lt;/span&gt;)

    &lt;span style="color: #9999FF"&gt;@binder&lt;/span&gt;(key)
    &lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;switch_between_global_and_local_history&lt;/span&gt;(_):
        new_hist_type &lt;span style="color: #555555"&gt;=&lt;/span&gt; toggle_per_directory_history()
        run_in_terminal(&lt;span style="color: #006699; font-weight: bold"&gt;lambda&lt;/span&gt;: &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;f&amp;#39;Switching to &lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;new_hist_type&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt; history.&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, I set my history backend to my custom one in my &lt;code&gt;.xonshrc&lt;/code&gt; and turned on per-directory history:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;xontrib.per_directory_history&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; JsonPerDirectoryHistory
&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;XONSH_HISTORY_BACKEND &lt;span style="color: #555555"&gt;=&lt;/span&gt; JsonPerDirectoryHistory
&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;XONSH_STORE_CWD &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Initial results&lt;/h2&gt;
&lt;p&gt;Failure, mostly. Upon opening a &lt;code&gt;gnome-terminal&lt;/code&gt; instance, I saw the debugging messages printed from my history backend, which was nice:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie/source/xonsh&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;ls\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543198.0524652, 1560543198.1038635]}
Use local history: True
Not using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie/source/xonsh&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;z xonsh\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543197.440549, 1560543197.4461908]}
Use local history: True
Not using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;cd ..\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543047.8660042, 1560543047.8693159]}
Use local history: True
Using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie/test&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;fancy mccheeese\n&amp;#39;, &amp;#39;rtn&amp;#39;: 1, &amp;#39;ts&amp;#39;: [1560543038.735667, 1560543039.5000844]}
Use local history: True
Not using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie/test&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;cd test\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543024.288666, 1560543024.2920816]}
Use local history: True
Not using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;ls\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543021.7835386, 1560543021.8042111]}
Use local history: True
Using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;ls\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543020.0776978, 1560543020.1177895]}
Use local history: True
Using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie/test&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;cd test\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560542986.1126633, 1560542986.1164727]}
Use local history: True
Not using item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My history backend was apparently being used to load existing history strings, and it was only returning those that matched the &lt;code&gt;cwd&lt;/code&gt;, which, in a new &lt;code&gt;gnome-terminal&lt;/code&gt; for me is &lt;code&gt;/home/eddie&lt;/code&gt;. Notice how commands with &lt;code&gt;cwd&lt;/code&gt; info that matches &lt;code&gt;/home/eddie&lt;/code&gt; are the only history items being used.&lt;/p&gt;
&lt;p&gt;Cool. So I decided to switch to another directory. If things are working as expected, I should be able to enter history commands, go back through the history, and only get commands for this new directory. Before entering any commands in this directory, I shouldn't see any history items!&lt;/p&gt;
&lt;p&gt;But I did. I could scroll back through all the history items that my command output just said were being used. What's more, if I switched to yet another directory, I could access all the commands I'd entered in the current prompt session since opening it.&lt;/p&gt;
&lt;h2&gt;Why???&lt;/h2&gt;
&lt;p&gt;This may be specific to Prompt Toolkit, but I don't know yet. It appears xonsh uses history backends in conjunction with prompt toolkit like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;xonsh spins up a new shell instance in &lt;code&gt;xonsh/shell.py&lt;/code&gt; when a new shell process is started&lt;/li&gt;
&lt;li&gt;xonsh creates a Prompt Toolkit instance and hands it all the history data up to this point, which, in the case of &lt;code&gt;JsonHistory&lt;/code&gt;, is all the history in our JSON history files&lt;/li&gt;
&lt;li&gt;Prompt Toolkit runs the prompt&lt;/li&gt;
&lt;li&gt;Each time a command is entered, Prompt Toolkit feeds this command to the xonsh shell, which appends the command history to the history backend in use&lt;/li&gt;
&lt;li&gt;Indepedently, Prompt Toolkit maintains its own searchable/scrollable record of the history since the Prompt Toolkit instance was created&lt;/li&gt;
&lt;li&gt;The next time a shell is loaded, the previous history is given to Prompt Toolkit from the xonsh history backend.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Do you see my problem? I had indeed changed what history items are loaded by the history backend, but I hadn't changed anything about what the Prompt Toolkit history mechanism does &lt;em&gt;once a shell is up and running&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Where do I go from here?&lt;/h2&gt;
&lt;p&gt;I am going to bring this post to a close since it contains lots of cool info about how xonsh history backends work, but I will pick back up on my own historical exploits in another post.&lt;/p&gt;</content><category term="xonshiousness"></category><category term="xonsh"></category><category term="shell"></category><category term="linux"></category><category term="python"></category><category term="xontribs"></category></entry><entry><title>Smart things to say when a production bug arises in software development</title><link href="https://www.dinogalactic.com/smart-things-to-say-when-a-production-bug-arises-in-software-development.html" rel="alternate"></link><published>2019-06-10T06:00:00-04:00</published><updated>2019-06-10T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2019-06-10:/smart-things-to-say-when-a-production-bug-arises-in-software-development.html</id><summary type="html">&lt;p&gt;Today I noticed an issue that was affecting production. Doesn't matter the issue, I don't think, but my supervisor asked some good questions, so I figured I'd document them. This helps me remember what I should do to be a better leader in emergent situations.&lt;/p&gt;
&lt;p&gt;These aren't direct quotes, just …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I noticed an issue that was affecting production. Doesn't matter the issue, I don't think, but my supervisor asked some good questions, so I figured I'd document them. This helps me remember what I should do to be a better leader in emergent situations.&lt;/p&gt;
&lt;p&gt;These aren't direct quotes, just summaries of the things he wanted to figure out to help him prioritize.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does this relate to some previous or ongoing issue that we know about?&lt;/li&gt;
&lt;li&gt;If so, what do I need to know about it that others on the team already know?&lt;/li&gt;
&lt;li&gt;How does this affect users?&lt;/li&gt;
&lt;li&gt;Do we know how many users are affected, or can we find out?&lt;/li&gt;
&lt;li&gt;If no one has reproduced the issue, could someone make a ticket and spend some short amount of time trying to reproduce it (up to 90 minutes)?&lt;/li&gt;
&lt;li&gt;If we can reproduce it, are there estimates of difficulty on a fix?&lt;/li&gt;
&lt;li&gt;If we were going to deploy it, would anything special be required in that deploy?&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category><category term="software development"></category><category term="project management"></category></entry><entry><title>How to Write a simple xonsh xontrib</title><link href="https://www.dinogalactic.com/how-to-write-a-simple-xonsh-xontrib.html" rel="alternate"></link><published>2019-06-09T06:00:00-04:00</published><updated>2019-06-09T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2019-06-09:/how-to-write-a-simple-xonsh-xontrib.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;xonsh&lt;/code&gt; docs have &lt;a href="https://xon.sh/tutorial_xontrib.html"&gt;a guide on how to write
xontribs&lt;/a&gt;, but I think this guide is a
bit brusk. It says everything it needs to say but leaves out a lot of the
detail that someone like me might need to create a xontrib. So, while I write …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;xonsh&lt;/code&gt; docs have &lt;a href="https://xon.sh/tutorial_xontrib.html"&gt;a guide on how to write
xontribs&lt;/a&gt;, but I think this guide is a
bit brusk. It says everything it needs to say but leaves out a lot of the
detail that someone like me might need to create a xontrib. So, while I write a
xontrib for something else, I've decided to write a more detailed xontrib
composition guide.&lt;/p&gt;
&lt;p&gt;Though this will show you how to create a xontrib, it is presented as a log of
me making my way through this process rather than a traditional step-by-step
how-to.&lt;/p&gt;
&lt;p&gt;When I say "create a xontrib," this phrase deceptively implies there is one
step in creating a xontrib everyone can use. &lt;em&gt;If&lt;/em&gt; you want to share your
xontrib with the world, the involved steps are to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Literally create xontrib code and load it into your xonsh shell.&lt;/li&gt;
&lt;li&gt;Make this xontrib a distribution installable with something like &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Host this xontrib distribution on PyPI.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xon.sh/tutorial_xontrib.html#tell-us-about-your-xontrib"&gt;Register the 
   xontrib&lt;/a&gt;
   with the xonsh project.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once these steps are complete, the xontrib is ready for consumption by the good
folks on the internet. If your aim is to write a xontrib solely for your
personal use and never share it, you could stop at step 1 (but I'd recommend
going to through step 2 as well).&lt;/p&gt;
&lt;p&gt;For this guide, I'll focus only on steps 1 and 2, which should be enough to get
anyone far down the path of developing and using a xontrib they have developed.
Steps 3 is a more general Python distrubtion concern and is outlined in the &lt;a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#packaging-your-project"&gt;Python Packaging User Guide
section on the
topic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Part 4 is covered in the above linked doc on registering xontribs with the
xonsh project.&lt;/p&gt;
&lt;h2&gt;Software versions&lt;/h2&gt;
&lt;p&gt;I'm using &lt;code&gt;xonsh 0.9.3&lt;/code&gt; and &lt;code&gt;Python 3.7.3&lt;/code&gt; for this guide.&lt;/p&gt;
&lt;h2&gt;Step 1: What makes a xontrib?&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;xonsh&lt;/code&gt; docs have &lt;a href="https://xon.sh/tutorial_xontrib.html?highlight=xontrib"&gt;a guide on how to write xontribs&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;These docs briefly tell us how to make a xontrib:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Writing a xontrib is as easy as writing a xonsh or Python file and sticking it in a directory named &lt;code&gt;xontrib/&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That seems so simple! But how could that work? The docs are implying that
creating any &lt;code&gt;.xsh&lt;/code&gt; or &lt;code&gt;.py&lt;/code&gt; file in a directory with the special name
&lt;code&gt;xontrib/&lt;/code&gt; will allow the xontrib to be imported and loaded by &lt;code&gt;xontrib load&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;How could my &lt;code&gt;xontrib/&lt;/code&gt; directory somewhere on my filesystem get picked up and
added to a globally importable &lt;code&gt;xontrib&lt;/code&gt; package? The answer is implicit
namespaces. Implicit namespaces are a convention, introduced in &lt;a href="https://www.python.org/dev/peps/pep-0420/"&gt;PEP
420&lt;/a&gt;, that the import machinery uses
to construct a single package from multiple locations (these locations are
called "partials").&lt;/p&gt;
&lt;p&gt;The specifics of implicit namespaces are a bit more complicated than this, but
for xontribs, this means &lt;em&gt;almost&lt;/em&gt; exactly what we were told. We need to create
a &lt;code&gt;.xsh&lt;/code&gt; or &lt;code&gt;.py&lt;/code&gt; file inside a directory named &lt;code&gt;xontrib/&lt;/code&gt;; however, missing
from the docs is the important point that this &lt;code&gt;xontrib/&lt;/code&gt; directory cannot just
be &lt;em&gt;anywhere&lt;/em&gt; on the file system - it must be available in the Python path.
This should all become clear after an example.&lt;/p&gt;
&lt;p&gt;So, if we follow the implicit namespace conventions for our xontrib, it will be
available on the &lt;code&gt;xontrib&lt;/code&gt; package as a module. &lt;code&gt;xontrib load&lt;/code&gt;, the line you
are probably familiar with if you've &lt;a href="https://xon.sh/xontribs.html?highlight=xontrib%20load"&gt;used a
xontrib&lt;/a&gt;,  takes the
name of a module in the &lt;code&gt;xontrib&lt;/code&gt; package, so &lt;code&gt;xontrib load myxontribname&lt;/code&gt; will load
the &lt;code&gt;xontrib.myxontribname&lt;/code&gt; module as a xontrib.&lt;/p&gt;
&lt;h3&gt;xontrib "Hello World!"&lt;/h3&gt;
&lt;p&gt;Here's a trivial xontrib "Hello World!" example using these concepts.&lt;/p&gt;
&lt;p&gt;My first xontrib, called &lt;code&gt;hello_world&lt;/code&gt; has the following directory structure:&lt;/p&gt;
&lt;p&gt;```
@eddie-ubuntu ~/source/xontrib-hello-world $ tree
.
└── xontrib
    └── hello_world.py&lt;/p&gt;
&lt;p&gt;1 directory, 1 file
```&lt;/p&gt;
&lt;p&gt;I created this by running the following in xonsh inside the &lt;code&gt;xontrib-hello-world&lt;/code&gt; directory:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eddie@eddie-ubuntu ~/source/xontrib-hello-world $ mkdir xontrib
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ echo "print('Hello World!')" &amp;gt; xontrib/hello_world.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, I want to load this xontrib, right? Let's see if xonsh has picked it up yet:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eddie@eddie-ubuntu ~/source/xontrib-hello-world $ xontrib load hello_world
The following xontribs are enabled but not installed:
   hello_world
To install them run
    xpip install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Hmm, this is a strange message, but it all makes sense when considering (1)
what a xontrib is, (2) how implicit namespaces work with xontribs, and (3) how
xontribs are normally installed. To break this message down, let's first tackle
the statement that the xontrib is enabled but not installed. Indeed, we just
enabled this xontrib with &lt;code&gt;xontrib load hello_world&lt;/code&gt;, but by saying the xontrib
is not installed, xonsh is effectively saying that the xontrib code cannot be
found. The second part of the message, which tells us to install the xontrib
via &lt;code&gt;xpip install&lt;/code&gt; would be helpful if we were trying to install a xontrib from
a distribution (a package with a &lt;code&gt;setup.py&lt;/code&gt; that is hosted on
&lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt;, for instance). In our case, it isn't really helpful
since we are trying to load a xontrib locally using the bare minimum components
for creating a xontrib, so we can ignore this second message.&lt;/p&gt;
&lt;p&gt;So, how do we install our trivial xontrib? Since we aren't installing a
distribution package and we're just relying on the import machinery's
understanding of implicit namespace packages, we have to make sure all the
requirements of that convention are satisfied. So far, we have done everything
to create a xontrib except making it discoverable via import machinery under
the &lt;code&gt;xontrib&lt;/code&gt; package. This next step will do that.&lt;/p&gt;
&lt;p&gt;As usual, the way to make a package discoverable by import machinery is to add
its containing directory to the &lt;code&gt;sys.path&lt;/code&gt; global, so let's do that, picking up
immediately where we left off before with the "The following xontribs are
enabled but installed..." message:&lt;/p&gt;
&lt;p&gt;```
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ xontrib load hello_world
The following xontribs are enabled but not installed:
   hello_world
To install them run
    xpip install
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ from xontrib.voxapi import Vox
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ from sys import path
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ path
['/home/eddie/.virtualenvs/xonsh/bin',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python37.zip',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python3.7',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python3.7/lib-dynload',
 '/home/eddie/.virtualenvs/xonsh/lib/python3.7/site-packages',
 '/home/eddie/source/xonsh',
 '/home/eddie/source/xontrib-z']
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ tree
.
└── xontrib
    └── hello_world.py&lt;/p&gt;
&lt;p&gt;1 directory, 1 file
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ path.append(os.getcwd())
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ path
['/home/eddie/.virtualenvs/xonsh/bin',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python37.zip',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python3.7',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python3.7/lib-dynload',
 '/home/eddie/.virtualenvs/xonsh/lib/python3.7/site-packages',
 '/home/eddie/source/xonsh',
 '/home/eddie/source/xontrib-z',
 '/home/eddie/source/xontrib-hello-world']
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ xontrib load hello_world
Hello World!
```&lt;/p&gt;
&lt;p&gt;After adding the current directory, which contains the aforementioned
&lt;code&gt;xontrib/&lt;/code&gt; named directory, we are able to enabled the xontrib, and upon
loading it, we see that xonsh must think it's installed because it runs the
code inside the &lt;code&gt;hello_world.py&lt;/code&gt; file and prints "Hello World!" to the screen.&lt;/p&gt;
&lt;p&gt;That concludes the creation of a super simple xontrib. The rest of this post
will be concerned with building up a distribution out of a simple xontrib. To
spoil the fun a bit, packaging up a xontrib is just a matter of getting
&lt;code&gt;setuptools&lt;/code&gt; to put our xontrib code in a &lt;code&gt;xontrib/&lt;/code&gt; directory that is already
in the &lt;code&gt;sys.path&lt;/code&gt; so that it can be loaded as a module on the &lt;code&gt;xontrib&lt;/code&gt;
package.&lt;/p&gt;
&lt;h2&gt;Step 2: How do we make a xontrib installable with something like pip?&lt;/h2&gt;
&lt;p&gt;Python packages are described for easy installation through the &lt;code&gt;setup.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;I had not created a Python package before this one, though I was acquainted
with &lt;code&gt;setup.py&lt;/code&gt; files through the many examples I saw in GitHub projects, but I
never understood &lt;code&gt;setup.py&lt;/code&gt; very well.&lt;/p&gt;
&lt;p&gt;In the fictional internet time between the last step and this one, I started
working on a real xontrib that I will use for the rest of this guide. This
means I'm abandoning the "Hello World!" xontrib and creating one called
&lt;code&gt;xontrib-per-directory-history&lt;/code&gt;. This will be like &lt;a href="https://github.com/jimhester/per-directory-history"&gt;per-directory-history for
zsh&lt;/a&gt;, which I used for a
long time in my &lt;code&gt;zsh&lt;/code&gt; configuration and now miss dearly. The following steps
should be applicable regardless of the goal of the xontrib you are creating.&lt;/p&gt;
&lt;p&gt;This is the &lt;code&gt;setup.py&lt;/code&gt; configuration I ended up with for this xontrib:&lt;/p&gt;
&lt;p&gt;```
xontrib-per-directory-history&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Per-directory history for xonsh, like zsh's
https://github.com/jimhester/per-directory-history&lt;/p&gt;
&lt;p&gt;Restricts history to those that were executed in the current
directory, with keybindings to switch between that and global history.
"""&lt;/p&gt;
&lt;p&gt;from setuptools import setup&lt;/p&gt;
&lt;p&gt;setup(
    name='xontrib-per-directory-history',
    version='0.1',
    description="Per-directory history for xonsh, like zsh's https://github.com/jimhester/per-directory-history",
    long_description=&lt;strong&gt;doc&lt;/strong&gt;,
    license='MIT',
    url='https://github.com/eppeters/xontrib-per-directory-history',
    author='Eddie Peters',
    author_email='edward.paul.peters@gmail.com',
    packages=['xontrib'],
    package_dir={'xontrib': 'xontrib'},
    package_data={'xontrib': ['*.xsh']},
    platforms='any',
    install_requires=[
        'xonsh&amp;gt;=0.9.3',
    ],
    classifiers=[
        'Environment :: Console',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Topic :: System :: Shells',
        'Topic :: System :: System Shells',
    ]
)
```&lt;/p&gt;
&lt;p&gt;xontrib packages have a particular layout that requires us to write some
boilerplate in the &lt;code&gt;setup.py&lt;/code&gt;. The xonsh docs link to a &lt;a href="https://github.com/laerus/cookiecutter-xontrib"&gt;cookiecutter
template&lt;/a&gt; that you can use to
generate most of this, as well as the file structure, for you if you want.&lt;/p&gt;
&lt;p&gt;Most of the &lt;code&gt;kwargs&lt;/code&gt; passed to &lt;code&gt;setup&lt;/code&gt; define obvious informational metadata
and won't be discussed here. They are useful for attribution, searching on
PyPI, etc., but won't affect the installability of your xontrib package. The
most interesting (read: least obvious) of these informational pieces is the
&lt;code&gt;classifiers&lt;/code&gt; list, which you can find out more about on &lt;a href="https://pypi.org/classifiers/"&gt;PyPI's classifiers
page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following triplet effectively tells &lt;code&gt;setuptools&lt;/code&gt; to do everything we did manually in Step 1 above:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;packages=['xontrib'],
    package_dir={'xontrib': 'xontrib'},
    package_data={'xontrib': ['*.xsh']},&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;packages&lt;/code&gt; says that this package will provide a package named &lt;code&gt;xontrib&lt;/code&gt;,
&lt;code&gt;package_dir&lt;/code&gt; maps this &lt;code&gt;xontrib&lt;/code&gt; package to the directory that contains the
&lt;code&gt;xontrib&lt;/code&gt; package's code, and this &lt;code&gt;package_data&lt;/code&gt; setting tells &lt;code&gt;setuptools&lt;/code&gt; to
not only install &lt;code&gt;.py&lt;/code&gt; files into the package's final installation location,
but to also include any files matching the glob pattern &lt;code&gt;*.xsh&lt;/code&gt;. More details
on this setting can be found in the &lt;a href="build://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files"&gt;setuptools data files 
documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Conveniently, setuptools will install multiple distributions that claim to
create the same packages via the &lt;code&gt;packages&lt;/code&gt; directive without clobbering one
another (assuming their contents don't conflict). What this means for a xontrib
is that all the xontribs that use &lt;code&gt;packages=['xontrib']&lt;/code&gt; will have their &lt;code&gt;.py&lt;/code&gt;
and &lt;code&gt;.xsh&lt;/code&gt; files installed into the &lt;code&gt;site-packages&lt;/code&gt; &lt;code&gt;xontrib&lt;/code&gt; directory
alongside the other installed xontribs' &lt;code&gt;.py&lt;/code&gt; and &lt;code&gt;.xsh&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;Have a look at the
&lt;code&gt;xontrib/&lt;/code&gt; directory inside my &lt;code&gt;xonsh&lt;/code&gt; virtualenv, for instance, which includes
several other xontribs' code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eddie@eddie-ubuntu ~/.virtualenvs/xonsh $ ls lib/python3.7/site-packages/xontrib                                                                  
fzf-widgets.xsh  per-directory-history.xsh  thefuck.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Each of these &lt;code&gt;.xsh&lt;/code&gt; and &lt;code&gt;.py&lt;/code&gt; files were created by installing different
xontrib Python packages using &lt;code&gt;pip&lt;/code&gt;, yet their code lives in the same spot,
discoverable by import machinery using the implicit namespace packages
convention.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;platforms&lt;/code&gt; allows us to specify that a xontrib should be available on one
platform but not another. For mine, I chose &lt;code&gt;'any'&lt;/code&gt; because I didn't expect to
introduce functionality that only works on some of xonsh's supported platforms.&lt;/p&gt;
&lt;p&gt;So, now my xontrib is installable via &lt;code&gt;pip&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;```
eddie@eddie-ubuntu ~/source/xontrib-per-directory-history master $ tree                                                                         &lt;br /&gt;
.
├── setup.py
└── xontrib
    └── per-directory-history.xsh&lt;/p&gt;
&lt;p&gt;1 directory, 2 files&lt;/p&gt;
&lt;p&gt;eddie@eddie-ubuntu ~/source/xontrib-per-directory-history master $ xpip install .                                                               &lt;br /&gt;
Processing /home/eddie/source/xontrib-per-directory-history
Requirement already satisfied: xonsh&amp;gt;=0.9.3 in /home/eddie/source/xonsh (from xontrib-per-directory-history==0.1) (0.9.3)
xontInstalling collected packages: xontrib-per-directory-history
rib   Running setup.py install for xontrib-per-directory-history ... -ldone
Successfully installed xontrib-per-directory-history-0.1
aYou are using pip version 19.0.3, however version 19.1.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
eddie@eddie-ubuntu ~/source/xontrib-per-directory-history master $ xontrib load per-directory-history                                           &lt;br /&gt;
hello world
```&lt;/p&gt;
&lt;p&gt;And, yes, the only code in my xontrib's &lt;code&gt;.py&lt;/code&gt; file right now is &lt;code&gt;print('hello world')&lt;/code&gt;,
but that's beside the point.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope you've found this guide useful for getting started in developing a
xontrib, but obviously I've left out everything regarding what you can do with
a xontrib. xontribs allow hooking into shell functionality, such as that
provided by &lt;a href="https://github.com/prompt-toolkit/python-prompt-toolkit"&gt;prompt
toolkit&lt;/a&gt;. Using
&lt;code&gt;prompt toolkit&lt;/code&gt;'s keybinding functionality would allow you to install a new
keyboard command to run some code, for instance. For more examples and
inspiration for what can be done in a xontrib, I suggest checking out the
&lt;a href="https://github.com/xonsh/xonsh/tree/master/xontrib"&gt;xontribs bundled with xonsh by
default&lt;/a&gt;. Happy hacking!&lt;/p&gt;
&lt;p&gt;For information on sharing your xontrib with the world, check out the links in
the introduction.&lt;/p&gt;</content><category term="xonshiousness"></category><category term="xonsh"></category><category term="shell"></category><category term="linux"></category><category term="python"></category><category term="xontribs"></category></entry><entry><title>A xonsh alias for using pyenv with vox for nice Python virtualenvironments</title><link href="https://www.dinogalactic.com/a-xonsh-alias-for-using-pyenv-with-vox-for-nice-python-virtualenvironments.html" rel="alternate"></link><published>2019-05-23T08:00:00-04:00</published><updated>2019-05-23T08:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2019-05-23:/a-xonsh-alias-for-using-pyenv-with-vox-for-nice-python-virtualenvironments.html</id><summary type="html">&lt;p&gt;Today I started migrating away from virtualenvironments created by &lt;code&gt;pyenv-virtualenv&lt;/code&gt; and started managing virtualenvs with xonsh's built-in &lt;code&gt;vox&lt;/code&gt; utility. (I had previously been using the same old virtualenvironments created by &lt;code&gt;pyenv virtualenv&lt;/code&gt; and just activating them with &lt;code&gt;vox activate ~/.pyenv/versions/virtualenv_symlink'&lt;/code&gt;, but that's for the birds.)&lt;/p&gt;
&lt;p&gt;So, one …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I started migrating away from virtualenvironments created by &lt;code&gt;pyenv-virtualenv&lt;/code&gt; and started managing virtualenvs with xonsh's built-in &lt;code&gt;vox&lt;/code&gt; utility. (I had previously been using the same old virtualenvironments created by &lt;code&gt;pyenv virtualenv&lt;/code&gt; and just activating them with &lt;code&gt;vox activate ~/.pyenv/versions/virtualenv_symlink'&lt;/code&gt;, but that's for the birds.)&lt;/p&gt;
&lt;p&gt;So, one thing I wanted to do is have &lt;code&gt;vox&lt;/code&gt; use my &lt;code&gt;pyenv&lt;/code&gt;-detected &lt;code&gt;python&lt;/code&gt; bin whenver I created new virtualenvironments, if I didn't specify an override &lt;code&gt;python&lt;/code&gt; bin. In other words, I wanted stuff like the &lt;code&gt;.python-version&lt;/code&gt; file and the &lt;code&gt;pyenv shell&lt;/code&gt; command to be respected by &lt;code&gt;vox&lt;/code&gt; without adding all that functionality to &lt;code&gt;vox&lt;/code&gt; proper. This is probably a pretty specific use case, though if more people need it, lmk!&lt;/p&gt;
&lt;p&gt;I came up with an alias that wraps the original &lt;code&gt;vox&lt;/code&gt; alias (that's how the &lt;code&gt;vox&lt;/code&gt; command is loaded into the environment, as an alias).&lt;/p&gt;
&lt;p&gt;Before I override it, I save the previous &lt;code&gt;vox&lt;/code&gt; alias in a variable - the &lt;code&gt;vox&lt;/code&gt; alias normally just maps to a callable, so I saved the callable. This is because I want to call the previous &lt;code&gt;vox&lt;/code&gt; functionality inside of my new alias, which I am naming &lt;code&gt;'vox'&lt;/code&gt;, and I would end up with unwanted recursion if I called my new alias function from inside itself.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;normal_vox &lt;span style="color: #555555"&gt;=&lt;/span&gt; aliases[&lt;span style="color: #CC3300"&gt;&amp;#39;vox&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Next I define a function that does a simple check for whether I had specified an interpreter in the arguments, and if not, it prepends the &lt;code&gt;pyenv&lt;/code&gt;-detected &lt;code&gt;python&lt;/code&gt; bin to the argument list.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;pyenv_vox&lt;/span&gt;(argument_list, &lt;span style="color: #555555"&gt;**&lt;/span&gt;kwargs):
    &lt;span style="color: #CC3300; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Use pyenv-detected python to create environments if no other interpreter is specified.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;f&amp;#39;Using alias for vox in .xonshrc&amp;#39;&lt;/span&gt;)
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #336666"&gt;len&lt;/span&gt;(argument_list) &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; argument_list[&lt;span style="color: #FF6600"&gt;0&lt;/span&gt;] &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;new&amp;#39;&lt;/span&gt; \
            &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;--interpreter&amp;#39;&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;in&lt;/span&gt; argument_list \
            &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;-p&amp;#39;&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;in&lt;/span&gt; argument_list:
            python &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;(pyenv which python)&lt;span style="color: #555555"&gt;.&lt;/span&gt;strip()
            &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;f&amp;#39;Using pyenv-detected python to create new environment: &lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;python&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;)
            argument_list &lt;span style="color: #555555"&gt;=&lt;/span&gt; [&lt;span style="color: #CC3300"&gt;&amp;#39;new&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;--interpreter&amp;#39;&lt;/span&gt;, python] &lt;span style="color: #555555"&gt;+&lt;/span&gt; argument_list[&lt;span style="color: #FF6600"&gt;1&lt;/span&gt;:]
    &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; normal_vox(argument_list, &lt;span style="color: #555555"&gt;**&lt;/span&gt;kwargs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Regardless of whether that modification is made to the argument list, it calls the original &lt;code&gt;vox&lt;/code&gt; alias with the argument list, so other &lt;code&gt;vox&lt;/code&gt; commands effectively pass through untouched.&lt;/p&gt;
&lt;p&gt;Finally, I set &lt;code&gt;aliases['vox']&lt;/code&gt; to this new alias function.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aliases[&lt;span style="color: #CC3300"&gt;&amp;#39;vox&amp;#39;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; pyenv_vox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;And, that's it. With the &lt;code&gt;print()&lt;/code&gt; statements included in the alias function, you can see what happens.&lt;/p&gt;
&lt;p&gt;It works, too:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eddie@eddie-ubuntu ~/website master $ vox new excitement
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Using pyenv-detected python to create new environment: /home/eddie/.pyenv/versions/3.7.3/bin/python
Creating environment...
Environment &lt;span style="color: #CC3300"&gt;&amp;#39;excitement&amp;#39;&lt;/span&gt; created. Activate it with &lt;span style="color: #CC3300"&gt;&amp;quot;vox activate excitement&amp;quot;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Other commands are untouched by the alias - well, at least not substantively. The logging still lets you know you're using the alias.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eddie@eddie-ubuntu ~/website master $ vox ls
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Available environments:
butter
excitement
website
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can set up pyenv to use a specific python, and that python will be used for the virtualenv:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eddie@eddie-ubuntu ~ &lt;span style="color: #555555"&gt;[&lt;/span&gt;&lt;span style="color: #FF6600"&gt;1&lt;/span&gt;&lt;span style="color: #555555"&gt;]&lt;/span&gt;$ pyenv &lt;span style="color: #336666"&gt;local&lt;/span&gt; &lt;span style="color: #FF6600"&gt;3&lt;/span&gt;.7.3
eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;3&lt;/span&gt;.7.3
eddie@eddie-ubuntu ~ $ pyenv version
&lt;span style="color: #FF6600"&gt;3&lt;/span&gt;.7.3 &lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #336666"&gt;set&lt;/span&gt; by /home/eddie/.python-version&lt;span style="color: #555555"&gt;)&lt;/span&gt;
eddie@eddie-ubuntu ~ $ vox new demo-3.7.3
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Using pyenv-detected python to create new environment: /home/eddie/.pyenv/versions/3.7.3/bin/python
Creating environment...
Environment &lt;span style="color: #CC3300"&gt;&amp;#39;demo-3.7.3&amp;#39;&lt;/span&gt; created. Activate it with &lt;span style="color: #CC3300"&gt;&amp;quot;vox activate demo-3.7.3&amp;quot;&lt;/span&gt;.

eddie@eddie-ubuntu ~ $ pyenv &lt;span style="color: #336666"&gt;local&lt;/span&gt; &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
eddie@eddie-ubuntu ~ $ vox new demo
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Using pyenv-detected python to create new environment: /home/eddie/.pyenv/versions/2.7.15/bin/python
Creating environment...
New python executable in /home/eddie/.virtualenvs/demo/bin/python
Installing setuptools, pip, wheel...done.
Environment &lt;span style="color: #CC3300"&gt;&amp;#39;demo&amp;#39;&lt;/span&gt; created. Activate it with &lt;span style="color: #CC3300"&gt;&amp;quot;vox activate demo&amp;quot;&lt;/span&gt;.

eddie@eddie-ubuntu ~ $ vox activate demo
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Activated &lt;span style="color: #CC3300"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;.

&lt;span style="color: #555555"&gt;(&lt;/span&gt;demo&lt;span style="color: #555555"&gt;)&lt;/span&gt; eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
&lt;span style="color: #555555"&gt;(&lt;/span&gt;demo&lt;span style="color: #555555"&gt;)&lt;/span&gt; eddie@eddie-ubuntu ~ $ vox deactivate
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Deactivated &lt;span style="color: #CC3300"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;.

eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
eddie@eddie-ubuntu ~ $ vox activate demo-3.7.3
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Activated &lt;span style="color: #CC3300"&gt;&amp;quot;demo-3.7.3&amp;quot;&lt;/span&gt;.

&lt;span style="color: #555555"&gt;(&lt;/span&gt;demo-3.7.3&lt;span style="color: #555555"&gt;)&lt;/span&gt; eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;3&lt;/span&gt;.7.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can still override pyenv's current python when creating virtualenvs:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eddie@eddie-ubuntu ~ $ pyenv &lt;span style="color: #336666"&gt;local&lt;/span&gt; &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
eddie@eddie-ubuntu ~ &lt;span style="color: #555555"&gt;[&lt;/span&gt;&lt;span style="color: #FF6600"&gt;2&lt;/span&gt;&lt;span style="color: #555555"&gt;]&lt;/span&gt;$ vox new -p /usr/bin/python demo-system-python
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Creating environment...
New python executable in /home/eddie/.virtualenvs/demo-system-python/bin/python
Installing setuptools, pip, wheel...done.
Environment &lt;span style="color: #CC3300"&gt;&amp;#39;demo-system-python&amp;#39;&lt;/span&gt; created. Activate it with &lt;span style="color: #CC3300"&gt;&amp;quot;vox activate demo-system-python&amp;quot;&lt;/span&gt;.
eddie@eddie-ubuntu ~ $ /usr/bin/python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.16
eddie@eddie-ubuntu ~ $ vox activate demo-system-python
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Activated &lt;span style="color: #CC3300"&gt;&amp;quot;demo-system-python&amp;quot;&lt;/span&gt;.
&lt;span style="color: #555555"&gt;(&lt;/span&gt;demo-system-python&lt;span style="color: #555555"&gt;)&lt;/span&gt; eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.16
&lt;span style="color: #555555"&gt;(&lt;/span&gt;demo-system-python&lt;span style="color: #555555"&gt;)&lt;/span&gt; eddie@eddie-ubuntu ~ $ vox deactivate
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Deactivated &lt;span style="color: #CC3300"&gt;&amp;quot;demo-system-python&amp;quot;&lt;/span&gt;.
eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I'll upload the code sometime, and I'll update this page with it, hopefully, but you've got what you need :)&lt;/p&gt;</content><category term="xonshiousness"></category><category term="xonsh"></category><category term="shell"></category><category term="linux"></category><category term="python"></category></entry><entry><title>init</title><link href="https://www.dinogalactic.com/init.html" rel="alternate"></link><published>2019-05-22T02:55:00-04:00</published><updated>2019-05-22T02:55:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2019-05-22:/init.html</id><summary type="html">&lt;p&gt;First ever post on website.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Initial.&lt;/p&gt;</content><category term="misc"></category></entry></feed>