<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>dinogalactic - xonshiousness</title><link href="https://www.dinogalactic.com/" rel="alternate"></link><link href="https://www.dinogalactic.com/feeds/xonshiousness.atom.xml" rel="self"></link><id>https://www.dinogalactic.com/</id><updated>2022-08-17T06:00:00-04:00</updated><entry><title>Using Common Fate's Granted CLI tool for AWS profiles with Xonsh shell</title><link href="https://www.dinogalactic.com/using-common-fates-granted-cli-tool-for-aws-profiles-with-xonsh-shell.html" rel="alternate"></link><published>2022-08-17T06:00:00-04:00</published><updated>2022-08-17T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2022-08-17:/using-common-fates-granted-cli-tool-for-aws-profiles-with-xonsh-shell.html</id><summary type="html">&lt;p&gt;Using &lt;a href="https://github.com/common-fate/granted"&gt;Common Fate's excellent Granted CLI tool for AWS profiles&lt;/a&gt; with &lt;a href="https://xon.sh/"&gt;Xonsh shell&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;⚠️&lt;em&gt;UPDATE&lt;/em&gt;⚠️: I recently made this into a proper xontrib that can be installed via &lt;code&gt;xpip&lt;/code&gt;. Have a look at &lt;a href="https://pypi.org/project/xontrib-common-fate-granted/"&gt;the PyPI project&lt;/a&gt; or &lt;a href="https://github.com/eppeters/xontrib-common-fate-granted"&gt;the GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #0099FF; font-style: italic"&gt;#!/usr/bin/env xonsh&lt;/span&gt;

&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;_assume&lt;/span&gt;(args):
    AWS_VARIABLE_NAMES &lt;span style="color: #555555"&gt;=&lt;/span&gt; [
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Using &lt;a href="https://github.com/common-fate/granted"&gt;Common Fate's excellent Granted CLI tool for AWS profiles&lt;/a&gt; with &lt;a href="https://xon.sh/"&gt;Xonsh shell&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;⚠️&lt;em&gt;UPDATE&lt;/em&gt;⚠️: I recently made this into a proper xontrib that can be installed via &lt;code&gt;xpip&lt;/code&gt;. Have a look at &lt;a href="https://pypi.org/project/xontrib-common-fate-granted/"&gt;the PyPI project&lt;/a&gt; or &lt;a href="https://github.com/eppeters/xontrib-common-fate-granted"&gt;the GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #0099FF; font-style: italic"&gt;#!/usr/bin/env xonsh&lt;/span&gt;

&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;_assume&lt;/span&gt;(args):
    AWS_VARIABLE_NAMES &lt;span style="color: #555555"&gt;=&lt;/span&gt; [
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_ACCESS_KEY_ID&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_SECRET_ACCESS_KEY&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_SESSION_TOKEN&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_PROFILE&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_REGION&amp;quot;&lt;/span&gt;,
        &lt;span style="color: #CC3300"&gt;&amp;quot;AWS_SESSION_EXPIRATION&amp;quot;&lt;/span&gt;
    ]

    &lt;span style="color: #003333"&gt;$GRANTED_ALIAS_CONFIGURED&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;

    &lt;span style="color: #003333"&gt;$GRANTED_OUTPUT&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;(&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;assumego&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;@&lt;/span&gt;(args))

    granted_flag, &lt;span style="color: #555555"&gt;*&lt;/span&gt;aws_variable_values &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #003333"&gt;$GRANTED_OUTPUT&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;strip(&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;)&lt;span style="color: #555555"&gt;.&lt;/span&gt;split(&lt;span style="color: #CC3300"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)

    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; granted_flag &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;GrantedOutput&amp;quot;&lt;/span&gt;:
        &lt;span style="color: #0099FF; font-style: italic"&gt;# Remove the first line of output&lt;/span&gt;
        granted_output &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;join(&lt;span style="color: #003333"&gt;$GRANTED_OUTPUT&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;split(&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;)[&lt;span style="color: #FF6600"&gt;1&lt;/span&gt;:])
        &lt;span style="color: #336666"&gt;print&lt;/span&gt;(granted_output)
        exit()

    &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; aws_variable_name, aws_variable_value &lt;span style="color: #000000; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #336666"&gt;zip&lt;/span&gt;(AWS_VARIABLE_NAMES, aws_variable_values):
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; granted_flag &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;GrantedDesume&amp;quot;&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;or&lt;/span&gt; aws_variable_value &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;None&amp;quot;&lt;/span&gt;:
            &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;{&lt;span style="color: #555555"&gt;...&lt;/span&gt;}&lt;span style="color: #555555"&gt;.&lt;/span&gt;pop(aws_variable_name, &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;)
            &lt;span style="color: #006699; font-weight: bold"&gt;continue&lt;/span&gt;
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; granted_flag &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;GrantedAssume&amp;quot;&lt;/span&gt;:
            &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;{&lt;span style="color: #555555"&gt;...&lt;/span&gt;}[aws_variable_name] &lt;span style="color: #555555"&gt;=&lt;/span&gt; aws_variable_value

    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; granted_flag &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;GrantedOutput&amp;quot;&lt;/span&gt;:
        &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; aws_variable_name, aws_variable_value &lt;span style="color: #000000; font-weight: bold"&gt;in&lt;/span&gt; &lt;span style="color: #336666"&gt;zip&lt;/span&gt;(AWS_VARIABLE_NAMES, aws_variable_values):
            &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; aws_variable_value &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;None&amp;quot;&lt;/span&gt;:
                &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;{&lt;span style="color: #555555"&gt;...&lt;/span&gt;}&lt;span style="color: #555555"&gt;.&lt;/span&gt;pop(aws_variable_name, &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;)
                &lt;span style="color: #006699; font-weight: bold"&gt;continue&lt;/span&gt;
            &lt;span style="color: #006699; font-weight: bold"&gt;$&lt;/span&gt;{&lt;span style="color: #555555"&gt;...&lt;/span&gt;}[aws_variable_name] &lt;span style="color: #555555"&gt;=&lt;/span&gt; aws_variable_value

    &lt;span style="color: #006699; font-weight: bold"&gt;del&lt;/span&gt; &lt;span style="color: #003333"&gt;$GRANTED_ALIAS_CONFIGURED&lt;/span&gt;

aliases[&lt;span style="color: #CC3300"&gt;&amp;#39;assume&amp;#39;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; _assume
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Place in your &lt;code&gt;xontrib&lt;/code&gt; directory. And, in &lt;code&gt;.xonshrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xontrib load assume
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="xonshiousness"></category><category term="xonsh"></category><category term="python"></category><category term="aws"></category></entry><entry><title>Using NVM (Node Version Manager) with Xonsh shell</title><link href="https://www.dinogalactic.com/using-nvm-node-version-manager-with-xonsh-shell.html" rel="alternate"></link><published>2022-06-02T06:00:00-04:00</published><updated>2022-06-02T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2022-06-02:/using-nvm-node-version-manager-with-xonsh-shell.html</id><summary type="html">&lt;p&gt;To use &lt;a href=""&gt;nvm (Node Version Manager)&lt;/a&gt; with &lt;a href="https://xon.sh/"&gt;Xonsh shell&lt;/a&gt;, place the following in your &lt;code&gt;.xonshrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #0099FF; font-style: italic"&gt;# This ensures a stable symlink is always present for the currently&lt;/span&gt;
&lt;span style="color: #0099FF; font-style: italic"&gt;# activated Node version&lt;/span&gt;
&lt;span style="color: #003333"&gt;$NVM_SYMLINK_CURRENT&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; 
&lt;span style="color: #003333"&gt;$NVM_DIR&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;f&amp;quot;&lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;HOME&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;/.nvm&amp;quot;&lt;/span&gt;
source&lt;span style="color: #555555"&gt;-&lt;/span&gt;bash &lt;span style="color: #CC3300"&gt;f&amp;quot;&lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;NVM_DIR&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;/nvm.sh&amp;quot;&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# This loads nvm&lt;/span&gt;
&lt;span style="color: #0099FF; font-style: italic"&gt;# This ensures …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;To use &lt;a href=""&gt;nvm (Node Version Manager)&lt;/a&gt; with &lt;a href="https://xon.sh/"&gt;Xonsh shell&lt;/a&gt;, place the following in your &lt;code&gt;.xonshrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #0099FF; font-style: italic"&gt;# This ensures a stable symlink is always present for the currently&lt;/span&gt;
&lt;span style="color: #0099FF; font-style: italic"&gt;# activated Node version&lt;/span&gt;
&lt;span style="color: #003333"&gt;$NVM_SYMLINK_CURRENT&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; 
&lt;span style="color: #003333"&gt;$NVM_DIR&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;f&amp;quot;&lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;HOME&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;/.nvm&amp;quot;&lt;/span&gt;
source&lt;span style="color: #555555"&gt;-&lt;/span&gt;bash &lt;span style="color: #CC3300"&gt;f&amp;quot;&lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;NVM_DIR&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;/nvm.sh&amp;quot;&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# This loads nvm&lt;/span&gt;
&lt;span style="color: #0099FF; font-style: italic"&gt;# This ensures the current node is always used&lt;/span&gt;
&lt;span style="color: #003333"&gt;$PATH&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;insert(&lt;span style="color: #FF6600"&gt;0&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;f&amp;quot;&lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;NVM_DIR&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;/current/bin&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="xonshiousness"></category><category term="xonsh"></category><category term="python"></category><category term="software development"></category><category term="shell"></category></entry><entry><title>Digging into xonsh history backends</title><link href="https://www.dinogalactic.com/digging-into-xonsh-history-backends.html" rel="alternate"></link><published>2019-06-10T06:00:00-04:00</published><updated>2019-06-10T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2019-06-10:/digging-into-xonsh-history-backends.html</id><summary type="html">&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I want to write a per-directory-history xontrib for xonsh, like &lt;a href="https://github.com/jimhester/per-directory-history"&gt;the one I used for zsh&lt;/a&gt;. The piece of information that that I need to do this is missing from xonsh history entries right now: the working directory a historical command was executed in. &lt;a href="https://github.com/jimhester/per-directory-history"&gt;jimhester/per-directory-history&lt;/a&gt; tracks this by …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I want to write a per-directory-history xontrib for xonsh, like &lt;a href="https://github.com/jimhester/per-directory-history"&gt;the one I used for zsh&lt;/a&gt;. The piece of information that that I need to do this is missing from xonsh history entries right now: the working directory a historical command was executed in. &lt;a href="https://github.com/jimhester/per-directory-history"&gt;jimhester/per-directory-history&lt;/a&gt; tracks this by hooking into zsh's history searching and creation commands and putting each command in two history files, a global one and one specifically for the directory the command was executed in. I want to write my xontrib in the most xonshious (my word for if something works with the xonsh philosophy) way, so I don't want to rip this implementation scheme from &lt;code&gt;per-directory-history&lt;/code&gt; and jam it into xonsh where there's a better way. So I have to see where I have to collect, store, and read this metadata.&lt;/p&gt;
&lt;p&gt;Some ideas I have so far are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;add a new history backend that writes entries with the additional metadata of wherever the command was executed&lt;/li&gt;
&lt;li&gt;essentially step (1), but instead of adding a new history backend, augment whatever history backend is in use with this new functionlity (composition by way of monkey-patching)&lt;/li&gt;
&lt;li&gt;listen to some existing hooks/events for xonsh history lookup and additions and add the functionality there&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or some combination of the above, depending on what I find.&lt;/p&gt;
&lt;p&gt;This post documents my exploration of how history is implemented in xonsh.&lt;/p&gt;
&lt;p&gt;I'll pay particular attention to how history backends work with the shell backend abstraction so that I can write a xontrib that is as agnostic as possible about the shell implementation in use (&lt;code&gt;ptk&lt;/code&gt;, &lt;code&gt;ptk2&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt;, &lt;code&gt;jupyter&lt;/code&gt;, etc.).&lt;/p&gt;
&lt;h2&gt;Reading the existing documentation first&lt;/h2&gt;
&lt;p&gt;So I figured that I should read any existing documentation first, since it's possible that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The xonsh docs already include a section that tell me how to do this or something close to it&lt;/li&gt;
&lt;li&gt;I might find learn something that I realize is undocumented, and then I can contribute that back to the project docs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I found three documents dealing with history on &lt;a href="https://xon.sh"&gt;xon.sh&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xon.sh/tutorial_hist.html"&gt;Tutorial: History&lt;/a&gt; - explains the richer model of history that xonsh offers, and introduces &lt;code&gt;history&lt;/code&gt; command usage&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xon.sh/tutorial_history_backend.html"&gt;Tutorial: Writing Your Own History Backend&lt;/a&gt; - walks through authoring a new history backend with a CouchDB-backed history backend and replacing the default history backend with this new one&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xon.sh/api/history/index.html"&gt;History API&lt;/a&gt; - &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While each of these is good at doing what it says, notice that none of them discusses how history backends are instantiated or how history entries are constructed during shell execution. The History API docs come closest, but that's cheating because those docs are autogenerated from docstrings in the Python source for xonsh.&lt;/p&gt;
&lt;h2&gt;How history entries are managed&lt;/h2&gt;
&lt;p&gt;Since there is no smoking gun in the Xonsh docs talking about how history backends are created and where the components of history entries come from, I decided I have to dig into the xonsh code now rather than later.&lt;/p&gt;
&lt;p&gt;Rather than just explain when and how xonsh creates new history entries (which I will do some of), I also want to explain how I came to this understanding, since it's incredibly unlikely you're reading this doc just to learn how to write a clone of &lt;a href="https://github.com/jimhester/per-directory-history"&gt;jimhester/per-directory-history&lt;/a&gt;`.&lt;/p&gt;
&lt;p&gt;xonsh has support for multiple history backends, as we know. It ships with 3 backend implementations: &lt;a href=""&gt;history.json.JsonHistory&lt;/a&gt; and &lt;a href=""&gt;history.sqlite.SqliteHistory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These backends are implementations of the history backend abstraction &lt;a href=""&gt;history.base.History&lt;/a&gt;. &lt;code&gt;history.base.History&lt;/code&gt; doesn't do anything useful on its own - it is just inherited by implementations and defines the things the xonsh shell expects a history backend to be able to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt; (add something to the history)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flush&lt;/code&gt; (force whatever is in memory to persist to the backend's storage, such as disk)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;items&lt;/code&gt; (getting items for the current history session)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all_items&lt;/code&gt; (getting... all the items)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt; (providing shell history info)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run_gc&lt;/code&gt; (garbage collecting).&lt;/li&gt;
&lt;li&gt;It also allows list-like behavior via index access and slicing with &lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__"&gt;&lt;strong&gt;getitem&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fact that history backends implement &lt;code&gt;history.base.History&lt;/code&gt; is our first clue into how xonsh backends work. This fact means the xonsh shell does not interact directly with a history backend, so the shell's code doesn't know what backend it's working with - this is handled by our good friend polymorphism. For understanding how history entries are created, this establishes some constraints on what a history backend can accept as input - if the central part of the xonsh shell's code is interacting with a unique history backend through a generic abstraction, that unique history backend cannot use input that isn't passed into the generic abstraction. In other words, the xonsh shell gives a particular history item data structure to every history backend, no matter how special that history backend is, and if we want the history backend to be able to act on some other piece of data (such as the working directory the history item was executed in!), we have to alter that data structure.&lt;/p&gt;
&lt;h2&gt;The history entry data structure&lt;/h2&gt;
&lt;p&gt;I had trouble finding where these entries were defined and where they were &lt;code&gt;append&lt;/code&gt;ed to the history backend, but I soon realized I could drop an &lt;code&gt;ipdb&lt;/code&gt; break statement into my active history backend's &lt;code&gt;append&lt;/code&gt; method (&lt;code&gt;JsonHistory.append&lt;/code&gt;) and use the debugger's &lt;code&gt;where&lt;/code&gt; command to get a stacktrace, leading me directly to where xonsh appends history to the backend. I started up my debuggified xonsh, ran a command, watched as it paused in &lt;code&gt;ipdb&lt;/code&gt;, and got the traceback:&lt;/p&gt;
&lt;p&gt;(Note that you should make sure &lt;code&gt;$XONSH_DEBUG&lt;/code&gt; is on or, alternatively, install &lt;code&gt;xonsh&lt;/code&gt; as an &lt;a href=""&gt;editable package&lt;/a&gt; to avoid &lt;a href=""&gt;almalgamation&lt;/a&gt; and can see your changes right away without re-running &lt;code&gt;setup.py&lt;/code&gt;.)&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eddie@eddie-ubuntu ~ $ &lt;span style="color: #336666"&gt;echo&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;hey&amp;#39;&lt;/span&gt;                                                                                                                 
hey
&amp;gt; /home/eddie/source/xonsh/xonsh/history/json.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;353&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;append&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;352&lt;/span&gt;         import ipdb; ipdb.set_trace&lt;span style="color: #555555"&gt;()&lt;/span&gt;
--&amp;gt; &lt;span style="color: #FF6600"&gt;353&lt;/span&gt;         self.buffer.append&lt;span style="color: #555555"&gt;(&lt;/span&gt;cmd&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;354&lt;/span&gt;         self._len +&lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# must come before flushing&lt;/span&gt;

ipdb&amp;gt; where
  /home/eddie/.virtualenvs/xonsh/bin/xonsh&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;7&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;&amp;lt;module&amp;gt;&lt;span style="color: #555555"&gt;()&lt;/span&gt;
      &lt;span style="color: #FF6600"&gt;5&lt;/span&gt; &lt;span style="color: #003333"&gt;__file__&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;/home/eddie/source/xonsh/scripts/xonsh&amp;#39;&lt;/span&gt;
      &lt;span style="color: #FF6600"&gt;6&lt;/span&gt; with open&lt;span style="color: #555555"&gt;(&lt;/span&gt;__file__&lt;span style="color: #555555"&gt;)&lt;/span&gt; as f:
----&amp;gt; &lt;span style="color: #FF6600"&gt;7&lt;/span&gt;     exec&lt;span style="color: #555555"&gt;(&lt;/span&gt;compile&lt;span style="color: #555555"&gt;(&lt;/span&gt;f.read&lt;span style="color: #555555"&gt;()&lt;/span&gt;, __file__, &lt;span style="color: #CC3300"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span style="color: #555555"&gt;))&lt;/span&gt;

  /home/eddie/source/xonsh/scripts/xonsh&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;4&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;&amp;lt;module&amp;gt;&lt;span style="color: #555555"&gt;()&lt;/span&gt;
      &lt;span style="color: #FF6600"&gt;2&lt;/span&gt; 
      &lt;span style="color: #FF6600"&gt;3&lt;/span&gt; from xonsh.main import main
----&amp;gt; &lt;span style="color: #FF6600"&gt;4&lt;/span&gt; main&lt;span style="color: #555555"&gt;()&lt;/span&gt;

  /home/eddie/source/xonsh/xonsh/main.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;402&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;main&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;401&lt;/span&gt;         &lt;span style="color: #003333"&gt;args&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; premain&lt;span style="color: #555555"&gt;(&lt;/span&gt;argv&lt;span style="color: #555555"&gt;)&lt;/span&gt;
--&amp;gt; &lt;span style="color: #FF6600"&gt;402&lt;/span&gt;         &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; main_xonsh&lt;span style="color: #555555"&gt;(&lt;/span&gt;args&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;403&lt;/span&gt;     except Exception as err:

  /home/eddie/source/xonsh/xonsh/main.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;431&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;main_xonsh&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;430&lt;/span&gt;             try:
--&amp;gt; &lt;span style="color: #FF6600"&gt;431&lt;/span&gt;                 shell.shell.cmdloop&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;432&lt;/span&gt;             finally:

  /home/eddie/source/xonsh/xonsh/ptk2/shell.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;194&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;cmdloop&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;193&lt;/span&gt;                     &lt;span style="color: #003333"&gt;line&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; self.precmd&lt;span style="color: #555555"&gt;(&lt;/span&gt;line&lt;span style="color: #555555"&gt;)&lt;/span&gt;
--&amp;gt; &lt;span style="color: #FF6600"&gt;194&lt;/span&gt;                     self.default&lt;span style="color: #555555"&gt;(&lt;/span&gt;line&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;195&lt;/span&gt;             except &lt;span style="color: #555555"&gt;(&lt;/span&gt;KeyboardInterrupt, SystemExit&lt;span style="color: #555555"&gt;)&lt;/span&gt;:

  /home/eddie/source/xonsh/xonsh/base_shell.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;375&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;default&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;374&lt;/span&gt;             &lt;span style="color: #003333"&gt;tee_out&lt;/span&gt; &lt;span style="color: #555555"&gt;=&lt;/span&gt; tee.getvalue&lt;span style="color: #555555"&gt;()&lt;/span&gt;
--&amp;gt; &lt;span style="color: #FF6600"&gt;375&lt;/span&gt;             self._append_history&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #003333"&gt;inp&lt;/span&gt;&lt;span style="color: #555555"&gt;=&lt;/span&gt;src, &lt;span style="color: #003333"&gt;ts&lt;/span&gt;&lt;span style="color: #555555"&gt;=[&lt;/span&gt;ts0, ts1&lt;span style="color: #555555"&gt;]&lt;/span&gt;, &lt;span style="color: #003333"&gt;tee_out&lt;/span&gt;&lt;span style="color: #555555"&gt;=&lt;/span&gt;tee_out&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;376&lt;/span&gt;             self.accumulated_inputs +&lt;span style="color: #555555"&gt;=&lt;/span&gt; src

  /home/eddie/source/xonsh/xonsh/base_shell.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;410&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;_append_history&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;409&lt;/span&gt;         &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist is not None:
--&amp;gt; &lt;span style="color: #FF6600"&gt;410&lt;/span&gt;             hist.append&lt;span style="color: #555555"&gt;(&lt;/span&gt;info&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;411&lt;/span&gt;             hist.last_cmd_rtn &lt;span style="color: #555555"&gt;=&lt;/span&gt; hist.last_cmd_out &lt;span style="color: #555555"&gt;=&lt;/span&gt; None

&amp;gt; /home/eddie/source/xonsh/xonsh/history/json.py&lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #FF6600"&gt;353&lt;/span&gt;&lt;span style="color: #555555"&gt;)&lt;/span&gt;append&lt;span style="color: #555555"&gt;()&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;352&lt;/span&gt;         import ipdb; ipdb.set_trace&lt;span style="color: #555555"&gt;()&lt;/span&gt;
--&amp;gt; &lt;span style="color: #FF6600"&gt;353&lt;/span&gt;         self.buffer.append&lt;span style="color: #555555"&gt;(&lt;/span&gt;cmd&lt;span style="color: #555555"&gt;)&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;354&lt;/span&gt;         self._len +&lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# must come before flushing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maybe that wouldn't have been so hard to track down manually, but history is appended to in &lt;code&gt;BaseShell.default()&lt;/code&gt; with a method called &lt;code&gt;BaseShell._append_history()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what kind of information is passed to &lt;code&gt;_append_history&lt;/code&gt;?&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;default&lt;/span&gt;(&lt;span style="color: #336666"&gt;self&lt;/span&gt;, line):
    &lt;span style="color: #CC3300; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Implements code execution.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    line &lt;span style="color: #555555"&gt;=&lt;/span&gt; line &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; line&lt;span style="color: #555555"&gt;.&lt;/span&gt;endswith(&lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt;) &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt; line &lt;span style="color: #555555"&gt;+&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt;
    src, code &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;push(line)
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; code &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
        &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt;

    events&lt;span style="color: #555555"&gt;.&lt;/span&gt;on_precommand&lt;span style="color: #555555"&gt;.&lt;/span&gt;fire(cmd&lt;span style="color: #555555"&gt;=&lt;/span&gt;src)

    env &lt;span style="color: #555555"&gt;=&lt;/span&gt; builtins&lt;span style="color: #555555"&gt;.&lt;/span&gt;__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;env
    hist &lt;span style="color: #555555"&gt;=&lt;/span&gt; builtins&lt;span style="color: #555555"&gt;.&lt;/span&gt;__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;history  &lt;span style="color: #0099FF; font-style: italic"&gt;# pylint: disable=no-member&lt;/span&gt;
    ts1 &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;
    enc &lt;span style="color: #555555"&gt;=&lt;/span&gt; env&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;quot;XONSH_ENCODING&amp;quot;&lt;/span&gt;)
    err &lt;span style="color: #555555"&gt;=&lt;/span&gt; env&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;quot;XONSH_ENCODING_ERRORS&amp;quot;&lt;/span&gt;)
    tee &lt;span style="color: #555555"&gt;=&lt;/span&gt; Tee(encoding&lt;span style="color: #555555"&gt;=&lt;/span&gt;enc, errors&lt;span style="color: #555555"&gt;=&lt;/span&gt;err)
    &lt;span style="color: #006699; font-weight: bold"&gt;try&lt;/span&gt;:
        ts0 &lt;span style="color: #555555"&gt;=&lt;/span&gt; time&lt;span style="color: #555555"&gt;.&lt;/span&gt;time()
        run_compiled_code(code, &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;ctx, &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;quot;single&amp;quot;&lt;/span&gt;)
        ts1 &lt;span style="color: #555555"&gt;=&lt;/span&gt; time&lt;span style="color: #555555"&gt;.&lt;/span&gt;time()
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
            hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #FF6600"&gt;0&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# returncode for success&lt;/span&gt;
    &lt;span style="color: #006699; font-weight: bold"&gt;except&lt;/span&gt; XonshError &lt;span style="color: #006699; font-weight: bold"&gt;as&lt;/span&gt; e:
        &lt;span style="color: #336666"&gt;print&lt;/span&gt;(e&lt;span style="color: #555555"&gt;.&lt;/span&gt;args[&lt;span style="color: #FF6600"&gt;0&lt;/span&gt;], file&lt;span style="color: #555555"&gt;=&lt;/span&gt;sys&lt;span style="color: #555555"&gt;.&lt;/span&gt;stderr)
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
            hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# return code for failure&lt;/span&gt;
    &lt;span style="color: #006699; font-weight: bold"&gt;except&lt;/span&gt; &lt;span style="color: #CC0000; font-weight: bold"&gt;Exception&lt;/span&gt;:  &lt;span style="color: #0099FF; font-style: italic"&gt;# pylint: disable=broad-except&lt;/span&gt;
        print_exception()
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
            hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;  &lt;span style="color: #0099FF; font-style: italic"&gt;# return code for failure&lt;/span&gt;
    &lt;span style="color: #006699; font-weight: bold"&gt;finally&lt;/span&gt;:
        ts1 &lt;span style="color: #555555"&gt;=&lt;/span&gt; ts1 &lt;span style="color: #000000; font-weight: bold"&gt;or&lt;/span&gt; time&lt;span style="color: #555555"&gt;.&lt;/span&gt;time()
        tee_out &lt;span style="color: #555555"&gt;=&lt;/span&gt; tee&lt;span style="color: #555555"&gt;.&lt;/span&gt;getvalue()
        &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;_append_history(inp&lt;span style="color: #555555"&gt;=&lt;/span&gt;src, ts&lt;span style="color: #555555"&gt;=&lt;/span&gt;[ts0, ts1], tee_out&lt;span style="color: #555555"&gt;=&lt;/span&gt;tee_out)
        &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;accumulated_inputs &lt;span style="color: #555555"&gt;+=&lt;/span&gt; src
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; (
            tee_out
            &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; env&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;quot;XONSH_APPEND_NEWLINE&amp;quot;&lt;/span&gt;)
            &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; tee_out&lt;span style="color: #555555"&gt;.&lt;/span&gt;endswith(os&lt;span style="color: #555555"&gt;.&lt;/span&gt;linesep)
        ):
            &lt;span style="color: #336666"&gt;print&lt;/span&gt;(os&lt;span style="color: #555555"&gt;.&lt;/span&gt;linesep, end&lt;span style="color: #555555"&gt;=&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
        tee&lt;span style="color: #555555"&gt;.&lt;/span&gt;close()
        &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;_fix_cwd()
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; builtins&lt;span style="color: #555555"&gt;.&lt;/span&gt;__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;exit:  &lt;span style="color: #0099FF; font-style: italic"&gt;# pylint: disable=no-member&lt;/span&gt;
        &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;code&gt;finally&lt;/code&gt; block, we see &lt;code&gt;inp&lt;/code&gt; is &lt;code&gt;src&lt;/code&gt;, which, after digging around a big into what happens above this call, appears to be the string that was typed into the command prompt, as opposed to the &lt;code&gt;code&lt;/code&gt;, which is the xonsh code that was compiled and run (successfully or not) from compiling this &lt;code&gt;src&lt;/code&gt;. Interestingly, this means we are typing in source code each time we enter text the xonsh REPL, and xonsh is compiling/running  it. The essential piece of a history entry is a bit of uncompiled source code (like &lt;code&gt;ls -alh&lt;/code&gt; or &lt;code&gt;import sys&lt;/code&gt;)!&lt;/p&gt;
&lt;p&gt;Let's follow an &lt;code&gt;ls&lt;/code&gt; command entry from the prompt through &lt;code&gt;BaseShell.default()&lt;/code&gt; and the code that appends the entry to history.&lt;/p&gt;
&lt;p&gt;The code block picks up just after I've entered the &lt;code&gt;ls&lt;/code&gt; command at the prompt.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color: #555555"&gt;/&lt;/span&gt;home&lt;span style="color: #555555"&gt;/&lt;/span&gt;eddie&lt;span style="color: #555555"&gt;/&lt;/span&gt;source&lt;span style="color: #555555"&gt;/&lt;/span&gt;xonsh&lt;span style="color: #555555"&gt;/&lt;/span&gt;xonsh&lt;span style="color: #555555"&gt;/&lt;/span&gt;base_shell&lt;span style="color: #555555"&gt;.&lt;/span&gt;py(&lt;span style="color: #FF6600"&gt;348&lt;/span&gt;)default()
    &lt;span style="color: #FF6600"&gt;347&lt;/span&gt;         src, code &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;push(line)
&lt;span style="color: #555555"&gt;--&amp;gt;&lt;/span&gt; &lt;span style="color: #FF6600"&gt;348&lt;/span&gt;         &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; code &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
    &lt;span style="color: #FF6600"&gt;349&lt;/span&gt;             &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt;

ipdb&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; code                                                                                                                                                                                                                                                                                            
&lt;span style="color: #555555"&gt;&amp;lt;&lt;/span&gt;code &lt;span style="color: #336666"&gt;object&lt;/span&gt; &lt;span style="color: #555555"&gt;&amp;lt;&lt;/span&gt;module&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; at &lt;span style="color: #FF6600"&gt;0x7f3682be44b0&lt;/span&gt;, file &lt;span style="color: #CC3300"&gt;&amp;quot;/home/eddie/.virtualenvs/xonsh/lib/python3.7/site-packages/xontrib/fzf-widgets.xsh&amp;quot;&lt;/span&gt;, line &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt;
ipdb&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; src                                                                                                                                                                                                                                                                                             
&lt;span style="color: #CC3300"&gt;&amp;#39;ls&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;code&lt;/code&gt; is apparently wrapped in some non-&lt;code&gt;ls&lt;/code&gt; xontrib code I have installed. I'm unsure exactly why right now.&lt;/p&gt;
&lt;p&gt;But note that &lt;code&gt;src&lt;/code&gt; is the &lt;code&gt;ls&lt;/code&gt; command I typed in, followed by a newline.&lt;/p&gt;
&lt;p&gt;Once we get down to the actual appending, we see that &lt;code&gt;ts0&lt;/code&gt; and &lt;code&gt;ts1&lt;/code&gt; are the start and end timestamps of the code's execution. &lt;code&gt;tee_out&lt;/code&gt; is simply the output of the command.&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #555555"&gt;--&amp;gt;&lt;/span&gt; &lt;span style="color: #FF6600"&gt;377&lt;/span&gt;             &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;_append_history(inp&lt;span style="color: #555555"&gt;=&lt;/span&gt;src, ts&lt;span style="color: #555555"&gt;=&lt;/span&gt;[ts0, ts1], tee_out&lt;span style="color: #555555"&gt;=&lt;/span&gt;tee_out)
    &lt;span style="color: #FF6600"&gt;378&lt;/span&gt;             &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;accumulated_inputs &lt;span style="color: #555555"&gt;+=&lt;/span&gt; src
    &lt;span style="color: #FF6600"&gt;379&lt;/span&gt;             &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; (
    &lt;span style="color: #FF6600"&gt;380&lt;/span&gt;                 tee_out
    &lt;span style="color: #FF6600"&gt;381&lt;/span&gt;                 &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; env&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;quot;XONSH_APPEND_NEWLINE&amp;quot;&lt;/span&gt;)
    &lt;span style="color: #FF6600"&gt;382&lt;/span&gt;                 &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; tee_out&lt;span style="color: #555555"&gt;.&lt;/span&gt;endswith(os&lt;span style="color: #555555"&gt;.&lt;/span&gt;linesep)
    &lt;span style="color: #FF6600"&gt;383&lt;/span&gt;             ):
    &lt;span style="color: #FF6600"&gt;384&lt;/span&gt;                 &lt;span style="color: #336666"&gt;print&lt;/span&gt;(os&lt;span style="color: #555555"&gt;.&lt;/span&gt;linesep, end&lt;span style="color: #555555"&gt;=&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
    &lt;span style="color: #FF6600"&gt;385&lt;/span&gt;             tee&lt;span style="color: #555555"&gt;.&lt;/span&gt;close()
    &lt;span style="color: #FF6600"&gt;386&lt;/span&gt;             &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;_fix_cwd()
    &lt;span style="color: #FF6600"&gt;387&lt;/span&gt;         &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; builtins&lt;span style="color: #555555"&gt;.&lt;/span&gt;__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;exit:  &lt;span style="color: #0099FF; font-style: italic"&gt;# pylint: disable=no-member&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;388&lt;/span&gt;             &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;
    &lt;span style="color: #FF6600"&gt;389&lt;/span&gt;

ipdb&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; src                                                                                                                                                                                                                                                                                             
&lt;span style="color: #CC3300"&gt;&amp;#39;ls&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;
ipdb&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; ts0                                                                                                                                                                                                                                                                                             
&lt;span style="color: #FF6600"&gt;1560283660.1879137&lt;/span&gt;
ipdb&lt;span style="color: #555555"&gt;&amp;gt;&lt;/span&gt; ts1                                                                                                                                                                                                                                                                                             
&lt;span style="color: #FF6600"&gt;1560283660.3324323&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's step into &lt;code&gt;_append_history()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;_append_history&lt;/span&gt;(&lt;span style="color: #336666"&gt;self&lt;/span&gt;, tee_out&lt;span style="color: #555555"&gt;=&lt;/span&gt;&lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;, &lt;span style="color: #555555"&gt;**&lt;/span&gt;info):
    &lt;span style="color: #CC3300; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Append information about the command to the history.&lt;/span&gt;

&lt;span style="color: #CC3300; font-style: italic"&gt;    This also handles on_postcommand because this is the place where all the&lt;/span&gt;
&lt;span style="color: #CC3300; font-style: italic"&gt;    information is available.&lt;/span&gt;
&lt;span style="color: #CC3300; font-style: italic"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    hist &lt;span style="color: #555555"&gt;=&lt;/span&gt; builtins&lt;span style="color: #555555"&gt;.&lt;/span&gt;__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;history  &lt;span style="color: #0099FF; font-style: italic"&gt;# pylint: disable=no-member&lt;/span&gt;
    info[&lt;span style="color: #CC3300"&gt;&amp;quot;rtn&amp;quot;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;
    tee_out &lt;span style="color: #555555"&gt;=&lt;/span&gt; tee_out &lt;span style="color: #000000; font-weight: bold"&gt;or&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;
    last_out &lt;span style="color: #555555"&gt;=&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_out &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; last_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; tee_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
        &lt;span style="color: #006699; font-weight: bold"&gt;pass&lt;/span&gt;
    &lt;span style="color: #006699; font-weight: bold"&gt;elif&lt;/span&gt; last_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; tee_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
        info[&lt;span style="color: #CC3300"&gt;&amp;quot;out&amp;quot;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; tee_out
    &lt;span style="color: #006699; font-weight: bold"&gt;elif&lt;/span&gt; last_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; tee_out &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
        info[&lt;span style="color: #CC3300"&gt;&amp;quot;out&amp;quot;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; last_out
    &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt;:
        info[&lt;span style="color: #CC3300"&gt;&amp;quot;out&amp;quot;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; tee_out &lt;span style="color: #555555"&gt;+&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;quot;&lt;/span&gt; &lt;span style="color: #555555"&gt;+&lt;/span&gt; last_out
    events&lt;span style="color: #555555"&gt;.&lt;/span&gt;on_postcommand&lt;span style="color: #555555"&gt;.&lt;/span&gt;fire(
        cmd&lt;span style="color: #555555"&gt;=&lt;/span&gt;info[&lt;span style="color: #CC3300"&gt;&amp;quot;inp&amp;quot;&lt;/span&gt;], rtn&lt;span style="color: #555555"&gt;=&lt;/span&gt;info[&lt;span style="color: #CC3300"&gt;&amp;quot;rtn&amp;quot;&lt;/span&gt;], out&lt;span style="color: #555555"&gt;=&lt;/span&gt;info&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;quot;out&amp;quot;&lt;/span&gt;, &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;), ts&lt;span style="color: #555555"&gt;=&lt;/span&gt;info[&lt;span style="color: #CC3300"&gt;&amp;quot;ts&amp;quot;&lt;/span&gt;]
    )
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist &lt;span style="color: #000000; font-weight: bold"&gt;is&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;:
        hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;append(info)
        hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_rtn &lt;span style="color: #555555"&gt;=&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;last_cmd_out &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It isn't the most exciting code. It is really just a matter of adding return code information for failed commands and, if available, the output of the command, to the &lt;code&gt;info&lt;/code&gt; (history entry) provided to the backend. As a funny aside most of this method is a heuristic for deciding whether to use tee output or &lt;code&gt;last_cmd_out&lt;/code&gt; from the history backend, which &lt;code&gt;last_cmd_out&lt;/code&gt; seems to be an unused property in at least all the built-in history backends. Would be interesting to know why it ever existed at all!&lt;/p&gt;
&lt;p&gt;The crucial thing we learn here, though, is that &lt;code&gt;info&lt;/code&gt; is effectively what we've been calling the history entry. It is the "packet" (concretely, a &lt;code&gt;dict&lt;/code&gt;) of information that is appended to the history. It defines what our history backend can save, delete, search, manipulate, etc. So any additional information we would need to add for our history backend would have to be added to &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's take a look at the &lt;code&gt;info&lt;/code&gt; object for two different cases. In the first, I'll call &lt;code&gt;ls&lt;/code&gt; in a directory with exactly one &lt;em&gt;empty&lt;/em&gt; regular file: &lt;code&gt;test&lt;/code&gt;, and in the second I'll call &lt;code&gt;grep something test&lt;/code&gt; in the same directory. The &lt;code&gt;ls&lt;/code&gt; call will provide a successful return value and the &lt;code&gt;grep&lt;/code&gt; call will not (since &lt;code&gt;test&lt;/code&gt; will be empty).&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;ls&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{&lt;span style="color: #CC3300"&gt;&amp;#39;inp&amp;#39;&lt;/span&gt;: &lt;span style="color: #CC3300"&gt;&amp;#39;ls&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;ts&amp;#39;&lt;/span&gt;: [&lt;span style="color: #FF6600"&gt;1560285242.9592671&lt;/span&gt;, &lt;span style="color: #FF6600"&gt;1560285243.0506482&lt;/span&gt;], &lt;span style="color: #CC3300"&gt;&amp;#39;rtn&amp;#39;&lt;/span&gt;: &lt;span style="color: #FF6600"&gt;0&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;out&amp;#39;&lt;/span&gt;: &lt;span style="color: #CC3300"&gt;&amp;#39;test&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Calling &lt;code&gt;grep something test&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{&lt;span style="color: #CC3300"&gt;&amp;#39;inp&amp;#39;&lt;/span&gt;: &lt;span style="color: #CC3300"&gt;&amp;#39;grep something test&lt;/span&gt;&lt;span style="color: #CC3300; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;ts&amp;#39;&lt;/span&gt;: [&lt;span style="color: #FF6600"&gt;1560285373.0232306&lt;/span&gt;, &lt;span style="color: #FF6600"&gt;1560285373.125136&lt;/span&gt;], &lt;span style="color: #CC3300"&gt;&amp;#39;rtn&amp;#39;&lt;/span&gt;: &lt;span style="color: #FF6600"&gt;1&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There you have it - all the information available to a history backend's &lt;code&gt;append()&lt;/code&gt; method as far as I can tell.&lt;/p&gt;
&lt;h2&gt;Thoughts on where I should go&lt;/h2&gt;
&lt;p&gt;So I've been digging around in here to ultimately change what history items are loaded when a user interactively scrolls through the history, uses the &lt;code&gt;history&lt;/code&gt; command, etc., with the aim of showing only the history items that are associated with the current working directory. To do that, I have to get &lt;code&gt;cwd&lt;/code&gt; information into each history item.&lt;/p&gt;
&lt;p&gt;To fast-forward a bit, I've now done that, and it's pretty simple, though it did require a change to the xonsh source code:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #003300; font-weight: bold"&gt;diff --git a/xonsh/base_shell.py b/xonsh/base_shell.py&lt;/span&gt;
&lt;span style="color: #003300; font-weight: bold"&gt;index b7e9aff2..7088427f 100644&lt;/span&gt;
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;--- a/xonsh/base_shell.py&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+++ b/xonsh/base_shell.py&lt;/span&gt;
&lt;span style="color: #003300; font-weight: bold"&gt;@@ -393,6 +393,8 @@ class BaseShell(object):&lt;/span&gt;
         &amp;quot;&amp;quot;&amp;quot;
         hist = builtins.__xonsh__.history  # pylint: disable=no-member
         info[&amp;quot;rtn&amp;quot;] = hist.last_cmd_rtn if hist is not None else None
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        if builtins.__xonsh__.env.get(&amp;quot;XONSH_STORE_CWD&amp;quot;):&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+            info[&amp;#39;cwd&amp;#39;] = os.getcwd()&lt;/span&gt;
         tee_out = tee_out or None
         last_out = hist.last_cmd_out if hist is not None else None
         if last_out is None and tee_out is None:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Luckily, when I had asked whether such a xontrib as &lt;code&gt;per-directory-history&lt;/code&gt; existed yet, xonsh creator &lt;a href="https://github.com/scopatz"&gt;Anthony Scopatz&lt;/a&gt; told me he'd be up for modifying the history mechanism to support this kind of xontrib, so we're good here.&lt;/p&gt;
&lt;p&gt;The next question I had was how I could make history:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aware of this new information&lt;/li&gt;
&lt;li&gt;optionally able to use this information by installing a xontrib&lt;/li&gt;
&lt;li&gt;hopefully prompt-backend agnostic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make history aware of this new info, I had to alter the history backends - each history backend has a different way of handling the attributes of history items. I decided to follow a depth-first way of experimenting, hoping that if I got my history functionality working with &lt;code&gt;JsonHistory&lt;/code&gt;, probably the most commonly used backend, I could either figure out how to get it working with other backends, or (less good) just make my xontrib available to people using the &lt;code&gt;JsonHistory&lt;/code&gt; backend.&lt;/p&gt;
&lt;p&gt;Next, I looked at where history strings are loaded by xonsh, so that I could start limiting the items loaded to those that matched by &lt;code&gt;cwd&lt;/code&gt;. My thought was that each time history was searched by the user, by whatever mechanism, if I found the point where history strings were loaded, I could filter out those that didn't match.&lt;/p&gt;
&lt;p&gt;I thought that creating a history backend with an overridden method would help since custom history backends are easily pluggable with the &lt;code&gt;XONSH_HISTORY_BACKEND&lt;/code&gt; environment varible, thus making any solution that used a custom one pretty easily installable via a xontrib.&lt;/p&gt;
&lt;p&gt;Unfortunately there was no clear and easy way to override the history backend functionality to filter out history entries on arbitrary criteria, so I added yet another thing to the xonsh source:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #003300; font-weight: bold"&gt;diff --git a/xonsh/history/json.py b/xonsh/history/json.py&lt;/span&gt;
&lt;span style="color: #003300; font-weight: bold"&gt;index 50b6326b..7313cfc9 100644&lt;/span&gt;
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;--- a/xonsh/history/json.py&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+++ b/xonsh/history/json.py&lt;/span&gt;
&lt;span style="color: #003300; font-weight: bold"&gt;@@ -328,6 +328,7 @@ class JsonHistory(History):&lt;/span&gt;
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;--- a/xonsh/history/json.py&lt;/span&gt;
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;--- a/xonsh/history/json.py&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+++ b/xonsh/history/json.py&lt;/span&gt;
&lt;span style="color: #003300; font-weight: bold"&gt;@@ -328,6 +328,7 @@ class JsonHistory(History):&lt;/span&gt;
         self.tss = JsonCommandField(&amp;quot;ts&amp;quot;, self)
         self.inps = JsonCommandField(&amp;quot;inp&amp;quot;, self)
         self.outs = JsonCommandField(&amp;quot;out&amp;quot;, self)
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        self.cwds = JsonCommandField(&amp;quot;cwd&amp;quot;, self)&lt;/span&gt;
         self.rtns = JsonCommandField(&amp;quot;rtn&amp;quot;, self)

     def __len__(self):
&lt;span style="color: #003300; font-weight: bold"&gt;@@ -382,10 +383,11 @@ class JsonHistory(History):&lt;/span&gt;
     def items(self, newest_first=False):
         &amp;quot;&amp;quot;&amp;quot;Display history items of current session.&amp;quot;&amp;quot;&amp;quot;
         if newest_first:
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;-            items = zip(reversed(self.inps), reversed(self.tss))&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+            items = zip(&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+                reversed(self.inps), reversed(self.tss), reversed(self.cwds))&lt;/span&gt;
         else:
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;-            items = zip(self.inps, self.tss)&lt;/span&gt;
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;-        for item, tss in items:&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+            items = zip(self.inps, self.tss, self.cwds)&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        for item, tss, _ in items:&lt;/span&gt;
             yield {&amp;quot;inp&amp;quot;: item.rstrip(), &amp;quot;ts&amp;quot;: tss[0]}

     def all_items(self, newest_first=False, **kwargs):
&lt;span style="color: #003300; font-weight: bold"&gt;@@ -413,10 +415,16 @@ class JsonHistory(History):&lt;/span&gt;
             if newest_first:
                 commands = reversed(commands)
             for c in commands:
&lt;span style="background-color: #FFCCCC; border: 1px solid #CC0000"&gt;-                yield {&amp;quot;inp&amp;quot;: c[&amp;quot;inp&amp;quot;].rstrip(), &amp;quot;ts&amp;quot;: c[&amp;quot;ts&amp;quot;][0]}&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+                if self._include_history_item(c):&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+                    yield {&amp;quot;inp&amp;quot;: c[&amp;quot;inp&amp;quot;].rstrip(), &amp;quot;ts&amp;quot;: c[&amp;quot;ts&amp;quot;][0]}&lt;/span&gt;
         # all items should also include session items
         yield from self.items()

&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+    def _include_history_item(self, item):&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        &amp;quot;&amp;quot;&amp;quot;Whether to include the history item.&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        Allows filtering history results by subclass.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+        return True&lt;/span&gt;
&lt;span style="background-color: #CCFFCC; border: 1px solid #00CC00"&gt;+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In short, this diff just adds a method that checks whether a history item should be used, and in the default case (the &lt;code&gt;JsonHistory&lt;/code&gt; base class), it simply allows all history items.&lt;/p&gt;
&lt;p&gt;In my xontrib, I created a custom history backend that performed the filtering I wanted:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #00AA88; font-weight: bold"&gt;JsonPerDirectoryHistory&lt;/span&gt;(JsonHistory):
    &lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;__init__&lt;/span&gt;(&lt;span style="color: #336666"&gt;self&lt;/span&gt;, &lt;span style="color: #555555"&gt;*&lt;/span&gt;args, &lt;span style="color: #555555"&gt;**&lt;/span&gt;kwargs):
        &lt;span style="color: #336666"&gt;super&lt;/span&gt;()&lt;span style="color: #555555"&gt;.&lt;/span&gt;&lt;span style="color: #CC00FF"&gt;__init__&lt;/span&gt;(&lt;span style="color: #555555"&gt;*&lt;/span&gt;args, &lt;span style="color: #555555"&gt;**&lt;/span&gt;kwargs)
        &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;

    &lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;_include_history_item&lt;/span&gt;(&lt;span style="color: #336666"&gt;self&lt;/span&gt;, item):
        run_in_terminal(&lt;span style="color: #006699; font-weight: bold"&gt;lambda&lt;/span&gt;: &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;f&amp;#39;Got item &lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;item&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;))
        run_in_terminal(&lt;span style="color: #006699; font-weight: bold"&gt;lambda&lt;/span&gt;: &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;f&amp;#39;Use local history: &lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;&lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;))
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #336666"&gt;self&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; item&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;#39;cwd&amp;#39;&lt;/span&gt;) &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; os&lt;span style="color: #555555"&gt;.&lt;/span&gt;getcwd() &lt;span style="color: #555555"&gt;==&lt;/span&gt; item&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;#39;cwd&amp;#39;&lt;/span&gt;):
            run_in_terminal(&lt;span style="color: #006699; font-weight: bold"&gt;lambda&lt;/span&gt;: &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;&amp;#39;Using item&amp;#39;&lt;/span&gt;))
            &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;
        run_in_terminal(&lt;span style="color: #006699; font-weight: bold"&gt;lambda&lt;/span&gt;: &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;&amp;#39;Not using item&amp;#39;&lt;/span&gt;))
        &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice in this that there are some Prompt Toolkit-specific &lt;code&gt;run_in_terminal&lt;/code&gt; &lt;code&gt;print&lt;/code&gt; calls, which I've added just for very verbose logging while developing. I'd remove these when releasing this xontrib, assuming I keep support for non-Prompt Toolkit shells.&lt;/p&gt;
&lt;p&gt;In the xontrib, I set a &lt;code&gt;prompt_toolkit2&lt;/code&gt; keybinding to switch this functionality on and off, and to tell the user what mode they've switched to:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;os&lt;/span&gt;
&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;sys&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; stdout

&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;prompt_toolkit&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; keys, print_formatted_text
&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;prompt_toolkit.application&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; run_in_terminal

&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;builtins&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; __xonsh__
&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;xonsh.history.json&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; JsonHistory
&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;xonsh.platform&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; ptk_shell_type


&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;toggle_per_directory_history&lt;/span&gt;():
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #336666"&gt;isinstance&lt;/span&gt;(__xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;history, JsonPerDirectoryHistory):
        hist &lt;span style="color: #555555"&gt;=&lt;/span&gt; __xonsh__&lt;span style="color: #555555"&gt;.&lt;/span&gt;history
        hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history
        &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; hist&lt;span style="color: #555555"&gt;.&lt;/span&gt;use_local_history:
            &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;
        &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt;:
            &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;global&amp;#39;&lt;/span&gt;


&lt;span style="color: #9999FF"&gt;@events&lt;/span&gt;&lt;span style="color: #555555"&gt;.&lt;/span&gt;on_ptk_create
&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;custom_keybindings&lt;/span&gt;(bindings, &lt;span style="color: #555555"&gt;**&lt;/span&gt;kw):
    &lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;do_nothing&lt;/span&gt;(func):
        &lt;span style="color: #006699; font-weight: bold"&gt;pass&lt;/span&gt;

    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; ptk_shell_type() &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;prompt_toolkit2&amp;#39;&lt;/span&gt;:
        binder &lt;span style="color: #555555"&gt;=&lt;/span&gt; bindings&lt;span style="color: #555555"&gt;.&lt;/span&gt;add
    &lt;span style="color: #006699; font-weight: bold"&gt;else&lt;/span&gt;:
        binder &lt;span style="color: #555555"&gt;=&lt;/span&gt; bindings&lt;span style="color: #555555"&gt;.&lt;/span&gt;registry&lt;span style="color: #555555"&gt;.&lt;/span&gt;add_binding

    key &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;{&lt;span style="color: #555555"&gt;...&lt;/span&gt;}&lt;span style="color: #555555"&gt;.&lt;/span&gt;get(&lt;span style="color: #CC3300"&gt;&amp;#39;PER_DIRECTORY_HISTORY_TOGGLE&amp;#39;&lt;/span&gt;)

    &lt;span style="color: #9999FF"&gt;@binder&lt;/span&gt;(key)
    &lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;switch_between_global_and_local_history&lt;/span&gt;(_):
        new_hist_type &lt;span style="color: #555555"&gt;=&lt;/span&gt; toggle_per_directory_history()
        run_in_terminal(&lt;span style="color: #006699; font-weight: bold"&gt;lambda&lt;/span&gt;: &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;f&amp;#39;Switching to &lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;new_hist_type&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt; history.&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, I set my history backend to my custom one in my &lt;code&gt;.xonshrc&lt;/code&gt; and turned on per-directory history:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #00CCFF; font-weight: bold"&gt;xontrib.per_directory_history&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;import&lt;/span&gt; JsonPerDirectoryHistory
&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;XONSH_HISTORY_BACKEND &lt;span style="color: #555555"&gt;=&lt;/span&gt; JsonPerDirectoryHistory
&lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;XONSH_STORE_CWD &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Initial results&lt;/h2&gt;
&lt;p&gt;Failure, mostly. Upon opening a &lt;code&gt;gnome-terminal&lt;/code&gt; instance, I saw the debugging messages printed from my history backend, which was nice:&lt;/p&gt;
&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie/source/xonsh&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;ls\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543198.0524652, 1560543198.1038635]}
Use local history: True
Not using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie/source/xonsh&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;z xonsh\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543197.440549, 1560543197.4461908]}
Use local history: True
Not using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;cd ..\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543047.8660042, 1560543047.8693159]}
Use local history: True
Using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie/test&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;fancy mccheeese\n&amp;#39;, &amp;#39;rtn&amp;#39;: 1, &amp;#39;ts&amp;#39;: [1560543038.735667, 1560543039.5000844]}
Use local history: True
Not using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie/test&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;cd test\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543024.288666, 1560543024.2920816]}
Use local history: True
Not using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;ls\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543021.7835386, 1560543021.8042111]}
Use local history: True
Using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;ls\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560543020.0776978, 1560543020.1177895]}
Use local history: True
Using item
Got item {&amp;#39;cwd&amp;#39;: &amp;#39;/home/eddie/test&amp;#39;, &amp;#39;inp&amp;#39;: &amp;#39;cd test\n&amp;#39;, &amp;#39;rtn&amp;#39;: 0, &amp;#39;ts&amp;#39;: [1560542986.1126633, 1560542986.1164727]}
Use local history: True
Not using item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My history backend was apparently being used to load existing history strings, and it was only returning those that matched the &lt;code&gt;cwd&lt;/code&gt;, which, in a new &lt;code&gt;gnome-terminal&lt;/code&gt; for me is &lt;code&gt;/home/eddie&lt;/code&gt;. Notice how commands with &lt;code&gt;cwd&lt;/code&gt; info that matches &lt;code&gt;/home/eddie&lt;/code&gt; are the only history items being used.&lt;/p&gt;
&lt;p&gt;Cool. So I decided to switch to another directory. If things are working as expected, I should be able to enter history commands, go back through the history, and only get commands for this new directory. Before entering any commands in this directory, I shouldn't see any history items!&lt;/p&gt;
&lt;p&gt;But I did. I could scroll back through all the history items that my command output just said were being used. What's more, if I switched to yet another directory, I could access all the commands I'd entered in the current prompt session since opening it.&lt;/p&gt;
&lt;h2&gt;Why???&lt;/h2&gt;
&lt;p&gt;This may be specific to Prompt Toolkit, but I don't know yet. It appears xonsh uses history backends in conjunction with prompt toolkit like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;xonsh spins up a new shell instance in &lt;code&gt;xonsh/shell.py&lt;/code&gt; when a new shell process is started&lt;/li&gt;
&lt;li&gt;xonsh creates a Prompt Toolkit instance and hands it all the history data up to this point, which, in the case of &lt;code&gt;JsonHistory&lt;/code&gt;, is all the history in our JSON history files&lt;/li&gt;
&lt;li&gt;Prompt Toolkit runs the prompt&lt;/li&gt;
&lt;li&gt;Each time a command is entered, Prompt Toolkit feeds this command to the xonsh shell, which appends the command history to the history backend in use&lt;/li&gt;
&lt;li&gt;Indepedently, Prompt Toolkit maintains its own searchable/scrollable record of the history since the Prompt Toolkit instance was created&lt;/li&gt;
&lt;li&gt;The next time a shell is loaded, the previous history is given to Prompt Toolkit from the xonsh history backend.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Do you see my problem? I had indeed changed what history items are loaded by the history backend, but I hadn't changed anything about what the Prompt Toolkit history mechanism does &lt;em&gt;once a shell is up and running&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Where do I go from here?&lt;/h2&gt;
&lt;p&gt;I am going to bring this post to a close since it contains lots of cool info about how xonsh history backends work, but I will pick back up on my own historical exploits in another post.&lt;/p&gt;</content><category term="xonshiousness"></category><category term="xonsh"></category><category term="shell"></category><category term="linux"></category><category term="python"></category><category term="xontribs"></category></entry><entry><title>How to Write a simple xonsh xontrib</title><link href="https://www.dinogalactic.com/how-to-write-a-simple-xonsh-xontrib.html" rel="alternate"></link><published>2019-06-09T06:00:00-04:00</published><updated>2019-06-09T06:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2019-06-09:/how-to-write-a-simple-xonsh-xontrib.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;xonsh&lt;/code&gt; docs have &lt;a href="https://xon.sh/tutorial_xontrib.html"&gt;a guide on how to write
xontribs&lt;/a&gt;, but I think this guide is a
bit brusk. It says everything it needs to say but leaves out a lot of the
detail that someone like me might need to create a xontrib. So, while I write …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;xonsh&lt;/code&gt; docs have &lt;a href="https://xon.sh/tutorial_xontrib.html"&gt;a guide on how to write
xontribs&lt;/a&gt;, but I think this guide is a
bit brusk. It says everything it needs to say but leaves out a lot of the
detail that someone like me might need to create a xontrib. So, while I write a
xontrib for something else, I've decided to write a more detailed xontrib
composition guide.&lt;/p&gt;
&lt;p&gt;Though this will show you how to create a xontrib, it is presented as a log of
me making my way through this process rather than a traditional step-by-step
how-to.&lt;/p&gt;
&lt;p&gt;When I say "create a xontrib," this phrase deceptively implies there is one
step in creating a xontrib everyone can use. &lt;em&gt;If&lt;/em&gt; you want to share your
xontrib with the world, the involved steps are to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Literally create xontrib code and load it into your xonsh shell.&lt;/li&gt;
&lt;li&gt;Make this xontrib a distribution installable with something like &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Host this xontrib distribution on PyPI.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://xon.sh/tutorial_xontrib.html#tell-us-about-your-xontrib"&gt;Register the 
   xontrib&lt;/a&gt;
   with the xonsh project.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once these steps are complete, the xontrib is ready for consumption by the good
folks on the internet. If your aim is to write a xontrib solely for your
personal use and never share it, you could stop at step 1 (but I'd recommend
going to through step 2 as well).&lt;/p&gt;
&lt;p&gt;For this guide, I'll focus only on steps 1 and 2, which should be enough to get
anyone far down the path of developing and using a xontrib they have developed.
Steps 3 is a more general Python distrubtion concern and is outlined in the &lt;a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#packaging-your-project"&gt;Python Packaging User Guide
section on the
topic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Part 4 is covered in the above linked doc on registering xontribs with the
xonsh project.&lt;/p&gt;
&lt;h2&gt;Software versions&lt;/h2&gt;
&lt;p&gt;I'm using &lt;code&gt;xonsh 0.9.3&lt;/code&gt; and &lt;code&gt;Python 3.7.3&lt;/code&gt; for this guide.&lt;/p&gt;
&lt;h2&gt;Step 1: What makes a xontrib?&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;xonsh&lt;/code&gt; docs have &lt;a href="https://xon.sh/tutorial_xontrib.html?highlight=xontrib"&gt;a guide on how to write xontribs&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;These docs briefly tell us how to make a xontrib:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Writing a xontrib is as easy as writing a xonsh or Python file and sticking it in a directory named &lt;code&gt;xontrib/&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That seems so simple! But how could that work? The docs are implying that
creating any &lt;code&gt;.xsh&lt;/code&gt; or &lt;code&gt;.py&lt;/code&gt; file in a directory with the special name
&lt;code&gt;xontrib/&lt;/code&gt; will allow the xontrib to be imported and loaded by &lt;code&gt;xontrib load&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;How could my &lt;code&gt;xontrib/&lt;/code&gt; directory somewhere on my filesystem get picked up and
added to a globally importable &lt;code&gt;xontrib&lt;/code&gt; package? The answer is implicit
namespaces. Implicit namespaces are a convention, introduced in &lt;a href="https://www.python.org/dev/peps/pep-0420/"&gt;PEP
420&lt;/a&gt;, that the import machinery uses
to construct a single package from multiple locations (these locations are
called "partials").&lt;/p&gt;
&lt;p&gt;The specifics of implicit namespaces are a bit more complicated than this, but
for xontribs, this means &lt;em&gt;almost&lt;/em&gt; exactly what we were told. We need to create
a &lt;code&gt;.xsh&lt;/code&gt; or &lt;code&gt;.py&lt;/code&gt; file inside a directory named &lt;code&gt;xontrib/&lt;/code&gt;; however, missing
from the docs is the important point that this &lt;code&gt;xontrib/&lt;/code&gt; directory cannot just
be &lt;em&gt;anywhere&lt;/em&gt; on the file system - it must be available in the Python path.
This should all become clear after an example.&lt;/p&gt;
&lt;p&gt;So, if we follow the implicit namespace conventions for our xontrib, it will be
available on the &lt;code&gt;xontrib&lt;/code&gt; package as a module. &lt;code&gt;xontrib load&lt;/code&gt;, the line you
are probably familiar with if you've &lt;a href="https://xon.sh/xontribs.html?highlight=xontrib%20load"&gt;used a
xontrib&lt;/a&gt;,  takes the
name of a module in the &lt;code&gt;xontrib&lt;/code&gt; package, so &lt;code&gt;xontrib load myxontribname&lt;/code&gt; will load
the &lt;code&gt;xontrib.myxontribname&lt;/code&gt; module as a xontrib.&lt;/p&gt;
&lt;h3&gt;xontrib "Hello World!"&lt;/h3&gt;
&lt;p&gt;Here's a trivial xontrib "Hello World!" example using these concepts.&lt;/p&gt;
&lt;p&gt;My first xontrib, called &lt;code&gt;hello_world&lt;/code&gt; has the following directory structure:&lt;/p&gt;
&lt;p&gt;```
@eddie-ubuntu ~/source/xontrib-hello-world $ tree
.
└── xontrib
    └── hello_world.py&lt;/p&gt;
&lt;p&gt;1 directory, 1 file
```&lt;/p&gt;
&lt;p&gt;I created this by running the following in xonsh inside the &lt;code&gt;xontrib-hello-world&lt;/code&gt; directory:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eddie@eddie-ubuntu ~/source/xontrib-hello-world $ mkdir xontrib
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ echo "print('Hello World!')" &amp;gt; xontrib/hello_world.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, I want to load this xontrib, right? Let's see if xonsh has picked it up yet:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eddie@eddie-ubuntu ~/source/xontrib-hello-world $ xontrib load hello_world
The following xontribs are enabled but not installed:
   hello_world
To install them run
    xpip install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Hmm, this is a strange message, but it all makes sense when considering (1)
what a xontrib is, (2) how implicit namespaces work with xontribs, and (3) how
xontribs are normally installed. To break this message down, let's first tackle
the statement that the xontrib is enabled but not installed. Indeed, we just
enabled this xontrib with &lt;code&gt;xontrib load hello_world&lt;/code&gt;, but by saying the xontrib
is not installed, xonsh is effectively saying that the xontrib code cannot be
found. The second part of the message, which tells us to install the xontrib
via &lt;code&gt;xpip install&lt;/code&gt; would be helpful if we were trying to install a xontrib from
a distribution (a package with a &lt;code&gt;setup.py&lt;/code&gt; that is hosted on
&lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt;, for instance). In our case, it isn't really helpful
since we are trying to load a xontrib locally using the bare minimum components
for creating a xontrib, so we can ignore this second message.&lt;/p&gt;
&lt;p&gt;So, how do we install our trivial xontrib? Since we aren't installing a
distribution package and we're just relying on the import machinery's
understanding of implicit namespace packages, we have to make sure all the
requirements of that convention are satisfied. So far, we have done everything
to create a xontrib except making it discoverable via import machinery under
the &lt;code&gt;xontrib&lt;/code&gt; package. This next step will do that.&lt;/p&gt;
&lt;p&gt;As usual, the way to make a package discoverable by import machinery is to add
its containing directory to the &lt;code&gt;sys.path&lt;/code&gt; global, so let's do that, picking up
immediately where we left off before with the "The following xontribs are
enabled but installed..." message:&lt;/p&gt;
&lt;p&gt;```
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ xontrib load hello_world
The following xontribs are enabled but not installed:
   hello_world
To install them run
    xpip install
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ from xontrib.voxapi import Vox
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ from sys import path
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ path
['/home/eddie/.virtualenvs/xonsh/bin',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python37.zip',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python3.7',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python3.7/lib-dynload',
 '/home/eddie/.virtualenvs/xonsh/lib/python3.7/site-packages',
 '/home/eddie/source/xonsh',
 '/home/eddie/source/xontrib-z']
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ tree
.
└── xontrib
    └── hello_world.py&lt;/p&gt;
&lt;p&gt;1 directory, 1 file
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ path.append(os.getcwd())
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ path
['/home/eddie/.virtualenvs/xonsh/bin',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python37.zip',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python3.7',
 '/home/eddie/.pyenv/versions/3.7.3/lib/python3.7/lib-dynload',
 '/home/eddie/.virtualenvs/xonsh/lib/python3.7/site-packages',
 '/home/eddie/source/xonsh',
 '/home/eddie/source/xontrib-z',
 '/home/eddie/source/xontrib-hello-world']
eddie@eddie-ubuntu ~/source/xontrib-hello-world $ xontrib load hello_world
Hello World!
```&lt;/p&gt;
&lt;p&gt;After adding the current directory, which contains the aforementioned
&lt;code&gt;xontrib/&lt;/code&gt; named directory, we are able to enabled the xontrib, and upon
loading it, we see that xonsh must think it's installed because it runs the
code inside the &lt;code&gt;hello_world.py&lt;/code&gt; file and prints "Hello World!" to the screen.&lt;/p&gt;
&lt;p&gt;That concludes the creation of a super simple xontrib. The rest of this post
will be concerned with building up a distribution out of a simple xontrib. To
spoil the fun a bit, packaging up a xontrib is just a matter of getting
&lt;code&gt;setuptools&lt;/code&gt; to put our xontrib code in a &lt;code&gt;xontrib/&lt;/code&gt; directory that is already
in the &lt;code&gt;sys.path&lt;/code&gt; so that it can be loaded as a module on the &lt;code&gt;xontrib&lt;/code&gt;
package.&lt;/p&gt;
&lt;h2&gt;Step 2: How do we make a xontrib installable with something like pip?&lt;/h2&gt;
&lt;p&gt;Python packages are described for easy installation through the &lt;code&gt;setup.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;I had not created a Python package before this one, though I was acquainted
with &lt;code&gt;setup.py&lt;/code&gt; files through the many examples I saw in GitHub projects, but I
never understood &lt;code&gt;setup.py&lt;/code&gt; very well.&lt;/p&gt;
&lt;p&gt;In the fictional internet time between the last step and this one, I started
working on a real xontrib that I will use for the rest of this guide. This
means I'm abandoning the "Hello World!" xontrib and creating one called
&lt;code&gt;xontrib-per-directory-history&lt;/code&gt;. This will be like &lt;a href="https://github.com/jimhester/per-directory-history"&gt;per-directory-history for
zsh&lt;/a&gt;, which I used for a
long time in my &lt;code&gt;zsh&lt;/code&gt; configuration and now miss dearly. The following steps
should be applicable regardless of the goal of the xontrib you are creating.&lt;/p&gt;
&lt;p&gt;This is the &lt;code&gt;setup.py&lt;/code&gt; configuration I ended up with for this xontrib:&lt;/p&gt;
&lt;p&gt;```
xontrib-per-directory-history&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Per-directory history for xonsh, like zsh's
https://github.com/jimhester/per-directory-history&lt;/p&gt;
&lt;p&gt;Restricts history to those that were executed in the current
directory, with keybindings to switch between that and global history.
"""&lt;/p&gt;
&lt;p&gt;from setuptools import setup&lt;/p&gt;
&lt;p&gt;setup(
    name='xontrib-per-directory-history',
    version='0.1',
    description="Per-directory history for xonsh, like zsh's https://github.com/jimhester/per-directory-history",
    long_description=&lt;strong&gt;doc&lt;/strong&gt;,
    license='MIT',
    url='https://github.com/eppeters/xontrib-per-directory-history',
    author='Eddie Peters',
    author_email='edward.paul.peters@gmail.com',
    packages=['xontrib'],
    package_dir={'xontrib': 'xontrib'},
    package_data={'xontrib': ['*.xsh']},
    platforms='any',
    install_requires=[
        'xonsh&amp;gt;=0.9.3',
    ],
    classifiers=[
        'Environment :: Console',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Topic :: System :: Shells',
        'Topic :: System :: System Shells',
    ]
)
```&lt;/p&gt;
&lt;p&gt;xontrib packages have a particular layout that requires us to write some
boilerplate in the &lt;code&gt;setup.py&lt;/code&gt;. The xonsh docs link to a &lt;a href="https://github.com/laerus/cookiecutter-xontrib"&gt;cookiecutter
template&lt;/a&gt; that you can use to
generate most of this, as well as the file structure, for you if you want.&lt;/p&gt;
&lt;p&gt;Most of the &lt;code&gt;kwargs&lt;/code&gt; passed to &lt;code&gt;setup&lt;/code&gt; define obvious informational metadata
and won't be discussed here. They are useful for attribution, searching on
PyPI, etc., but won't affect the installability of your xontrib package. The
most interesting (read: least obvious) of these informational pieces is the
&lt;code&gt;classifiers&lt;/code&gt; list, which you can find out more about on &lt;a href="https://pypi.org/classifiers/"&gt;PyPI's classifiers
page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following triplet effectively tells &lt;code&gt;setuptools&lt;/code&gt; to do everything we did manually in Step 1 above:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;packages=['xontrib'],
    package_dir={'xontrib': 'xontrib'},
    package_data={'xontrib': ['*.xsh']},&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;packages&lt;/code&gt; says that this package will provide a package named &lt;code&gt;xontrib&lt;/code&gt;,
&lt;code&gt;package_dir&lt;/code&gt; maps this &lt;code&gt;xontrib&lt;/code&gt; package to the directory that contains the
&lt;code&gt;xontrib&lt;/code&gt; package's code, and this &lt;code&gt;package_data&lt;/code&gt; setting tells &lt;code&gt;setuptools&lt;/code&gt; to
not only install &lt;code&gt;.py&lt;/code&gt; files into the package's final installation location,
but to also include any files matching the glob pattern &lt;code&gt;*.xsh&lt;/code&gt;. More details
on this setting can be found in the &lt;a href="build://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files"&gt;setuptools data files 
documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Conveniently, setuptools will install multiple distributions that claim to
create the same packages via the &lt;code&gt;packages&lt;/code&gt; directive without clobbering one
another (assuming their contents don't conflict). What this means for a xontrib
is that all the xontribs that use &lt;code&gt;packages=['xontrib']&lt;/code&gt; will have their &lt;code&gt;.py&lt;/code&gt;
and &lt;code&gt;.xsh&lt;/code&gt; files installed into the &lt;code&gt;site-packages&lt;/code&gt; &lt;code&gt;xontrib&lt;/code&gt; directory
alongside the other installed xontribs' &lt;code&gt;.py&lt;/code&gt; and &lt;code&gt;.xsh&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;Have a look at the
&lt;code&gt;xontrib/&lt;/code&gt; directory inside my &lt;code&gt;xonsh&lt;/code&gt; virtualenv, for instance, which includes
several other xontribs' code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eddie@eddie-ubuntu ~/.virtualenvs/xonsh $ ls lib/python3.7/site-packages/xontrib                                                                  
fzf-widgets.xsh  per-directory-history.xsh  thefuck.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Each of these &lt;code&gt;.xsh&lt;/code&gt; and &lt;code&gt;.py&lt;/code&gt; files were created by installing different
xontrib Python packages using &lt;code&gt;pip&lt;/code&gt;, yet their code lives in the same spot,
discoverable by import machinery using the implicit namespace packages
convention.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;platforms&lt;/code&gt; allows us to specify that a xontrib should be available on one
platform but not another. For mine, I chose &lt;code&gt;'any'&lt;/code&gt; because I didn't expect to
introduce functionality that only works on some of xonsh's supported platforms.&lt;/p&gt;
&lt;p&gt;So, now my xontrib is installable via &lt;code&gt;pip&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;```
eddie@eddie-ubuntu ~/source/xontrib-per-directory-history master $ tree                                                                         &lt;br /&gt;
.
├── setup.py
└── xontrib
    └── per-directory-history.xsh&lt;/p&gt;
&lt;p&gt;1 directory, 2 files&lt;/p&gt;
&lt;p&gt;eddie@eddie-ubuntu ~/source/xontrib-per-directory-history master $ xpip install .                                                               &lt;br /&gt;
Processing /home/eddie/source/xontrib-per-directory-history
Requirement already satisfied: xonsh&amp;gt;=0.9.3 in /home/eddie/source/xonsh (from xontrib-per-directory-history==0.1) (0.9.3)
xontInstalling collected packages: xontrib-per-directory-history
rib   Running setup.py install for xontrib-per-directory-history ... -ldone
Successfully installed xontrib-per-directory-history-0.1
aYou are using pip version 19.0.3, however version 19.1.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
eddie@eddie-ubuntu ~/source/xontrib-per-directory-history master $ xontrib load per-directory-history                                           &lt;br /&gt;
hello world
```&lt;/p&gt;
&lt;p&gt;And, yes, the only code in my xontrib's &lt;code&gt;.py&lt;/code&gt; file right now is &lt;code&gt;print('hello world')&lt;/code&gt;,
but that's beside the point.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope you've found this guide useful for getting started in developing a
xontrib, but obviously I've left out everything regarding what you can do with
a xontrib. xontribs allow hooking into shell functionality, such as that
provided by &lt;a href="https://github.com/prompt-toolkit/python-prompt-toolkit"&gt;prompt
toolkit&lt;/a&gt;. Using
&lt;code&gt;prompt toolkit&lt;/code&gt;'s keybinding functionality would allow you to install a new
keyboard command to run some code, for instance. For more examples and
inspiration for what can be done in a xontrib, I suggest checking out the
&lt;a href="https://github.com/xonsh/xonsh/tree/master/xontrib"&gt;xontribs bundled with xonsh by
default&lt;/a&gt;. Happy hacking!&lt;/p&gt;
&lt;p&gt;For information on sharing your xontrib with the world, check out the links in
the introduction.&lt;/p&gt;</content><category term="xonshiousness"></category><category term="xonsh"></category><category term="shell"></category><category term="linux"></category><category term="python"></category><category term="xontribs"></category></entry><entry><title>A xonsh alias for using pyenv with vox for nice Python virtualenvironments</title><link href="https://www.dinogalactic.com/a-xonsh-alias-for-using-pyenv-with-vox-for-nice-python-virtualenvironments.html" rel="alternate"></link><published>2019-05-23T08:00:00-04:00</published><updated>2019-05-23T08:00:00-04:00</updated><author><name>Eddie Peters</name></author><id>tag:www.dinogalactic.com,2019-05-23:/a-xonsh-alias-for-using-pyenv-with-vox-for-nice-python-virtualenvironments.html</id><summary type="html">&lt;p&gt;Today I started migrating away from virtualenvironments created by &lt;code&gt;pyenv-virtualenv&lt;/code&gt; and started managing virtualenvs with xonsh's built-in &lt;code&gt;vox&lt;/code&gt; utility. (I had previously been using the same old virtualenvironments created by &lt;code&gt;pyenv virtualenv&lt;/code&gt; and just activating them with &lt;code&gt;vox activate ~/.pyenv/versions/virtualenv_symlink'&lt;/code&gt;, but that's for the birds.)&lt;/p&gt;
&lt;p&gt;So, one …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I started migrating away from virtualenvironments created by &lt;code&gt;pyenv-virtualenv&lt;/code&gt; and started managing virtualenvs with xonsh's built-in &lt;code&gt;vox&lt;/code&gt; utility. (I had previously been using the same old virtualenvironments created by &lt;code&gt;pyenv virtualenv&lt;/code&gt; and just activating them with &lt;code&gt;vox activate ~/.pyenv/versions/virtualenv_symlink'&lt;/code&gt;, but that's for the birds.)&lt;/p&gt;
&lt;p&gt;So, one thing I wanted to do is have &lt;code&gt;vox&lt;/code&gt; use my &lt;code&gt;pyenv&lt;/code&gt;-detected &lt;code&gt;python&lt;/code&gt; bin whenver I created new virtualenvironments, if I didn't specify an override &lt;code&gt;python&lt;/code&gt; bin. In other words, I wanted stuff like the &lt;code&gt;.python-version&lt;/code&gt; file and the &lt;code&gt;pyenv shell&lt;/code&gt; command to be respected by &lt;code&gt;vox&lt;/code&gt; without adding all that functionality to &lt;code&gt;vox&lt;/code&gt; proper. This is probably a pretty specific use case, though if more people need it, lmk!&lt;/p&gt;
&lt;p&gt;I came up with an alias that wraps the original &lt;code&gt;vox&lt;/code&gt; alias (that's how the &lt;code&gt;vox&lt;/code&gt; command is loaded into the environment, as an alias).&lt;/p&gt;
&lt;p&gt;Before I override it, I save the previous &lt;code&gt;vox&lt;/code&gt; alias in a variable - the &lt;code&gt;vox&lt;/code&gt; alias normally just maps to a callable, so I saved the callable. This is because I want to call the previous &lt;code&gt;vox&lt;/code&gt; functionality inside of my new alias, which I am naming &lt;code&gt;'vox'&lt;/code&gt;, and I would end up with unwanted recursion if I called my new alias function from inside itself.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;normal_vox &lt;span style="color: #555555"&gt;=&lt;/span&gt; aliases[&lt;span style="color: #CC3300"&gt;&amp;#39;vox&amp;#39;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Next I define a function that does a simple check for whether I had specified an interpreter in the arguments, and if not, it prepends the &lt;code&gt;pyenv&lt;/code&gt;-detected &lt;code&gt;python&lt;/code&gt; bin to the argument list.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style="color: #006699; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #CC00FF"&gt;pyenv_vox&lt;/span&gt;(argument_list, &lt;span style="color: #555555"&gt;**&lt;/span&gt;kwargs):
    &lt;span style="color: #CC3300; font-style: italic"&gt;&amp;quot;&amp;quot;&amp;quot;Use pyenv-detected python to create environments if no other interpreter is specified.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;f&amp;#39;Using alias for vox in .xonshrc&amp;#39;&lt;/span&gt;)
    &lt;span style="color: #006699; font-weight: bold"&gt;if&lt;/span&gt; &lt;span style="color: #336666"&gt;len&lt;/span&gt;(argument_list) &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; argument_list[&lt;span style="color: #FF6600"&gt;0&lt;/span&gt;] &lt;span style="color: #555555"&gt;==&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;new&amp;#39;&lt;/span&gt; \
            &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;--interpreter&amp;#39;&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;in&lt;/span&gt; argument_list \
            &lt;span style="color: #000000; font-weight: bold"&gt;and&lt;/span&gt; &lt;span style="color: #CC3300"&gt;&amp;#39;-p&amp;#39;&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;not&lt;/span&gt; &lt;span style="color: #000000; font-weight: bold"&gt;in&lt;/span&gt; argument_list:
            python &lt;span style="color: #555555"&gt;=&lt;/span&gt; &lt;span style="color: #AA0000; background-color: #FFAAAA"&gt;$&lt;/span&gt;(pyenv which python)&lt;span style="color: #555555"&gt;.&lt;/span&gt;strip()
            &lt;span style="color: #336666"&gt;print&lt;/span&gt;(&lt;span style="color: #CC3300"&gt;f&amp;#39;Using pyenv-detected python to create new environment: &lt;/span&gt;&lt;span style="color: #AA0000"&gt;{&lt;/span&gt;python&lt;span style="color: #AA0000"&gt;}&lt;/span&gt;&lt;span style="color: #CC3300"&gt;&amp;#39;&lt;/span&gt;)
            argument_list &lt;span style="color: #555555"&gt;=&lt;/span&gt; [&lt;span style="color: #CC3300"&gt;&amp;#39;new&amp;#39;&lt;/span&gt;, &lt;span style="color: #CC3300"&gt;&amp;#39;--interpreter&amp;#39;&lt;/span&gt;, python] &lt;span style="color: #555555"&gt;+&lt;/span&gt; argument_list[&lt;span style="color: #FF6600"&gt;1&lt;/span&gt;:]
    &lt;span style="color: #006699; font-weight: bold"&gt;return&lt;/span&gt; normal_vox(argument_list, &lt;span style="color: #555555"&gt;**&lt;/span&gt;kwargs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Regardless of whether that modification is made to the argument list, it calls the original &lt;code&gt;vox&lt;/code&gt; alias with the argument list, so other &lt;code&gt;vox&lt;/code&gt; commands effectively pass through untouched.&lt;/p&gt;
&lt;p&gt;Finally, I set &lt;code&gt;aliases['vox']&lt;/code&gt; to this new alias function.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aliases[&lt;span style="color: #CC3300"&gt;&amp;#39;vox&amp;#39;&lt;/span&gt;] &lt;span style="color: #555555"&gt;=&lt;/span&gt; pyenv_vox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;And, that's it. With the &lt;code&gt;print()&lt;/code&gt; statements included in the alias function, you can see what happens.&lt;/p&gt;
&lt;p&gt;It works, too:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eddie@eddie-ubuntu ~/website master $ vox new excitement
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Using pyenv-detected python to create new environment: /home/eddie/.pyenv/versions/3.7.3/bin/python
Creating environment...
Environment &lt;span style="color: #CC3300"&gt;&amp;#39;excitement&amp;#39;&lt;/span&gt; created. Activate it with &lt;span style="color: #CC3300"&gt;&amp;quot;vox activate excitement&amp;quot;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Other commands are untouched by the alias - well, at least not substantively. The logging still lets you know you're using the alias.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eddie@eddie-ubuntu ~/website master $ vox ls
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Available environments:
butter
excitement
website
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can set up pyenv to use a specific python, and that python will be used for the virtualenv:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eddie@eddie-ubuntu ~ &lt;span style="color: #555555"&gt;[&lt;/span&gt;&lt;span style="color: #FF6600"&gt;1&lt;/span&gt;&lt;span style="color: #555555"&gt;]&lt;/span&gt;$ pyenv &lt;span style="color: #336666"&gt;local&lt;/span&gt; &lt;span style="color: #FF6600"&gt;3&lt;/span&gt;.7.3
eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;3&lt;/span&gt;.7.3
eddie@eddie-ubuntu ~ $ pyenv version
&lt;span style="color: #FF6600"&gt;3&lt;/span&gt;.7.3 &lt;span style="color: #555555"&gt;(&lt;/span&gt;&lt;span style="color: #336666"&gt;set&lt;/span&gt; by /home/eddie/.python-version&lt;span style="color: #555555"&gt;)&lt;/span&gt;
eddie@eddie-ubuntu ~ $ vox new demo-3.7.3
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Using pyenv-detected python to create new environment: /home/eddie/.pyenv/versions/3.7.3/bin/python
Creating environment...
Environment &lt;span style="color: #CC3300"&gt;&amp;#39;demo-3.7.3&amp;#39;&lt;/span&gt; created. Activate it with &lt;span style="color: #CC3300"&gt;&amp;quot;vox activate demo-3.7.3&amp;quot;&lt;/span&gt;.

eddie@eddie-ubuntu ~ $ pyenv &lt;span style="color: #336666"&gt;local&lt;/span&gt; &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
eddie@eddie-ubuntu ~ $ vox new demo
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Using pyenv-detected python to create new environment: /home/eddie/.pyenv/versions/2.7.15/bin/python
Creating environment...
New python executable in /home/eddie/.virtualenvs/demo/bin/python
Installing setuptools, pip, wheel...done.
Environment &lt;span style="color: #CC3300"&gt;&amp;#39;demo&amp;#39;&lt;/span&gt; created. Activate it with &lt;span style="color: #CC3300"&gt;&amp;quot;vox activate demo&amp;quot;&lt;/span&gt;.

eddie@eddie-ubuntu ~ $ vox activate demo
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Activated &lt;span style="color: #CC3300"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;.

&lt;span style="color: #555555"&gt;(&lt;/span&gt;demo&lt;span style="color: #555555"&gt;)&lt;/span&gt; eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
&lt;span style="color: #555555"&gt;(&lt;/span&gt;demo&lt;span style="color: #555555"&gt;)&lt;/span&gt; eddie@eddie-ubuntu ~ $ vox deactivate
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Deactivated &lt;span style="color: #CC3300"&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;.

eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
eddie@eddie-ubuntu ~ $ vox activate demo-3.7.3
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Activated &lt;span style="color: #CC3300"&gt;&amp;quot;demo-3.7.3&amp;quot;&lt;/span&gt;.

&lt;span style="color: #555555"&gt;(&lt;/span&gt;demo-3.7.3&lt;span style="color: #555555"&gt;)&lt;/span&gt; eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;3&lt;/span&gt;.7.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can still override pyenv's current python when creating virtualenvs:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td&gt;&lt;div class="linenodiv" style="background-color: #f0f0f0; padding-right: 10px"&gt;&lt;pre style="line-height: 125%"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite" style="background: #f0f3f3"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eddie@eddie-ubuntu ~ $ pyenv &lt;span style="color: #336666"&gt;local&lt;/span&gt; &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
eddie@eddie-ubuntu ~ &lt;span style="color: #555555"&gt;[&lt;/span&gt;&lt;span style="color: #FF6600"&gt;2&lt;/span&gt;&lt;span style="color: #555555"&gt;]&lt;/span&gt;$ vox new -p /usr/bin/python demo-system-python
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Creating environment...
New python executable in /home/eddie/.virtualenvs/demo-system-python/bin/python
Installing setuptools, pip, wheel...done.
Environment &lt;span style="color: #CC3300"&gt;&amp;#39;demo-system-python&amp;#39;&lt;/span&gt; created. Activate it with &lt;span style="color: #CC3300"&gt;&amp;quot;vox activate demo-system-python&amp;quot;&lt;/span&gt;.
eddie@eddie-ubuntu ~ $ /usr/bin/python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.16
eddie@eddie-ubuntu ~ $ vox activate demo-system-python
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Activated &lt;span style="color: #CC3300"&gt;&amp;quot;demo-system-python&amp;quot;&lt;/span&gt;.
&lt;span style="color: #555555"&gt;(&lt;/span&gt;demo-system-python&lt;span style="color: #555555"&gt;)&lt;/span&gt; eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.16
&lt;span style="color: #555555"&gt;(&lt;/span&gt;demo-system-python&lt;span style="color: #555555"&gt;)&lt;/span&gt; eddie@eddie-ubuntu ~ $ vox deactivate
Using &lt;span style="color: #336666"&gt;alias&lt;/span&gt; &lt;span style="color: #006699; font-weight: bold"&gt;for&lt;/span&gt; vox in .xonshrc
Deactivated &lt;span style="color: #CC3300"&gt;&amp;quot;demo-system-python&amp;quot;&lt;/span&gt;.
eddie@eddie-ubuntu ~ $ python --version
Python &lt;span style="color: #FF6600"&gt;2&lt;/span&gt;.7.15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I'll upload the code sometime, and I'll update this page with it, hopefully, but you've got what you need :)&lt;/p&gt;</content><category term="xonshiousness"></category><category term="xonsh"></category><category term="shell"></category><category term="linux"></category><category term="python"></category></entry></feed>